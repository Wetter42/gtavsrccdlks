USING "types.sch"
USING "model_enums.sch"
USING "commands_weapon.sch"
USING "generic.sch"
USING "ped_bonetags.sch"
USING "nm_strings.sch"
USING "event_enums.sch"
USING "eulers.sch"
USING "rel_groups.sch"
 
/// PURPOSE: Information regarding a specific ped head blend
/// NOTE:
///    Keep in sync with code in commands_ped.cpp
STRUCT scrPedHeadBlendData
    INT m_head0
	INT m_head1
	INT m_head2
	INT m_tex0
	INT m_tex1
	INT m_tex2
	FLOAT m_headBlend
	FLOAT m_texBlend
	FLOAT m_varBlend
	BOOL m_isParent
ENDSTRUCT

ENUM HEAD_OVERLAY_SLOT
	HOS_BLEMISHES = 0,
	HOS_FACIAL_HAIR,
	HOS_EYEBROW,
	HOS_AGING,
	HOS_MAKEUP,
	HOS_BLUSHER,
	HOS_DAMAGE,
	HOS_BASE_DETAIL,
	HOS_SKIN_DETAIL_1,
	HOS_SKIN_DETAIL_2,
	HOS_BODY_1,
	HOS_BODY_2,
	HOS_BODY_3
ENDENUM

ENUM MICRO_MORPH_TYPE
	// pairs of morphs, expect a blend value in range [-1.0, 1.0]
	MMT_NOSE_WIDTH = 0,
	MMT_NOSE_HEIGHT,
	MMT_NOSE_LENGTH,
	MMT_NOSE_PROFILE,
	MMT_NOSE_TIP,
	MMT_NOSE_BROKE,
	MMT_BROW_HEIGHT,
	MMT_BROW_DEPTH,
	MMT_CHEEK_HEIGHT,
	MMT_CHEEK_DEPTH,
	MMT_CHEEK_PUFFED,
	MMT_EYES_SIZE,
	MMT_LIPS_SIZE,
	MMT_JAW_WIDTH,
	MMT_JAW_ROUND,
	MMT_CHIN_HEIGHT,
	MMT_CHIN_DEPTH,
	MMT_CHIN_POINTED,

	// single morphs, expect a value in range [0.0, 1.0]
	MMT_CHIN_BUM,
	MMT_NECK_MALE
ENDENUM

ENUM RAMP_TYPE
	RT_NONE = 0,
	RT_HAIR,
	RT_MAKEUP
ENDENUM

ENUM PED_TYPE
	PEDTYPE_INVALID = -1,
    PEDTYPE_PLAYER1=0,			// Michael
    PEDTYPE_PLAYER2,            // Franklin
    PEDTYPE_PLAYER_NETWORK,     // Player controlled over the network (not by this machine)
    PEDTYPE_PLAYER_UNUSED,		// Trevor
    PEDTYPE_CIVMALE,
    PEDTYPE_CIVFEMALE,
    PEDTYPE_COP,
    PEDTYPE_GANG1,
    PEDTYPE_GANG2,
    PEDTYPE_GANG3,
    PEDTYPE_GANG4,
    PEDTYPE_GANG5,
    PEDTYPE_GANG6,
    PEDTYPE_GANG7,
    PEDTYPE_GANG8,
    PEDTYPE_GANG9,
    PEDTYPE_GANG10,
    PEDTYPE_GANG_CHINESE_JAPANESE,
    PEDTYPE_GANG_PUERTO_RICAN,
    PEDTYPE_DEALER,
    PEDTYPE_MEDIC,
    PEDTYPE_FIRE,
    PEDTYPE_CRIMINAL,
    PEDTYPE_BUM,
    PEDTYPE_PROSTITUTE,
    PEDTYPE_SPECIAL,
    PEDTYPE_MISSION,
    PEDTYPE_SWAT,
    PEDTYPE_ANIMAL,
    PEDTYPE_ARMY,
    PEDTYPE_LAST_PEDTYPE
ENDENUM

ENUM PED_STAT
    PEDSTAT_PLAYER = 0,
    PEDSTAT_COP,
    PEDSTAT_MEDIC,
    PEDSTAT_FIRE,

    PEDSTAT_GANG1,
    PEDSTAT_GANG2,
    PEDSTAT_GANG3,
    PEDSTAT_GANG4,
    PEDSTAT_GANG5,
    PEDSTAT_GANG6,
    PEDSTAT_GANG7,
    PEDSTAT_GANG8,
    PEDSTAT_GANG9,
    PEDSTAT_GANG10,

    PEDSTAT_STREET_GUY,
    PEDSTAT_SUIT_GUY,
    PEDSTAT_SENSIBLE_GUY,
    PEDSTAT_GEEK_GUY,
    PEDSTAT_OLD_GUY,
    PEDSTAT_TOUGH_GUY,
    
    PEDSTAT_STREET_GIRL,
    PEDSTAT_SUIT_GIRL,
    PEDSTAT_SENSIBLE_GIRL,
    PEDSTAT_GEEK_GIRL,
    PEDSTAT_OLD_GIRL,
    PEDSTAT_TOUGH_GIRL,
    
    PEDSTAT_TRAMP_MALE,
    PEDSTAT_TRAMP_FEMALE,
    PEDSTAT_TOURIST,
    PEDSTAT_PROSTITUTE,
    PEDSTAT_CRIMINAL,
    PEDSTAT_BUSKER,
    PEDSTAT_TAXIDRIVER,
    PEDSTAT_PSYCHO,
    PEDSTAT_STEWARD,
    PEDSTAT_SPORTSFAN,
    PEDSTAT_SHOPPER,
    PEDSTAT_OLDSHOPPER,
    
    PEDSTAT_BEACH_GUY,
    PEDSTAT_BEACH_GIRL,
    PEDSTAT_SKATER,
    PEDSTAT_STD_MISSION,
    PEDSTAT_COWARD
ENDENUM

ENUM PEDGROUP_FORMATION
    FORMATION_LOOSE,
    FORMATION_SURROUND_FACING_INWARDS,
    FORMATION_SURROUND_FACING_AHEAD,
    FORMATION_LINE_ABREAST,
    FORMATION_FOLLOW_IN_LINE
ENDENUM

ENUM DEFAULT_TASK_ALLOCATOR
    DEFAULT_TASK_ALLOCATOR_FOLLOW_ANY_MEANS=0,      //Follows the leader by any means
    DEFAULT_TASK_ALLOCATOR_FOLLOW_LIMITED,
    DEFAULT_TASK_ALLOCATOR_STAND_STILL,
    DEFAULT_TASK_ALLOCATOR_CHAT,
    DEFAULT_TASK_ALLOCATOR_SIT_IN_LEADER_CAR,
    DEFAULT_TASK_ALLOCATOR_RANDOM
ENDENUM

// Char decision makers that can be loaded - must match the order of the ms_ped_DM_Names array in
//  PedIntelligence.cpp in the games Peds directory
ENUM ALLOWED_PED_DECISION_MAKERS
    DM_PED_MISSION_EMPTY = 0,       //  0
    DM_PED_MISSION_NORM,            //  1
    DM_PED_MISSION_TOUGH,           //  2
    DM_PED_MISSION_WEAK             //  3
ENDENUM

// List of decision makers - must match the order of calls to LoadDecisionMaker in 
//  CDecisionMakerTypesFileLoader::LoadDefaultDecisionMaker() in Peds\PedDecision.cpp
ENUM DEFAULT_DECISION_MAKERS
    DM_PED_GANG                 = 65536,    
    DM_PED_GROUP_JUST_FOLLOW    = 65537,    
    DM_PED_COP                  = 65538,    
    DM_PED_RANDOM_NORM          = 65539,    
    DM_PED_RANDOM_TOUGH         = 65539,    
    DM_PED_RANDOM_WEAK          = 65539,    
    DM_PED_FIREMAN              = 65540,    
    DM_PED_EMPTY                = 65541,    
    DM_PED_INDOORS              = 65539,    
    
//  Combat  
    DM_COMBAT_GROUP_CRAP        = 65542,    
    DM_COMBAT_GROUP_NORMAL      = 65543,    
    DM_COMBAT_GROUP_PROFESSIONAL= 65544,    
    DM_COMBAT_GROUP_HIDE        = 65545,    
    DM_COMBAT_NORMAL            = 65546,    
    DM_COMBAT_MISSION_COWARD    = 65547,
    DM_COMBAT_COP_NORM          = 65550,
    
// Decision makers that used to be loaded - can now be copied instead
    DM_PED_MISSION_EMPTY_COPY   = 65554,
    DM_PED_MISSION_NORM_COPY    = 65555,
    DM_PED_MISSION_TOUGH_COPY   = 65556,    
    DM_PED_MISSION_WEAK_COPY    = 65557,
    
    //  Combat
    DM_COMBAT_EMPTY_COPY        = 65558,
    DM_COMBAT_COWARD_COPY       = 65559,
    DM_COMBAT_DEFENSIVE_COPY    = 65560,
    DM_COMBAT_FIERCE_COPY       = 65561,
    DM_COMBAT_HIDE_COPY         = 65562,
    DM_COMBAT_CRAP_DEFENSIVE_COPY   = 65563,
    DM_COMBAT_CRAP_NORMAL_COPY      = 65564,
    DM_COMBAT_CRAP_FIERCE_COPY      = 65565,
    DM_COMBAT_PROF_DEFENSIVE_COPY   = 65566,
    DM_COMBAT_PROF_NORMAL_COPY      = 65567,
    DM_COMBAT_PROF_FIERCE_COPY      = 65568,
    DM_COMBAT_BOSS_COPY             = 65569
ENDENUM

// List of relationship types - must match the eAcquaintanceType enumerated type in 
//  PedType.h in the games Peds directory
ENUM RELATIONSHIP_TYPE
    ACQUAINTANCE_TYPE_PED_NONE = 255,
    ACQUAINTANCE_TYPE_PED_RESPECT = 0,              
    ACQUAINTANCE_TYPE_PED_LIKE,         //  1
    ACQUAINTANCE_TYPE_PED_IGNORE,       //  2
    ACQUAINTANCE_TYPE_PED_DISLIKE,      //  3
    ACQUAINTANCE_TYPE_PED_WANTED,       //  4       
    ACQUAINTANCE_TYPE_PED_HATE,         //  5
    ACQUAINTANCE_TYPE_PED_DEAD          //  6   
ENDENUM

// List of melee combos - must match the enumerated type in 
//  TaskAttack.h in the games Task directory
ENUM MELEE_COMBOS
    MCOMBO_UNARMED_1 = 4,
    MCOMBO_UNARMED_2 = 5,
    MCOMBO_UNARMED_3 = 6,
    MCOMBO_UNARMED_4 = 7
ENDENUM

// !! DEPRECATED !!
// List of bike knockoff's - must match the enumerated type in 
//  Ped.h in the games Peds directory
ENUM BIKE_KNOCKOFF
    KNOCKOFFBIKE_DEFAULT = 0,       
    KNOCKOFFBIKE_NEVER,                 
    KNOCKOFFBIKE_EASY,
    KNOCKOFFBIKE_HARD
ENDENUM
// List of vehicle knockoff's - must match the enumerated type in 
//  Ped.h in the games Peds directory
ENUM VEHICLE_KNOCKOFF
    KNOCKOFFVEHICLE_DEFAULT = 0,
    KNOCKOFFVEHICLE_NEVER,
    KNOCKOFFVEHICLE_EASY,
    KNOCKOFFVEHICLE_HARD
ENDENUM

// List of swim tasks - must match the  eSwimStates enumerated type in 
// TaskPlayer.h in the games Task directory
ENUM SWIM_STATES
    SWIM_IDLE = 0,
    SWIM_BREAST = 1,
    SWIM_CRAWL = 2,
    SWIM_DIVE = 3,
    SWIM_UNDERWATER = 4,
    SWIM_JUMP = 5,
    SWIM_JUST_ENTERED_WATER = 6
ENDENUM

const_int NUM_PED_PROPS 9
ENUM PED_PROP_POSITION
    ANCHOR_HEAD = 0,
    ANCHOR_EYES,
    ANCHOR_EARS,
    ANCHOR_MOUTH,
    ANCHOR_LEFT_HAND,
    ANCHOR_RIGHT_HAND,
    ANCHOR_LEFT_WRIST,
    ANCHOR_RIGHT_WRIST,
    ANCHOR_HIP
ENDENUM

const_int NUM_PED_COMPONENTS 12
ENUM PED_COMPONENT
    PED_COMP_HEAD = 0,
    PED_COMP_BERD,
    PED_COMP_HAIR,
    PED_COMP_TORSO,
    PED_COMP_LEG,
    PED_COMP_HAND,
    PED_COMP_FEET,
    PED_COMP_TEETH,
    PED_COMP_SPECIAL, //PV_COMP_ACCS
    PED_COMP_SPECIAL2, //PV_COMP_TASK 
    PED_COMP_DECL,      //?
    PED_COMP_JBIB
ENDENUM


//  This enum has to match the enum in ScriptMetadata.h
ENUM MP_OUTFIT_ENUM
	
	OUTFIT_MP_DEFAULT 	 = -1	
	,OUTFIT_MP_FREEMODE  = 0
	//--- Heist outfits ---
	,OUTFIT_HEIST_CASUAL_0 
	,OUTFIT_HEIST_CASUAL_1
	,OUTFIT_HEIST_CASUAL_2
	,OUTFIT_HEIST_CASUAL_3
	,OUTFIT_HEIST_STREET_0
	,OUTFIT_HEIST_STREET_1
	,OUTFIT_HEIST_STREET_2
	,OUTFIT_HEIST_STREET_3
	,OUTFIT_HEIST_STREET_COMBAT_0
	,OUTFIT_HEIST_STREET_COMBAT_1//10
	,OUTFIT_HEIST_STREET_COMBAT_2 
	,OUTFIT_HEIST_STREET_COMBAT_3
	,OUTFIT_HEIST_LIGHT_COMBAT_0
	,OUTFIT_HEIST_LIGHT_COMBAT_1
	,OUTFIT_HEIST_LIGHT_COMBAT_2
	,OUTFIT_HEIST_LIGHT_COMBAT_3
	,OUTFIT_HEIST_HEAVY_COMBAT_0
	,OUTFIT_HEIST_HEAVY_COMBAT_1
	,OUTFIT_HEIST_HEAVY_COMBAT_2
	,OUTFIT_HEIST_HEAVY_COMBAT_3//20
	,OUTFIT_HEIST_CASUAL_STEALTH_0 
	,OUTFIT_HEIST_CASUAL_STEALTH_1
	,OUTFIT_HEIST_CASUAL_STEALTH_2
	,OUTFIT_HEIST_CASUAL_STEALTH_3
	,OUTFIT_HEIST_TACTICAL_STEALTH_0
	,OUTFIT_HEIST_TACTICAL_STEALTH_1
	,OUTFIT_HEIST_TACTICAL_STEALTH_2
	,OUTFIT_HEIST_TACTICAL_STEALTH_3
	,OUTFIT_HEIST_STEALTH_PILOT_0
	,OUTFIT_HEIST_STEALTH_PILOT_1//30
	,OUTFIT_HEIST_STEALTH_PILOT_2 
	,OUTFIT_HEIST_STEALTH_PILOT_3
	,OUTFIT_HEIST_CASUAL_PILOT_0
	,OUTFIT_HEIST_CASUAL_PILOT_1
	,OUTFIT_HEIST_CASUAL_PILOT_2
	,OUTFIT_HEIST_DRIVER_0
	,OUTFIT_HEIST_DRIVER_1
	,OUTFIT_HEIST_DRIVER_2
	,OUTFIT_HEIST_DRIVER_3
	,OUTFIT_HEIST_SMART_SUITS_0//40
	,OUTFIT_HEIST_SMART_SUITS_1
	,OUTFIT_HEIST_SMART_SUITS_2 
	,OUTFIT_HEIST_SMART_SUITS_3
	,OUTFIT_HEIST_SHARP_SUITS_0
	,OUTFIT_HEIST_SHARP_SUITS_1
	,OUTFIT_HEIST_SHARP_SUITS_2
	,OUTFIT_HEIST_SHARP_SUITS_3
	,OUTFIT_HEIST_SLOPPY_SUITS_0
	,OUTFIT_HEIST_SLOPPY_SUITS_1
	,OUTFIT_HEIST_SLOPPY_SUITS_2//50
	,OUTFIT_HEIST_SLOPPY_SUITS_3
	,OUTFIT_HEIST_MINIMALIST_SUITS_0 
	,OUTFIT_HEIST_MINIMALIST_SUITS_1
	,OUTFIT_HEIST_MINIMALIST_SUITS_2
	,OUTFIT_HEIST_MINIMALIST_SUITS_3
	,OUTFIT_HEIST_TUXEDOS_0
	,OUTFIT_HEIST_TUXEDOS_1
	,OUTFIT_HEIST_TUXEDOS_2
	,OUTFIT_HEIST_TUXEDOS_3
	,OUTFIT_HEIST_NIGHT_BIKER_0//60
	,OUTFIT_HEIST_NIGHT_BIKER_1
	,OUTFIT_HEIST_NIGHT_BIKER_2
	,OUTFIT_HEIST_NIGHT_BIKER_3
	,OUTFIT_HEIST_REFUSE_COLLECTOR_0 
	,OUTFIT_HEIST_REFUSE_COLLECTOR_1
	,OUTFIT_HEIST_POLICE_0
	,OUTFIT_HEIST_PRISONER_0
	,OUTFIT_HEIST_PRISON_OFFICER_0
	,OUTFIT_HEIST_TOURIST_0
	,OUTFIT_HEIST_TOURIST_1//70
	,OUTFIT_HEIST_TOURIST_2
	,OUTFIT_HEIST_TOURIST_3
	,OUTFIT_HEIST_HAZCHEM_0
	,OUTFIT_HEIST_HAZCHEM_1
	,OUTFIT_HEIST_HAZCHEM_2
	,OUTFIT_HEIST_HAZCHEM_3 
	,OUTFIT_HEIST_COVERALLS_0
	,OUTFIT_HEIST_COVERALLS_1
	,OUTFIT_HEIST_COVERALLS_2	
	,OUTFIT_HEIST_COVERALLS_3//80
	,OUTFIT_HEIST_FLIGHT_SUIT_0				
	,OUTFIT_HEIST_FLIGHT_SUIT_1			
	,OUTFIT_HEIST_FLIGHT_SUIT_2				
	,OUTFIT_HEIST_FLIGHT_SUIT_3
	//LTS creator VS mission outfits:
	,OUTFIT_RAPUNZEL_ATTACK
	,OUTFIT_RAPUNZEL_DEFEND
	,OUTFIT_T_MASKED_NIGHT
	,OUTFIT_T_MASKED_TUNDRA
	,OUTFIT_T_MASKED_FOREST
	,OUTFIT_JASON 
	,OUTFIT_FREDDY
	,OUTFIT_DAVID//90
	,OUTFIT_GOLIATH
	,OUTFIT_TERMINATOR_RUNNER
	,OUTFIT_TERMINATOR_ATTACKER
	,OUTFIT_FOXHUNT_FOX
	,OUTFIT_FOXHUNT_FOX_ALT
	,OUTFIT_FOXHUNT_HOUND
	,OUTFIT_PRISON_POLICE_OFFICER_VS
	,OUTFIT_PRISON_PRISONER_VS 
	
	//outfits that are just masks
	,OUTFIT_MASK_BALACLAVAFULL
	,OUTFIT_MASK_REBREATHER//100
	,OUTFIT_MASK_BALACLAVA
	,OUTFIT_MASK_GASMASK
	,OUTFIT_MASK_PIG
	,OUTFIT_MASK_BIGSKULL
	,OUTFIT_MASK_MONKEYSMOKING
	,OUTFIT_MASK_HOCKEYJASON
	,OUTFIT_MASK_APE
	,OUTFIT_MASK_CARNIVAL 
	,OUTFIT_MASK_GOBLIN
	,OUTFIT_MASK_SANTA //110
	,OUTFIT_MASK_CREEPYMOOSE
	,OUTFIT_MASK_SNOWMANHEAD
	,OUTFIT_MASK_MASQUERADEEYES
	,OUTFIT_MASK_MASQUERADENOSEY
	,OUTFIT_MASK_CREEPYBABY
	,OUTFIT_MASK_HOCKEYBLUE
	,OUTFIT_MASK_HOCKEYSKULL
	,OUTFIT_MASK_WARRIOR 
	,OUTFIT_MASK_CAT
	,OUTFIT_MASK_FOX//120
	,OUTFIT_MASK_OWL
	,OUTFIT_MASK_RACCOON
	,OUTFIT_MASK_BROWNBEAR
	,OUTFIT_MASK_BISON
	,OUTFIT_MASK_BULL
	,OUTFIT_MASK_EAGLE
	,OUTFIT_MASK_VULTURE
	,OUTFIT_MASK_WOLF 	
	,OUTFIT_HOS_SUIT
	,OUTFIT_REFUSE_COLLECTOR//130
	//classic Vs 	
	,OUTFIT_VERSUS_CLASSIC_JUNGLE_0
	,OUTFIT_VERSUS_CLASSIC_JUNGLE_1
	,OUTFIT_VERSUS_CLASSIC_JUNGLE_2
	,OUTFIT_VERSUS_CLASSIC_JUNGLE_3
	,OUTFIT_VERSUS_CLASSIC_JUNGLE_4
	,OUTFIT_VERSUS_CLASSIC_JUNGLE_5
	,OUTFIT_VERSUS_CLASSIC_STEEL_0
	,OUTFIT_VERSUS_CLASSIC_STEEL_1
	,OUTFIT_VERSUS_CLASSIC_STEEL_2
	,OUTFIT_VERSUS_CLASSIC_STEEL_3//140
	,OUTFIT_VERSUS_CLASSIC_STEEL_4
	,OUTFIT_VERSUS_CLASSIC_STEEL_5
	,OUTFIT_VERSUS_CLASSIC_STREET_0
	,OUTFIT_VERSUS_CLASSIC_STREET_1
	,OUTFIT_VERSUS_CLASSIC_STREET_2
	,OUTFIT_VERSUS_CLASSIC_STREET_3
	,OUTFIT_VERSUS_CLASSIC_STREET_4
	,OUTFIT_VERSUS_CLASSIC_STREET_5
	,OUTFIT_VERSUS_CLASSIC_TACTICAL_0
	,OUTFIT_VERSUS_CLASSIC_TACTICAL_1//150
	,OUTFIT_VERSUS_CLASSIC_TACTICAL_2
	,OUTFIT_VERSUS_CLASSIC_TACTICAL_3
	,OUTFIT_VERSUS_CLASSIC_TACTICAL_4
	,OUTFIT_VERSUS_CLASSIC_TACTICAL_5
	,OUTFIT_VERSUS_CLASSIC_DUNE_0
	,OUTFIT_VERSUS_CLASSIC_DUNE_1
	,OUTFIT_VERSUS_CLASSIC_DUNE_2
	,OUTFIT_VERSUS_CLASSIC_DUNE_3
	,OUTFIT_VERSUS_CLASSIC_DUNE_4
	,OUTFIT_VERSUS_CLASSIC_DUNE_5//160
	,OUTFIT_VERSUS_CLASSIC_SWAMP_0
	,OUTFIT_VERSUS_CLASSIC_SWAMP_1
	,OUTFIT_VERSUS_CLASSIC_SWAMP_2
	,OUTFIT_VERSUS_CLASSIC_SWAMP_3
	,OUTFIT_VERSUS_CLASSIC_SWAMP_4
	,OUTFIT_VERSUS_CLASSIC_SWAMP_5
	,OUTFIT_VERSUS_CLASSIC_FAMILIES_0
	,OUTFIT_VERSUS_CLASSIC_FAMILIES_1
	,OUTFIT_VERSUS_CLASSIC_FAMILIES_2
	,OUTFIT_VERSUS_CLASSIC_FAMILIES_3//170
	,OUTFIT_VERSUS_CLASSIC_FAMILIES_4
	,OUTFIT_VERSUS_CLASSIC_FAMILIES_5
	,OUTFIT_VERSUS_CLASSIC_BALLAS_0
	,OUTFIT_VERSUS_CLASSIC_BALLAS_1
	,OUTFIT_VERSUS_CLASSIC_BALLAS_2
	,OUTFIT_VERSUS_CLASSIC_BALLAS_3
	,OUTFIT_VERSUS_CLASSIC_BALLAS_4
	,OUTFIT_VERSUS_CLASSIC_BALLAS_5
	,OUTFIT_VERSUS_CLASSIC_HITMEN_0
	,OUTFIT_VERSUS_CLASSIC_HITMEN_1//180
	,OUTFIT_VERSUS_CLASSIC_HITMEN_2
	,OUTFIT_VERSUS_CLASSIC_HITMEN_3
	,OUTFIT_VERSUS_CLASSIC_HITMEN_4
	,OUTFIT_VERSUS_CLASSIC_HITMEN_5
	,OUTFIT_VERSUS_CLASSIC_ASSASSINS_0
	,OUTFIT_VERSUS_CLASSIC_ASSASSINS_1
	,OUTFIT_VERSUS_CLASSIC_ASSASSINS_2
	,OUTFIT_VERSUS_CLASSIC_ASSASSINS_3
	,OUTFIT_VERSUS_CLASSIC_ASSASSINS_4
	,OUTFIT_VERSUS_CLASSIC_ASSASSINS_5//190
	,OUTFIT_VERSUS_CLASSIC_COPS_0
	,OUTFIT_VERSUS_CLASSIC_COPS_1
	,OUTFIT_VERSUS_CLASSIC_COPS_2
	,OUTFIT_VERSUS_CLASSIC_COPS_3
	,OUTFIT_VERSUS_CLASSIC_COPS_4
	,OUTFIT_VERSUS_CLASSIC_COPS_5
	,OUTFIT_VERSUS_CLASSIC_CRIMINALS_0 
	,OUTFIT_VERSUS_CLASSIC_CRIMINALS_1
	,OUTFIT_VERSUS_CLASSIC_CRIMINALS_2
	,OUTFIT_VERSUS_CLASSIC_CRIMINALS_3//200
	,OUTFIT_VERSUS_CLASSIC_CRIMINALS_4
	,OUTFIT_VERSUS_CLASSIC_CRIMINALS_5
	,OUTFIT_VERSUS_CLASSIC_PROFESSIONALS_0
	,OUTFIT_VERSUS_CLASSIC_PROFESSIONALS_1
	,OUTFIT_VERSUS_CLASSIC_PROFESSIONALS_2
	,OUTFIT_VERSUS_CLASSIC_PROFESSIONALS_3
	,OUTFIT_VERSUS_CLASSIC_PROFESSIONALS_4
	,OUTFIT_VERSUS_CLASSIC_PROFESSIONALS_5
	,OUTFIT_VERSUS_CLASSIC_BIKERS_0
	,OUTFIT_VERSUS_CLASSIC_BIKERS_1//210
	,OUTFIT_VERSUS_CLASSIC_BIKERS_2
	,OUTFIT_VERSUS_CLASSIC_BIKERS_3
	,OUTFIT_VERSUS_CLASSIC_BIKERS_4
	,OUTFIT_VERSUS_CLASSIC_BIKERS_5
	,OUTFIT_VERSUS_CLASSIC_BLACK_TUX_0
	,OUTFIT_VERSUS_CLASSIC_WHITE_TUX_0
	//theme Vs
	,OUTFIT_VERSUS_THEMED_SLASHERS_0
	,OUTFIT_VERSUS_THEMED_SLASHERS_1
	,OUTFIT_VERSUS_THEMED_SLASHERS_2
	,OUTFIT_VERSUS_THEMED_SLASHERS_3//220
	,OUTFIT_VERSUS_THEMED_SLASHERS_4
	,OUTFIT_VERSUS_THEMED_SLASHERS_5
	,OUTFIT_VERSUS_THEMED_BUBBLEGUMS_0
	,OUTFIT_VERSUS_THEMED_BUBBLEGUMS_1
	,OUTFIT_VERSUS_THEMED_BUBBLEGUMS_2
	,OUTFIT_VERSUS_THEMED_BUBBLEGUMS_3
	,OUTFIT_VERSUS_THEMED_BUBBLEGUMS_4
	,OUTFIT_VERSUS_THEMED_BUBBLEGUMS_5
	,OUTFIT_VERSUS_CLASSIC_STINKERS_0
	,OUTFIT_VERSUS_CLASSIC_STINKERS_1//230
	,OUTFIT_VERSUS_CLASSIC_STINKERS_2
	,OUTFIT_VERSUS_CLASSIC_STINKERS_3
	,OUTFIT_VERSUS_CLASSIC_STINKERS_4
	,OUTFIT_VERSUS_CLASSIC_STINKERS_5
	,OUTFIT_VERSUS_CLASSIC_WIMPEES_0
	,OUTFIT_VERSUS_CLASSIC_DEVILS_0
	,OUTFIT_VERSUS_CLASSIC_DEVILS_1
	,OUTFIT_VERSUS_CLASSIC_DEVILS_2
	,OUTFIT_VERSUS_CLASSIC_DEVILS_3
	,OUTFIT_VERSUS_CLASSIC_DEVILS_4//240
	,OUTFIT_VERSUS_CLASSIC_DEVILS_5
	,OUTFIT_VERSUS_CLASSIC_ANGELS_0
	,OUTFIT_VERSUS_CLASSIC_ANGELS_1
	,OUTFIT_VERSUS_CLASSIC_ANGELS_2
	,OUTFIT_VERSUS_CLASSIC_ANGELS_3
	,OUTFIT_VERSUS_CLASSIC_ANGELS_4
	,OUTFIT_VERSUS_CLASSIC_ANGELS_5
	,OUTFIT_VERSUS_CLASSIC_MONKEYS_0
	,OUTFIT_VERSUS_CLASSIC_MONKEYS_1
	,OUTFIT_VERSUS_CLASSIC_MONKEYS_2//250
	,OUTFIT_VERSUS_CLASSIC_MONKEYS_3
	,OUTFIT_VERSUS_CLASSIC_MONKEYS_4
	,OUTFIT_VERSUS_CLASSIC_MONKEYS_5
	,OUTFIT_VERSUS_CLASSIC_SCIENTISTS_0
//	,OUTFIT_VERSUS_CLASSIC_SCIENTISTS_1	
//	,OUTFIT_VERSUS_CLASSIC_SCIENTISTS_2
	,OUTFIT_VERSUS_CLASSIC_SCIENTISTS_3
//	,OUTFIT_VERSUS_CLASSIC_SCIENTISTS_4
	,OUTFIT_VERSUS_CLASSIC_SCIENTISTS_5
	,OUTFIT_VERSUS_CLASSIC_CATS_0//260
	,OUTFIT_VERSUS_CLASSIC_CATS_1
	,OUTFIT_VERSUS_CLASSIC_CATS_2
	,OUTFIT_VERSUS_CLASSIC_CATS_3
	,OUTFIT_VERSUS_CLASSIC_CATS_4
	,OUTFIT_VERSUS_CLASSIC_CATS_5
	,OUTFIT_VERSUS_CLASSIC_BIRDS_0
	,OUTFIT_VERSUS_CLASSIC_BIRDS_1
	,OUTFIT_VERSUS_CLASSIC_BIRDS_2
	,OUTFIT_VERSUS_CLASSIC_BIRDS_3
	,OUTFIT_VERSUS_CLASSIC_BIRDS_4//270
	,OUTFIT_VERSUS_CLASSIC_BIRDS_5
	,OUTFIT_VERSUS_CLASSIC_BLUE_0
	,OUTFIT_VERSUS_CLASSIC_BLUE_1
	,OUTFIT_VERSUS_CLASSIC_BLUE_2
	,OUTFIT_VERSUS_CLASSIC_BLUE_3
	,OUTFIT_VERSUS_CLASSIC_BLUE_4
	,OUTFIT_VERSUS_CLASSIC_BLUE_5
	,OUTFIT_VERSUS_CLASSIC_ORANGE_0
	,OUTFIT_VERSUS_CLASSIC_ORANGE_1
	,OUTFIT_VERSUS_CLASSIC_ORANGE_2//280
	,OUTFIT_VERSUS_CLASSIC_ORANGE_3
	,OUTFIT_VERSUS_CLASSIC_ORANGE_4
	,OUTFIT_VERSUS_CLASSIC_ORANGE_5
	,OUTFIT_VERSUS_CLASSIC_WEREWOLVES_0
	,OUTFIT_VERSUS_CLASSIC_WEREWOLVES_1
	,OUTFIT_VERSUS_CLASSIC_WEREWOLVES_2
	,OUTFIT_VERSUS_CLASSIC_WEREWOLVES_3
	,OUTFIT_VERSUS_CLASSIC_WEREWOLVES_4
	,OUTFIT_VERSUS_CLASSIC_WEREWOLVES_5
	,OUTFIT_VERSUS_CLASSIC_MUMMIES_0//290
	,OUTFIT_VERSUS_CLASSIC_MUMMIES_1
	,OUTFIT_VERSUS_CLASSIC_MUMMIES_2
	,OUTFIT_VERSUS_CLASSIC_MUMMIES_3
	,OUTFIT_VERSUS_CLASSIC_MUMMIES_4
	,OUTFIT_VERSUS_CLASSIC_MUMMIES_5
	,OUTFIT_VERSUS_CLASSIC_RAVENS_0
	,OUTFIT_VERSUS_CLASSIC_RAVENS_1
	,OUTFIT_VERSUS_CLASSIC_RAVENS_2
	,OUTFIT_VERSUS_CLASSIC_RAVENS_3
	,OUTFIT_VERSUS_CLASSIC_RAVENS_4
	,OUTFIT_VERSUS_CLASSIC_RAVENS_5
	,OUTFIT_VERSUS_CLASSIC_GHOULS_0
	,OUTFIT_VERSUS_CLASSIC_GHOULS_1
	,OUTFIT_VERSUS_CLASSIC_GHOULS_2
	,OUTFIT_VERSUS_CLASSIC_GHOULS_3
	,OUTFIT_VERSUS_CLASSIC_GHOULS_4
	,OUTFIT_VERSUS_CLASSIC_GHOULS_5
	,OUTFIT_VERSUS_CLASSIC_ZOMBIES_0
	,OUTFIT_VERSUS_CLASSIC_ZOMBIES_1
	,OUTFIT_VERSUS_CLASSIC_ZOMBIES_2
	,OUTFIT_VERSUS_CLASSIC_ZOMBIES_3
	,OUTFIT_VERSUS_CLASSIC_ZOMBIES_4
	,OUTFIT_VERSUS_CLASSIC_ZOMBIES_5
	,OUTFIT_VERSUS_CLASSIC_COWBOYS_0
	,OUTFIT_VERSUS_CLASSIC_COWBOYS_1
	,OUTFIT_VERSUS_CLASSIC_COWBOYS_2
	,OUTFIT_VERSUS_CLASSIC_COWBOYS_3
	,OUTFIT_VERSUS_CLASSIC_COWBOYS_4
	,OUTFIT_VERSUS_CLASSIC_COWBOYS_5
	
	//NG char outfits
	,OUTFIT_NG_CASUAL_0
	,OUTFIT_NG_CASUAL_1
	,OUTFIT_NG_CASUAL_2
	,OUTFIT_NG_CASUAL_3
	,OUTFIT_NG_CASUAL_4
	,OUTFIT_NG_CASUAL_5
	,OUTFIT_NG_CASUAL_6
	,OUTFIT_NG_CASUAL_7
	,OUTFIT_NG_STREET_0
	,OUTFIT_NG_STREET_1
	,OUTFIT_NG_STREET_2
	,OUTFIT_NG_STREET_3
	,OUTFIT_NG_STREET_4
	,OUTFIT_NG_STREET_5
	,OUTFIT_NG_STREET_6
	,OUTFIT_NG_STREET_7
	,OUTFIT_NG_FLASHY_0
	,OUTFIT_NG_FLASHY_1
	,OUTFIT_NG_FLASHY_2
	,OUTFIT_NG_FLASHY_3
	,OUTFIT_NG_FLASHY_4
	,OUTFIT_NG_FLASHY_5
	,OUTFIT_NG_FLASHY_6
	,OUTFIT_NG_FLASHY_7
	,OUTFIT_NG_PARTY_0
	,OUTFIT_NG_PARTY_1
	,OUTFIT_NG_PARTY_2
	,OUTFIT_NG_PARTY_3
	,OUTFIT_NG_PARTY_4
	,OUTFIT_NG_PARTY_5
	,OUTFIT_NG_PARTY_6
	,OUTFIT_NG_PARTY_7
	,OUTFIT_NG_BEACH_0
	,OUTFIT_NG_BEACH_1
	,OUTFIT_NG_BEACH_2
	,OUTFIT_NG_BEACH_3
	,OUTFIT_NG_BEACH_4
	,OUTFIT_NG_BEACH_5
	,OUTFIT_NG_BEACH_6
	,OUTFIT_NG_BEACH_7
	,OUTFIT_NG_SMART_0
	,OUTFIT_NG_SMART_1
	,OUTFIT_NG_SMART_2
	,OUTFIT_NG_SMART_3
	,OUTFIT_NG_SMART_4
	,OUTFIT_NG_SMART_5
	,OUTFIT_NG_SMART_6
	,OUTFIT_NG_SMART_7
	,OUTFIT_NG_SPORTY_0
	,OUTFIT_NG_SPORTY_1
	,OUTFIT_NG_SPORTY_2
	,OUTFIT_NG_SPORTY_3
	,OUTFIT_NG_SPORTY_4
	,OUTFIT_NG_SPORTY_5
	,OUTFIT_NG_SPORTY_6
	,OUTFIT_NG_SPORTY_7
	,OUTFIT_NG_ECCENTRIC_0
	,OUTFIT_NG_ECCENTRIC_1
	,OUTFIT_NG_ECCENTRIC_2
	,OUTFIT_NG_ECCENTRIC_3
	,OUTFIT_NG_ECCENTRIC_4
	,OUTFIT_NG_ECCENTRIC_5
	,OUTFIT_NG_ECCENTRIC_6
	,OUTFIT_NG_ECCENTRIC_7
	
	// Lowrider VS outfits
	,OUTFIT_VERSUS_LOWR_BLUE_ZOOT_0
	,OUTFIT_VERSUS_LOWR_BLUE_ZOOT_1
	,OUTFIT_VERSUS_LOWR_BLUE_ZOOT_2
	,OUTFIT_VERSUS_LOWR_BLUE_ZOOT_3
	,OUTFIT_VERSUS_LOWR_BLUE_ZOOT_4
	,OUTFIT_VERSUS_LOWR_BLUE_ZOOT_5
	,OUTFIT_VERSUS_LOWR_RED_ZOOT_0
	,OUTFIT_VERSUS_LOWR_RED_ZOOT_1
	,OUTFIT_VERSUS_LOWR_RED_ZOOT_2
	,OUTFIT_VERSUS_LOWR_RED_ZOOT_3
	,OUTFIT_VERSUS_LOWR_RED_ZOOT_4
	,OUTFIT_VERSUS_LOWR_RED_ZOOT_5
	,OUTFIT_VERSUS_LOWR_FORMAL_0
	,OUTFIT_VERSUS_LOWR_FORMAL_1
	,OUTFIT_VERSUS_LOWR_FORMAL_2
	,OUTFIT_VERSUS_LOWR_FORMAL_3
	,OUTFIT_VERSUS_LOWR_FORMAL_4
	,OUTFIT_VERSUS_LOWR_FORMAL_5
	,OUTFIT_VERSUS_LOWR_STREET_0
	,OUTFIT_VERSUS_LOWR_STREET_1
	,OUTFIT_VERSUS_LOWR_STREET_2
	,OUTFIT_VERSUS_LOWR_STREET_3
	,OUTFIT_VERSUS_LOWR_STREET_4
	,OUTFIT_VERSUS_LOWR_STREET_5
	
	// Halloween Outfits
	,OUTFIT_VERSUS_HAL_MANIACS_0
	,OUTFIT_VERSUS_HAL_MANIACS_1
	,OUTFIT_VERSUS_HAL_MANIACS_2
	,OUTFIT_VERSUS_HAL_MANIACS_3
	,OUTFIT_VERSUS_HAL_MANIACS_4
	,OUTFIT_VERSUS_HAL_MANIACS_5
	,OUTFIT_VERSUS_HAL_HOWLERS_0
	,OUTFIT_VERSUS_HAL_HOWLERS_1
	,OUTFIT_VERSUS_HAL_HOWLERS_2
	,OUTFIT_VERSUS_HAL_HOWLERS_3
	,OUTFIT_VERSUS_HAL_HOWLERS_4
	,OUTFIT_VERSUS_HAL_HOWLERS_5
	,OUTFIT_VERSUS_HAL_RETILIANS_0
	,OUTFIT_VERSUS_HAL_RETILIANS_1
	,OUTFIT_VERSUS_HAL_RETILIANS_2
	,OUTFIT_VERSUS_HAL_RETILIANS_3
	,OUTFIT_VERSUS_HAL_RETILIANS_4
	,OUTFIT_VERSUS_HAL_RETILIANS_5
	,OUTFIT_VERSUS_HAL_SATANS_0
	,OUTFIT_VERSUS_HAL_SATANS_1
	,OUTFIT_VERSUS_HAL_SATANS_2
	,OUTFIT_VERSUS_HAL_SATANS_3
	,OUTFIT_VERSUS_HAL_SATANS_4
	,OUTFIT_VERSUS_HAL_SATANS_5
	,OUTFIT_VERSUS_HAL_DOUBLE_0
	,OUTFIT_VERSUS_HAL_DOUBLE_1
	,OUTFIT_VERSUS_HAL_DOUBLE_2
	,OUTFIT_VERSUS_HAL_DOUBLE_3
	,OUTFIT_VERSUS_HAL_DOUBLE_4
	,OUTFIT_VERSUS_HAL_DOUBLE_5
	,OUTFIT_VERSUS_HAL_TRICKSTERS_0
	,OUTFIT_VERSUS_HAL_TRICKSTERS_1
	,OUTFIT_VERSUS_HAL_TRICKSTERS_2
	,OUTFIT_VERSUS_HAL_TRICKSTERS_3
	,OUTFIT_VERSUS_HAL_TRICKSTERS_4
	,OUTFIT_VERSUS_HAL_TRICKSTERS_5
	,OUTFIT_VERSUS_HAL_SUBURBIA_0
	,OUTFIT_VERSUS_HAL_SUBURBIA_1
	,OUTFIT_VERSUS_HAL_SUBURBIA_2
	,OUTFIT_VERSUS_HAL_SUBURBIA_3
	,OUTFIT_VERSUS_HAL_SUBURBIA_4
	,OUTFIT_VERSUS_HAL_SUBURBIA_5
	,OUTFIT_VERSUS_HAL_MONSTER_MILITIA_0
	,OUTFIT_VERSUS_HAL_MONSTER_MILITIA_1
	,OUTFIT_VERSUS_HAL_MONSTER_MILITIA_2
	,OUTFIT_VERSUS_HAL_MONSTER_MILITIA_3
	,OUTFIT_VERSUS_HAL_MONSTER_MILITIA_4
	,OUTFIT_VERSUS_HAL_MONSTER_MILITIA_5
	,OUTFIT_VERSUS_HAL_PSYCHOS_0
	,OUTFIT_VERSUS_HAL_PSYCHOS_1
	,OUTFIT_VERSUS_HAL_PSYCHOS_2
	,OUTFIT_VERSUS_HAL_PSYCHOS_3
	,OUTFIT_VERSUS_HAL_PSYCHOS_4
	,OUTFIT_VERSUS_HAL_PSYCHOS_5
	,OUTFIT_VERSUS_HAL_UNDEAD_0
	,OUTFIT_VERSUS_HAL_UNDEAD_1
	,OUTFIT_VERSUS_HAL_UNDEAD_2
	,OUTFIT_VERSUS_HAL_UNDEAD_3
	,OUTFIT_VERSUS_HAL_UNDEAD_4
	,OUTFIT_VERSUS_HAL_UNDEAD_5
	,OUTFIT_VERSUS_HAL_DWELLERS_0
	,OUTFIT_VERSUS_HAL_DWELLERS_1
	,OUTFIT_VERSUS_HAL_DWELLERS_2
	,OUTFIT_VERSUS_HAL_DWELLERS_3
	,OUTFIT_VERSUS_HAL_DWELLERS_4
	,OUTFIT_VERSUS_HAL_DWELLERS_5
	,OUTFIT_VERSUS_HAL_PIMP_WITCHES_0
	,OUTFIT_VERSUS_HAL_PIMP_WITCHES_1
	,OUTFIT_VERSUS_HAL_PIMP_WITCHES_2
	,OUTFIT_VERSUS_HAL_PIMP_WITCHES_3
	,OUTFIT_VERSUS_HAL_PIMP_WITCHES_4
	,OUTFIT_VERSUS_HAL_PIMP_WITCHES_5
	
	// Entourage Outfits
	,OUTFIT_VERSUS_ENTOURAGE_VIP_0
	,OUTFIT_VERSUS_ENTOURAGE_DEFENDER_0
	,OUTFIT_VERSUS_ENTOURAGE_DEFENDER_1
	,OUTFIT_VERSUS_ENTOURAGE_DEFENDER_2
	,OUTFIT_VERSUS_ENTOURAGE_ATTACKER_0
	,OUTFIT_VERSUS_ENTOURAGE_ATTACKER_1
	,OUTFIT_VERSUS_ENTOURAGE_ATTACKER_2
	,OUTFIT_VERSUS_ENTOURAGE_ATTACKER_3
	
	// Lowrider Flow Outfits
	,OUTFIT_LOW_FLOW_LOWRIDER_0
	,OUTFIT_LOW_FLOW_LOWRIDER_1
	,OUTFIT_LOW_FLOW_LOWRIDER_2
	,OUTFIT_LOW_FLOW_LOWRIDER_3
	,OUTFIT_LOW_FLOW_LOWRIDER_4
	,OUTFIT_LOW_FLOW_LOWRIDER_5
	,OUTFIT_LOW_FLOW_LOWRIDER_6
	,OUTFIT_LOW_FLOW_LOWRIDER_7
	,OUTFIT_LOW_FLOW_VAGOS_0
	,OUTFIT_LOW_FLOW_VAGOS_1
	,OUTFIT_LOW_FLOW_VAGOS_2
	,OUTFIT_LOW_FLOW_VAGOS_3
	,OUTFIT_LOW_FLOW_BALLAS_0
	,OUTFIT_LOW_FLOW_BALLAS_1
	,OUTFIT_LOW_FLOW_BALLAS_2
	,OUTFIT_LOW_FLOW_BALLAS_3
	,OUTFIT_LOW_FLOW_FUNERAL_0
	,OUTFIT_LOW_FLOW_FUNERAL_1
	,OUTFIT_LOW_FLOW_FUNERAL_2
	,OUTFIT_LOW_FLOW_FUNERAL_3
	,OUTFIT_LOW_FLOW_WOLVES_0
	,OUTFIT_LOW_FLOW_EAGLES_0
	,OUTFIT_LOW_FLOW_BULLS_0
	,OUTFIT_LOW_FLOW_BEARS_0
	,OUTFIT_LOW_FLOW_NORTH_0
	,OUTFIT_LOW_FLOW_SOUTH_0
	,OUTFIT_LOW_FLOW_STARS_0
	,OUTFIT_LOW_FLOW_STRIPES_0
	
	,OUTFIT_VERSUS_LOWR_BLUE_SMART_0
	,OUTFIT_VERSUS_LOWR_BLUE_SMART_1
	,OUTFIT_VERSUS_LOWR_BLUE_SMART_2
	,OUTFIT_VERSUS_LOWR_BLUE_SMART_3
	,OUTFIT_VERSUS_LOWR_BLUE_SMART_4
	,OUTFIT_VERSUS_LOWR_BLUE_SMART_5
	,OUTFIT_VERSUS_LOWR_RED_SMART_0
	,OUTFIT_VERSUS_LOWR_RED_SMART_1
	,OUTFIT_VERSUS_LOWR_RED_SMART_2
	,OUTFIT_VERSUS_LOWR_RED_SMART_3
	,OUTFIT_VERSUS_LOWR_RED_SMART_4
	,OUTFIT_VERSUS_LOWR_RED_SMART_5
	,OUTFIT_VERSUS_LOWR_WHITE_SMART_0
	,OUTFIT_VERSUS_LOWR_WHITE_SMART_1
	,OUTFIT_VERSUS_LOWR_WHITE_SMART_2
	,OUTFIT_VERSUS_LOWR_WHITE_SMART_3
	,OUTFIT_VERSUS_LOWR_WHITE_SMART_4
	,OUTFIT_VERSUS_LOWR_WHITE_SMART_5
	,OUTFIT_VERSUS_LOWR_BLACK_SMART_0
	,OUTFIT_VERSUS_LOWR_BLACK_SMART_1
	,OUTFIT_VERSUS_LOWR_BLACK_SMART_2
	,OUTFIT_VERSUS_LOWR_BLACK_SMART_3
	,OUTFIT_VERSUS_LOWR_BLACK_SMART_4
	,OUTFIT_VERSUS_LOWR_BLACK_SMART_5
	,OUTFIT_VERSUS_LOWR_YELLOW_SPORT_0
	,OUTFIT_VERSUS_LOWR_YELLOW_SPORT_1
	,OUTFIT_VERSUS_LOWR_YELLOW_SPORT_2
	,OUTFIT_VERSUS_LOWR_YELLOW_SPORT_3
	,OUTFIT_VERSUS_LOWR_YELLOW_SPORT_4
	,OUTFIT_VERSUS_LOWR_YELLOW_SPORT_5
	,OUTFIT_VERSUS_LOWR_GREEN_SPORT_0
	,OUTFIT_VERSUS_LOWR_GREEN_SPORT_1
	,OUTFIT_VERSUS_LOWR_GREEN_SPORT_2
	,OUTFIT_VERSUS_LOWR_GREEN_SPORT_3
	,OUTFIT_VERSUS_LOWR_GREEN_SPORT_4
	,OUTFIT_VERSUS_LOWR_GREEN_SPORT_5
	,OUTFIT_VERSUS_LOWR_WHITE_STREET_0
	,OUTFIT_VERSUS_LOWR_WHITE_STREET_1
	,OUTFIT_VERSUS_LOWR_WHITE_STREET_2
	,OUTFIT_VERSUS_LOWR_WHITE_STREET_3
	,OUTFIT_VERSUS_LOWR_WHITE_STREET_4
	,OUTFIT_VERSUS_LOWR_WHITE_STREET_5
	,OUTFIT_VERSUS_LOWR_RED_STREET_0
	,OUTFIT_VERSUS_LOWR_RED_STREET_1
	,OUTFIT_VERSUS_LOWR_RED_STREET_2
	,OUTFIT_VERSUS_LOWR_RED_STREET_3
	,OUTFIT_VERSUS_LOWR_RED_STREET_4
	,OUTFIT_VERSUS_LOWR_RED_STREET_5
	,OUTFIT_SOLO_SENIORS_0
	,OUTFIT_SOLO_GENTS_0
	,OUTFIT_SOLO_FRANKS_0
	,OUTFIT_SOLO_VAMPS_0
	,OUTFIT_SOLO_KITTENS_0
	,OUTFIT_SOLO_FOXES_0
	,OUTFIT_SOLO_RACCOONS_0
	,OUTFIT_SOLO_OWLS_0
	,OUTFIT_SOLO_BUGS_0
	,OUTFIT_SOLO_PIGS_0
	,OUTFIT_SOLO_FROST_0
	,OUTFIT_SOLO_POLAR_0
	,OUTFIT_SOLO_REPTILIANS_0
	,OUTFIT_SOLO_SATANS_0
	,OUTFIT_SOLO_SUBURBIA_0
	,OUTFIT_SOLO_MONSTER_MILITIA_0
	
	// Adversary Override Outfits
	,OUTFIT_ADVERSARY_B_OVERRIDE_0
	,OUTFIT_ADVERSARY_B_OVERRIDE_1
	,OUTFIT_ADVERSARY_B_OVERRIDE_2
	,OUTFIT_ADVERSARY_B_OVERRIDE_3
	,OUTFIT_ADVERSARY_B_OVERRIDE_4
	,OUTFIT_ADVERSARY_B_OVERRIDE_5
	,OUTFIT_ADVERSARY_B_OVERRIDE_6
	,OUTFIT_ADVERSARY_B_OVERRIDE_7
	,OUTFIT_ADVERSARY_B_OVERRIDE_8
	,OUTFIT_ADVERSARY_B_OVERRIDE_9
	,OUTFIT_ADVERSARY_B_OVERRIDE_10
	,OUTFIT_ADVERSARY_B_OVERRIDE_11
	,OUTFIT_VERSUS_CLASSIC_METAL_0
	,OUTFIT_VERSUS_CLASSIC_METAL_1
	,OUTFIT_VERSUS_CLASSIC_METAL_2
	,OUTFIT_VERSUS_CLASSIC_METAL_3
	,OUTFIT_VERSUS_CLASSIC_METAL_4
	,OUTFIT_VERSUS_CLASSIC_METAL_5
	,OUTFIT_VERSUS_EXTRACTION_VIP_0
	
	,OUTFIT_MAGNATE_BOSS_BARON_0
	,OUTFIT_MAGNATE_BOSS_JEFE_0
	,OUTFIT_MAGNATE_BOSS_MOGUL_0
	,OUTFIT_MAGNATE_BOSS_ENTREPRENEUR_0
	,OUTFIT_MAGNATE_BOSS_ARMS_DEALER_0
	,OUTFIT_MAGNATE_BOSS_INVESTOR_0
	,OUTFIT_MAGNATE_BOSS_MOB_0
	,OUTFIT_MAGNATE_BOSS_KINGPIN_0
	,OUTFIT_MAGNATE_BOSS_OLIGARCH_0
	,OUTFIT_MAGNATE_BOSS_OIL_MAGNATE_0
	,OUTFIT_MAGNATE_BOSS_SHIPPING_0
	,OUTFIT_MAGNATE_BOSS_SYNDICATE_0
	,OUTFIT_EXEC_CEO_FOUNDER_0
	,OUTFIT_EXEC_CEO_PIONEER_0
	,OUTFIT_EXEC_CEO_CHIEF_0
	,OUTFIT_EXEC_CEO_DIRECTOR_0
	,OUTFIT_EXEC_CEO_PRESIDENT_0
	,OUTFIT_EXEC_CEO_CREATOR_0
	,OUTFIT_EXEC_CEO_BROKER_0
	,OUTFIT_EXEC_CEO_FATCAT_0
	,OUTFIT_EXEC_CEO_PLAYBOY_0
	,OUTFIT_EXEC_CEO_HEDONIST_0
	,OUTFIT_EXEC_CEO_GENERAL_0
	,OUTFIT_EXEC_CEO_WARLORD_0
	,OUTFIT_BIKER_PRESIDENT_0
	,OUTFIT_BIKER_PRESIDENT_1
	
	,OUTFIT_MAGNATE_GOON_NARCO_0
	,OUTFIT_MAGNATE_GOON_NARCO_1
	,OUTFIT_MAGNATE_GOON_NARCO_2
	,OUTFIT_MAGNATE_GOON_NARCO_3
	,OUTFIT_MAGNATE_GOON_TRAFFICKERS_0
	,OUTFIT_MAGNATE_GOON_TRAFFICKERS_1
	,OUTFIT_MAGNATE_GOON_TRAFFICKERS_2
	,OUTFIT_MAGNATE_GOON_TRAFFICKERS_3
	,OUTFIT_MAGNATE_GOON_ENTOURAGE_0
	,OUTFIT_MAGNATE_GOON_ENTOURAGE_1
	,OUTFIT_MAGNATE_GOON_ENTOURAGE_2
	,OUTFIT_MAGNATE_GOON_ENTOURAGE_3
	,OUTFIT_MAGNATE_GOON_WINGMEN_0
	,OUTFIT_MAGNATE_GOON_WINGMEN_1
	,OUTFIT_MAGNATE_GOON_WINGMEN_2
	,OUTFIT_MAGNATE_GOON_WINGMEN_3
	,OUTFIT_MAGNATE_GOON_DEFENSE_0
	,OUTFIT_MAGNATE_GOON_DEFENSE_1
	,OUTFIT_MAGNATE_GOON_DEFENSE_2
	,OUTFIT_MAGNATE_GOON_DEFENSE_3
	,OUTFIT_MAGNATE_GOON_MILITIA_0
	,OUTFIT_MAGNATE_GOON_MILITIA_1
	,OUTFIT_MAGNATE_GOON_MILITIA_2
	,OUTFIT_MAGNATE_GOON_MILITIA_3
	,OUTFIT_MAGNATE_GOON_REGIME_0
	,OUTFIT_MAGNATE_GOON_REGIME_1
	,OUTFIT_MAGNATE_GOON_REGIME_2
	,OUTFIT_MAGNATE_GOON_REGIME_3
	,OUTFIT_MAGNATE_GOON_WISEGUYS_0
	,OUTFIT_MAGNATE_GOON_WISEGUYS_1
	,OUTFIT_MAGNATE_GOON_WISEGUYS_2
	,OUTFIT_MAGNATE_GOON_WISEGUYS_3
	,OUTFIT_MAGNATE_GOON_PROTECTION_0
	,OUTFIT_MAGNATE_GOON_PROTECTION_1
	,OUTFIT_MAGNATE_GOON_PROTECTION_2
	,OUTFIT_MAGNATE_GOON_PROTECTION_3
	,OUTFIT_MAGNATE_GOON_HEAVIES_0
	,OUTFIT_MAGNATE_GOON_HEAVIES_1
	,OUTFIT_MAGNATE_GOON_HEAVIES_2
	,OUTFIT_MAGNATE_GOON_HEAVIES_3
	,OUTFIT_MAGNATE_GOON_PEDDLERS_0
	,OUTFIT_MAGNATE_GOON_PEDDLERS_1
	,OUTFIT_MAGNATE_GOON_PEDDLERS_2
	,OUTFIT_MAGNATE_GOON_PEDDLERS_3
	,OUTFIT_MAGNATE_GOON_HITMEN_0
	,OUTFIT_MAGNATE_GOON_HITMEN_1
	,OUTFIT_MAGNATE_GOON_HITMEN_2
	,OUTFIT_MAGNATE_GOON_HITMEN_3
	,OUTFIT_EXEC_ASSOCIATE_OPERATORS_0
	,OUTFIT_EXEC_ASSOCIATE_OPERATORS_1
	,OUTFIT_EXEC_ASSOCIATE_OPERATORS_2
	,OUTFIT_EXEC_ASSOCIATE_ANALYSTS_0
	,OUTFIT_EXEC_ASSOCIATE_ANALYSTS_1
	,OUTFIT_EXEC_ASSOCIATE_ANALYSTS_2
	,OUTFIT_EXEC_ASSOCIATE_MANAGERS_0
	,OUTFIT_EXEC_ASSOCIATE_MANAGERS_1
	,OUTFIT_EXEC_ASSOCIATE_MANAGERS_2
	,OUTFIT_EXEC_ASSOCIATE_RACKETEERS_0
	,OUTFIT_EXEC_ASSOCIATE_RACKETEERS_1
	,OUTFIT_EXEC_ASSOCIATE_RACKETEERS_2
	,OUTFIT_EXEC_ASSOCIATE_PROMOTERS_0
	,OUTFIT_EXEC_ASSOCIATE_PROMOTERS_1
	,OUTFIT_EXEC_ASSOCIATE_PROMOTERS_2
	,OUTFIT_EXEC_ASSOCIATE_AGENTS_0
	,OUTFIT_EXEC_ASSOCIATE_AGENTS_1
	,OUTFIT_EXEC_ASSOCIATE_AGENTS_2
	,OUTFIT_EXEC_ASSOCIATE_TRADERS_0
	,OUTFIT_EXEC_ASSOCIATE_TRADERS_1
	,OUTFIT_EXEC_ASSOCIATE_TRADERS_2
	,OUTFIT_EXEC_ASSOCIATE_MERCHANTS_0
	,OUTFIT_EXEC_ASSOCIATE_MERCHANTS_1
	,OUTFIT_EXEC_ASSOCIATE_MERCHANTS_2
	,OUTFIT_EXEC_ASSOCIATE_BRAZEN_0
	,OUTFIT_EXEC_ASSOCIATE_BRAZEN_1
	,OUTFIT_EXEC_ASSOCIATE_BRAZEN_2
	,OUTFIT_EXEC_ASSOCIATE_COMPANIONS_0
	,OUTFIT_EXEC_ASSOCIATE_COMPANIONS_1
	,OUTFIT_EXEC_ASSOCIATE_COMPANIONS_2
	,OUTFIT_EXEC_ASSOCIATE_COMRADES_0
	,OUTFIT_EXEC_ASSOCIATE_COMRADES_1
	,OUTFIT_EXEC_ASSOCIATE_COMRADES_2
	,OUTFIT_EXEC_ASSOCIATE_RUNNERS_0
	,OUTFIT_EXEC_ASSOCIATE_RUNNERS_1
	,OUTFIT_EXEC_ASSOCIATE_RUNNERS_2
	,OUTFIT_MAGNATE_GOON_SECUROSERV_0
	,OUTFIT_MAGNATE_GOON_SECUROSERV_1
	,OUTFIT_MAGNATE_GOON_SECUROSERV_2
	,OUTFIT_MAGNATE_GOON_SECUROSERV_3
	,OUTFIT_BIKER_PROSPECT_0
	,OUTFIT_BIKER_PROSPECT_1
	,OUTFIT_BIKER_DIRT_0
	,OUTFIT_BIKER_DIRT_1
	,OUTFIT_BIKER_DIRT_2
	,OUTFIT_BIKER_DIRT_3
	,OUTFIT_BIKER_HOOD_0
	,OUTFIT_BIKER_HOOD_1
	,OUTFIT_BIKER_HOOD_2
	,OUTFIT_BIKER_HOOD_3
	,OUTFIT_BIKER_CAMO_0
	,OUTFIT_BIKER_CAMO_1
	,OUTFIT_BIKER_CAMO_2
	,OUTFIT_BIKER_CAMO_3
	,OUTFIT_BIKER_TOUGH_0
	,OUTFIT_BIKER_TOUGH_1
	,OUTFIT_BIKER_TOUGH_2
	,OUTFIT_BIKER_TOUGH_3
	,OUTFIT_BIKER_COOL_0
	,OUTFIT_BIKER_COOL_1
	,OUTFIT_BIKER_COOL_2
	,OUTFIT_BIKER_COOL_3
	,OUTFIT_BIKER_PUNK_0
	,OUTFIT_BIKER_PUNK_1
	,OUTFIT_BIKER_PUNK_2
	,OUTFIT_BIKER_PUNK_3
	,OUTFIT_BIKER_RAZOR_0
	,OUTFIT_BIKER_RAZOR_1
	,OUTFIT_BIKER_RAZOR_2
	,OUTFIT_BIKER_RAZOR_3

	
	,OUTFIT_VERSUS_HIDDEN_TEAM_VINTAGE_GREEN_0
	,OUTFIT_VERSUS_HIDDEN_TEAM_VINTAGE_GREEN_1
	,OUTFIT_VERSUS_HIDDEN_TEAM_VINTAGE_ORANGE_0
	,OUTFIT_VERSUS_HIDDEN_TEAM_VINTAGE_ORANGE_1
	,OUTFIT_VERSUS_HIDDEN_TEAM_VINTAGE_PURPLE_0
	,OUTFIT_VERSUS_HIDDEN_TEAM_VINTAGE_PURPLE_1
	,OUTFIT_VERSUS_HIDDEN_TEAM_VINTAGE_PINK_0
	,OUTFIT_VERSUS_HIDDEN_TEAM_VINTAGE_PINK_1
	,OUTFIT_VERSUS_HIDDEN_TEAM_HEAVY_GREEN_0
	,OUTFIT_VERSUS_HIDDEN_TEAM_HEAVY_GREEN_1
	,OUTFIT_VERSUS_HIDDEN_TEAM_HEAVY_ORANGE_0
	,OUTFIT_VERSUS_HIDDEN_TEAM_HEAVY_ORANGE_1
	,OUTFIT_VERSUS_HIDDEN_TEAM_HEAVY_PURPLE_0
	,OUTFIT_VERSUS_HIDDEN_TEAM_HEAVY_PURPLE_1
	,OUTFIT_VERSUS_HIDDEN_TEAM_HEAVY_PINK_0
	,OUTFIT_VERSUS_HIDDEN_TEAM_HEAVY_PINK_1
	,OUTFIT_VERSUS_HIDDEN_TEAM_VEHICLE_GREEN_0
	,OUTFIT_VERSUS_HIDDEN_TEAM_VEHICLE_GREEN_1
	,OUTFIT_VERSUS_HIDDEN_TEAM_VEHICLE_GREEN_2
	,OUTFIT_VERSUS_HIDDEN_TEAM_VEHICLE_GREEN_3
	,OUTFIT_VERSUS_HIDDEN_TEAM_VEHICLE_ORANGE_0
	,OUTFIT_VERSUS_HIDDEN_TEAM_VEHICLE_ORANGE_1
	,OUTFIT_VERSUS_HIDDEN_TEAM_VEHICLE_ORANGE_2
	,OUTFIT_VERSUS_HIDDEN_TEAM_VEHICLE_ORANGE_3
	,OUTFIT_VERSUS_HIDDEN_TEAM_VEHICLE_PURPLE_0
	,OUTFIT_VERSUS_HIDDEN_TEAM_VEHICLE_PURPLE_1
	,OUTFIT_VERSUS_HIDDEN_TEAM_VEHICLE_PURPLE_2
	,OUTFIT_VERSUS_HIDDEN_TEAM_VEHICLE_PURPLE_3
	,OUTFIT_VERSUS_HIDDEN_TEAM_VEHICLE_PINK_0
	,OUTFIT_VERSUS_HIDDEN_TEAM_VEHICLE_PINK_1
	,OUTFIT_VERSUS_HIDDEN_TEAM_VEHICLE_PINK_2
	,OUTFIT_VERSUS_HIDDEN_TEAM_VEHICLE_PINK_3
	,OUTFIT_VERSUS_HIDDEN_TEAM_BIKER_GREEN_0
	,OUTFIT_VERSUS_HIDDEN_TEAM_BIKER_ORANGE_0
	,OUTFIT_VERSUS_HIDDEN_TEAM_BIKER_PURPLE_0
	,OUTFIT_VERSUS_HIDDEN_TEAM_BIKER_PINK_0
	
	,OUTFIT_VERSUS_HIDDEN_TEAM_DROP_GREEN_0
	,OUTFIT_VERSUS_HIDDEN_TEAM_DROP_ORANGE_0
	,OUTFIT_VERSUS_HIDDEN_TEAM_DROP_PURPLE_0
	,OUTFIT_VERSUS_HIDDEN_TEAM_DROP_PINK_0
	
	,OUTFIT_VERSUS_HIDDEN_TEAM_LOWRIDER_GREEN_0
	,OUTFIT_VERSUS_HIDDEN_TEAM_LOWRIDER_GREEN_1
	,OUTFIT_VERSUS_HIDDEN_TEAM_LOWRIDER_GREEN_2
	,OUTFIT_VERSUS_HIDDEN_TEAM_LOWRIDER_GREEN_3
	,OUTFIT_VERSUS_HIDDEN_TEAM_LOWRIDER_ORANGE_0
	,OUTFIT_VERSUS_HIDDEN_TEAM_LOWRIDER_ORANGE_1
	,OUTFIT_VERSUS_HIDDEN_TEAM_LOWRIDER_ORANGE_2
	,OUTFIT_VERSUS_HIDDEN_TEAM_LOWRIDER_ORANGE_3
	,OUTFIT_VERSUS_HIDDEN_TEAM_LOWRIDER_PURPLE_0
	,OUTFIT_VERSUS_HIDDEN_TEAM_LOWRIDER_PURPLE_1
	,OUTFIT_VERSUS_HIDDEN_TEAM_LOWRIDER_PURPLE_2
	,OUTFIT_VERSUS_HIDDEN_TEAM_LOWRIDER_PURPLE_3
	,OUTFIT_VERSUS_HIDDEN_TEAM_LOWRIDER_PINK_0
	,OUTFIT_VERSUS_HIDDEN_TEAM_LOWRIDER_PINK_1
	,OUTFIT_VERSUS_HIDDEN_TEAM_LOWRIDER_PINK_2
	,OUTFIT_VERSUS_HIDDEN_TEAM_LOWRIDER_PINK_3
	
	,OUTFIT_VERSUS_LOWR2_BROWN_SPORT_0
	,OUTFIT_VERSUS_LOWR2_BROWN_SPORT_1
	,OUTFIT_VERSUS_LOWR2_BROWN_SPORT_2
	,OUTFIT_VERSUS_LOWR2_BROWN_SPORT_3
	,OUTFIT_VERSUS_LOWR2_BROWN_SPORT_4
	,OUTFIT_VERSUS_LOWR2_BROWN_SPORT_5
	,OUTFIT_VERSUS_LOWR2_WHITE_SPORT_0
	,OUTFIT_VERSUS_LOWR2_WHITE_SPORT_1
	,OUTFIT_VERSUS_LOWR2_WHITE_SPORT_2
	,OUTFIT_VERSUS_LOWR2_WHITE_SPORT_3
	,OUTFIT_VERSUS_LOWR2_WHITE_SPORT_4
	,OUTFIT_VERSUS_LOWR2_WHITE_SPORT_5
	
	,OUTFIT_VERSUS_EXEC1_TRADING_WINNER_0
	,OUTFIT_VERSUS_EXEC1_TRADING_WINNER_1
	,OUTFIT_VERSUS_EXEC1_TRADING_WINNER_2
	,OUTFIT_VERSUS_EXEC1_TRADING_WINNER_3
	,OUTFIT_VERSUS_EXEC1_TRADING_WINNER_4
	,OUTFIT_VERSUS_EXEC1_TRADING_WINNER_5
	,OUTFIT_VERSUS_EXEC1_TRADING_LOSER_0
	,OUTFIT_VERSUS_EXEC1_TRADING_LOSER_1
	,OUTFIT_VERSUS_EXEC1_TRADING_LOSER_2
	,OUTFIT_VERSUS_EXEC1_TRADING_LOSER_3
	,OUTFIT_VERSUS_EXEC1_TRADING_LOSER_4
	,OUTFIT_VERSUS_EXEC1_TRADING_LOSER_5
	
	,OUTFIT_VERSUS_HIDDEN_TEAM_SPORT_PURPLE_0
	,OUTFIT_VERSUS_HIDDEN_TEAM_SPORT_ORANGE_0
	,OUTFIT_VERSUS_HIDDEN_TEAM_SPORT_PINK_0
	,OUTFIT_VERSUS_HIDDEN_TEAM_SPORT_GREEN_0
	
	,OUTFIT_VERSUS_THEMED_EXEC_PURPLE_BUGS_0
	,OUTFIT_VERSUS_THEMED_EXEC_PURPLE_BUGS_1
	,OUTFIT_VERSUS_THEMED_EXEC_PURPLE_BUGS_2
	,OUTFIT_VERSUS_THEMED_EXEC_PURPLE_BUGS_3
	,OUTFIT_VERSUS_THEMED_EXEC_PURPLE_BUGS_4
	,OUTFIT_VERSUS_THEMED_EXEC_PURPLE_BUGS_5
	,OUTFIT_VERSUS_THEMED_EXEC_ORANGE_BUGS_0
	,OUTFIT_VERSUS_THEMED_EXEC_ORANGE_BUGS_1
	,OUTFIT_VERSUS_THEMED_EXEC_ORANGE_BUGS_2
	,OUTFIT_VERSUS_THEMED_EXEC_ORANGE_BUGS_3
	,OUTFIT_VERSUS_THEMED_EXEC_ORANGE_BUGS_4
	,OUTFIT_VERSUS_THEMED_EXEC_ORANGE_BUGS_5
	,OUTFIT_VERSUS_THEMED_EXEC_MONO_0
	,OUTFIT_VERSUS_THEMED_EXEC_MONO_1
	,OUTFIT_VERSUS_THEMED_EXEC_MONO_2
	,OUTFIT_VERSUS_THEMED_EXEC_MONO_3
	,OUTFIT_VERSUS_THEMED_EXEC_MONO_4
	,OUTFIT_VERSUS_THEMED_EXEC_MONO_5
	,OUTFIT_VERSUS_THEMED_EXEC_RAINBOW_0
	,OUTFIT_VERSUS_THEMED_EXEC_RAINBOW_1
	,OUTFIT_VERSUS_THEMED_EXEC_RAINBOW_2
	,OUTFIT_VERSUS_THEMED_EXEC_RAINBOW_3
	,OUTFIT_VERSUS_THEMED_EXEC_RAINBOW_4
	,OUTFIT_VERSUS_THEMED_EXEC_RAINBOW_5
	,OUTFIT_VERSUS_THEMED_EXEC_ANIMALS_0
	,OUTFIT_VERSUS_THEMED_EXEC_ANIMALS_1
	,OUTFIT_VERSUS_THEMED_EXEC_ANIMALS_2
	,OUTFIT_VERSUS_THEMED_EXEC_ANIMALS_3
	,OUTFIT_VERSUS_THEMED_EXEC_ANIMALS_4
	,OUTFIT_VERSUS_THEMED_EXEC_ANIMALS_5
	,OUTFIT_VERSUS_THEMED_EXEC_COOKIES_0
	,OUTFIT_VERSUS_THEMED_EXEC_COOKIES_1
	,OUTFIT_VERSUS_THEMED_EXEC_COOKIES_2
	,OUTFIT_VERSUS_THEMED_EXEC_COOKIES_3
	,OUTFIT_VERSUS_THEMED_EXEC_COOKIES_4
	,OUTFIT_VERSUS_THEMED_EXEC_COOKIES_5
	,OUTFIT_STUNT_RACE_BIKER_0
	,OUTFIT_STUNT_RACE_STUNT_0
	,OUTFIT_STUNT_RACE_RACER_0
	,OUTFIT_STUNT_RACE_MOTO_0
	,OUTFIT_STUNT_RACE_BIKER_1
	,OUTFIT_STUNT_RACE_STUNT_1
	,OUTFIT_STUNT_RACE_RACER_1
	,OUTFIT_STUNT_RACE_MOTO_1	
	
	,OUTFIT_BIKER_DIRT_4
	,OUTFIT_BIKER_DIRT_5
	,OUTFIT_BIKER_DIRT_6
	,OUTFIT_BIKER_DIRT_7
	,OUTFIT_BIKER_HOOD_4
	,OUTFIT_BIKER_HOOD_5
	,OUTFIT_BIKER_HOOD_6
	,OUTFIT_BIKER_HOOD_7
	,OUTFIT_BIKER_CAMO_4
	,OUTFIT_BIKER_CAMO_5
	,OUTFIT_BIKER_CAMO_6
	,OUTFIT_BIKER_CAMO_7
	,OUTFIT_BIKER_TOUGH_4
	,OUTFIT_BIKER_TOUGH_5
	,OUTFIT_BIKER_TOUGH_6
	,OUTFIT_BIKER_TOUGH_7
	,OUTFIT_BIKER_COOL_4
	,OUTFIT_BIKER_COOL_5
	,OUTFIT_BIKER_COOL_6
	,OUTFIT_BIKER_COOL_7
	,OUTFIT_BIKER_PUNK_4
	,OUTFIT_BIKER_PUNK_5
	,OUTFIT_BIKER_PUNK_6
	,OUTFIT_BIKER_PUNK_7
	,OUTFIT_BIKER_RAZOR_4
	,OUTFIT_BIKER_RAZOR_5
	,OUTFIT_BIKER_RAZOR_6
	,OUTFIT_BIKER_RAZOR_7

	,OUTFIT_HIDDEN_DEADLINE_PURPLE_0
	,OUTFIT_HIDDEN_DEADLINE_ORANGE_0
	,OUTFIT_HIDDEN_DEADLINE_PINK_0
	,OUTFIT_HIDDEN_DEADLINE_GREEN_0
	
	,OUTFIT_HIDDEN_TEAM_STUNT_BIKER_PURPLE_0
	,OUTFIT_HIDDEN_TEAM_STUNT_BIKER_ORANGE_0
	,OUTFIT_HIDDEN_TEAM_STUNT_BIKER_PINK_0
	,OUTFIT_HIDDEN_TEAM_STUNT_BIKER_GREEN_0
	
	,OUTFIT_HIDDEN_LOST_DEVILS_0
	,OUTFIT_HIDDEN_LOST_DEVILS_1
	,OUTFIT_HIDDEN_LOST_DEVILS_2
	,OUTFIT_HIDDEN_LOST_DEVILS_3
	,OUTFIT_HIDDEN_LOST_DEVILS_4
	,OUTFIT_HIDDEN_LOST_DEVILS_5
	,OUTFIT_HIDDEN_LOST_ANGELS_0
	,OUTFIT_HIDDEN_LOST_ANGELS_1
	,OUTFIT_HIDDEN_LOST_ANGELS_2
	,OUTFIT_HIDDEN_LOST_ANGELS_3
	,OUTFIT_HIDDEN_LOST_ANGELS_4
	,OUTFIT_HIDDEN_LOST_ANGELS_5
	
	,OUTFIT_BIKER_RANK_0
	,OUTFIT_BIKER_RANK_1
	,OUTFIT_BIKER_RANK_2
	,OUTFIT_BIKER_RANK_3
	,OUTFIT_BIKER_RANK_4
	,OUTFIT_BIKER_RANK_5
	,OUTFIT_BIKER_RANK_6
	,OUTFIT_BIKER_RANK_7
	
	,OUTFIT_BIKER_MOD_0
	,OUTFIT_BIKER_MOD_1
	,OUTFIT_BIKER_MOD_2
	,OUTFIT_BIKER_MOD_3
	,OUTFIT_BIKER_MOD_4
	,OUTFIT_BIKER_MOD_5
	,OUTFIT_BIKER_MOD_6
	,OUTFIT_BIKER_MOD_7
	,OUTFIT_BIKER_ROCK_0
	,OUTFIT_BIKER_ROCK_1
	,OUTFIT_BIKER_ROCK_2
	,OUTFIT_BIKER_ROCK_3
	,OUTFIT_BIKER_ROCK_4
	,OUTFIT_BIKER_ROCK_5
	,OUTFIT_BIKER_ROCK_6
	,OUTFIT_BIKER_ROCK_7
	
	,OUTFIT_BIKER_BRIT_0
	,OUTFIT_BIKER_BRIT_1
	,OUTFIT_BIKER_BRIT_2
	,OUTFIT_BIKER_BRIT_3
	,OUTFIT_BIKER_BRIT_4
	,OUTFIT_BIKER_BRIT_5
	,OUTFIT_BIKER_BRIT_6
	,OUTFIT_BIKER_BRIT_7
	
	,OUTFIT_VERSUS_HIDDEN_TEAM_BIKER_BLUE_0
	
	,OUTFIT_IE_CEO_LONGLINE_0
	,OUTFIT_IE_CEO_BANDANA_0
	,OUTFIT_IE_CEO_DRIVER_0
	,OUTFIT_IE_CEO_SQUAD_0
	,OUTFIT_IE_CEO_TOPDOG_0
	,OUTFIT_IE_CEO_ALPHA_0
	,OUTFIT_IE_CEO_PUFFER_0
	,OUTFIT_IE_CEO_CAMO_0
	,OUTFIT_IE_CEO_SWEATER_0
	,OUTFIT_IE_CEO_PARKA_0
	,OUTFIT_IE_CEO_CLOWN_0
	,OUTFIT_IE_CEO_DEMON_0
	
	,OUTFIT_IE_LONGLINE_0
	,OUTFIT_IE_LONGLINE_1
	,OUTFIT_IE_LONGLINE_2
	,OUTFIT_IE_BANDANA_0
	,OUTFIT_IE_BANDANA_1
	,OUTFIT_IE_BANDANA_2

	,OUTFIT_IE_DRIVER_0
	,OUTFIT_IE_DRIVER_1
	,OUTFIT_IE_DRIVER_2
	,OUTFIT_IE_SQUAD_0
	,OUTFIT_IE_SQUAD_1
	,OUTFIT_IE_SQUAD_2

	,OUTFIT_IE_TOPDOG_0
	,OUTFIT_IE_TOPDOG_1
	,OUTFIT_IE_TOPDOG_2
	,OUTFIT_IE_ALPHA_0
	,OUTFIT_IE_ALPHA_1
	,OUTFIT_IE_ALPHA_2

	,OUTFIT_IE_PUFFER_0
	,OUTFIT_IE_PUFFER_1
	,OUTFIT_IE_PUFFER_2
	,OUTFIT_IE_CAMO_0
	,OUTFIT_IE_CAMO_1
	,OUTFIT_IE_CAMO_2

	,OUTFIT_IE_SWEATER_0
	,OUTFIT_IE_SWEATER_1
	,OUTFIT_IE_SWEATER_2
	,OUTFIT_IE_PARKA_0
	,OUTFIT_IE_PARKA_1
	,OUTFIT_IE_PARKA_2

	,OUTFIT_IE_CLOWN_0
	,OUTFIT_IE_CLOWN_1
	,OUTFIT_IE_CLOWN_2
	,OUTFIT_IE_DEMON_0
	,OUTFIT_IE_DEMON_1
	,OUTFIT_IE_DEMON_2
	
	,OUTFIT_HIDDEN_IE_JN_TARGET_0
	,OUTFIT_HIDDEN_IE_JN_ATTACKER_0
	,OUTFIT_HIDDEN_IE_JN_ATTACKER_1
	,OUTFIT_HIDDEN_IE_JN_ATTACKER_2
	,OUTFIT_HIDDEN_IE_JN_ATTACKER_3
	,OUTFIT_HIDDEN_IE_JN_ATTACKER_4
	,OUTFIT_HIDDEN_IE_JN_ATTACKER_5
	
	,OUTFIT_HIDDEN_IE_JN4_ORANGE_TARGET_0
	,OUTFIT_HIDDEN_IE_JN4_ORANGE_ATTACKER_0
	,OUTFIT_HIDDEN_IE_JN4_ORANGE_ATTACKER_1
	,OUTFIT_HIDDEN_IE_JN4_ORANGE_ATTACKER_2
	,OUTFIT_HIDDEN_IE_JN4_ORANGE_ATTACKER_3
	,OUTFIT_HIDDEN_IE_JN4_ORANGE_ATTACKER_4
	,OUTFIT_HIDDEN_IE_JN4_ORANGE_ATTACKER_5
	
	,OUTFIT_HIDDEN_IE_JN4_PURPLE_TARGET_0
	,OUTFIT_HIDDEN_IE_JN4_PURPLE_ATTACKER_0
	,OUTFIT_HIDDEN_IE_JN4_PURPLE_ATTACKER_1
	,OUTFIT_HIDDEN_IE_JN4_PURPLE_ATTACKER_2
	,OUTFIT_HIDDEN_IE_JN4_PURPLE_ATTACKER_3
	,OUTFIT_HIDDEN_IE_JN4_PURPLE_ATTACKER_4
	,OUTFIT_HIDDEN_IE_JN4_PURPLE_ATTACKER_5
	
	,OUTFIT_HIDDEN_GENCOMBAT_FOREST_0
	,OUTFIT_HIDDEN_GENCOMBAT_FOREST_1
	,OUTFIT_HIDDEN_GENCOMBAT_FOREST_2
	,OUTFIT_HIDDEN_GENCOMBAT_FOREST_3
	,OUTFIT_HIDDEN_GENCOMBAT_FOREST_4
	,OUTFIT_HIDDEN_GENCOMBAT_FOREST_5
	,OUTFIT_HIDDEN_GENCOMBAT_URBAN_0
	,OUTFIT_HIDDEN_GENCOMBAT_URBAN_1
	,OUTFIT_HIDDEN_GENCOMBAT_URBAN_2
	,OUTFIT_HIDDEN_GENCOMBAT_URBAN_3
	,OUTFIT_HIDDEN_GENCOMBAT_URBAN_4
	,OUTFIT_HIDDEN_GENCOMBAT_URBAN_5
	
	,OUTFIT_HIDDEN_SR_LG_ORANGE_0
	,OUTFIT_HIDDEN_SR_LG_BLUE_0
	,OUTFIT_HIDDEN_SR_LG_PINK_0
	,OUTFIT_HIDDEN_SR_LG_GREEN_0
	
	,OUTFIT_HIDDEN_DAWNRAID_ORANGE_0
	,OUTFIT_HIDDEN_DAWNRAID_ORANGE_1
	,OUTFIT_HIDDEN_DAWNRAID_ORANGE_2
	,OUTFIT_HIDDEN_DAWNRAID_ORANGE_3
	,OUTFIT_HIDDEN_DAWNRAID_ORANGE_4
	,OUTFIT_HIDDEN_DAWNRAID_ORANGE_5

	,OUTFIT_HIDDEN_DAWNRAID_PURPLE_0
	,OUTFIT_HIDDEN_DAWNRAID_PURPLE_1
	,OUTFIT_HIDDEN_DAWNRAID_PURPLE_2
	,OUTFIT_HIDDEN_DAWNRAID_PURPLE_3
	,OUTFIT_HIDDEN_DAWNRAID_PURPLE_4
	,OUTFIT_HIDDEN_DAWNRAID_PURPLE_5
	
	,OUTFIT_HIDDEN_LIONSDEN_ATTACKER_0
	,OUTFIT_HIDDEN_LIONSDEN_ATTACKER_1
	,OUTFIT_HIDDEN_LIONSDEN_ATTACKER_2
	,OUTFIT_HIDDEN_LIONSDEN_ATTACKER_3
	,OUTFIT_HIDDEN_LIONSDEN_ATTACKER_4
	,OUTFIT_HIDDEN_LIONSDEN_ATTACKER_5

	,OUTFIT_HIDDEN_LIONSDEN_DEFENDER_0
	,OUTFIT_HIDDEN_LIONSDEN_DEFENDER_1
	,OUTFIT_HIDDEN_LIONSDEN_DEFENDER_2
	,OUTFIT_HIDDEN_LIONSDEN_DEFENDER_3
	,OUTFIT_HIDDEN_LIONSDEN_DEFENDER_4
	,OUTFIT_HIDDEN_LIONSDEN_DEFENDER_5
	
	,OUTFIT_BIKER_RAIDER_0
	,OUTFIT_BIKER_RAIDER_1
	,OUTFIT_BIKER_RAIDER_2
	,OUTFIT_BIKER_RAIDER_3
	,OUTFIT_BIKER_RAIDER_4
	,OUTFIT_BIKER_RAIDER_5
	,OUTFIT_BIKER_RAIDER_6
	,OUTFIT_BIKER_RAIDER_7
	
	,OUTFIT_GUNR_CEO_SURVIVALIST_0
	,OUTFIT_GUNR_CEO_COMBAT_0
	,OUTFIT_GUNR_CEO_GUNRUNNER_0
	,OUTFIT_GUNR_CEO_SMUGGLER_0
	
	,OUTFIT_GUNR_ASSOCIATE_SURVIVALIST_0
	,OUTFIT_GUNR_ASSOCIATE_SURVIVALIST_1
	,OUTFIT_GUNR_ASSOCIATE_SURVIVALIST_2
	,OUTFIT_GUNR_ASSOCIATE_COMBAT_0
	,OUTFIT_GUNR_ASSOCIATE_COMBAT_1
	,OUTFIT_GUNR_ASSOCIATE_COMBAT_2
	,OUTFIT_GUNR_ASSOCIATE_GUNRUNNER_0
	,OUTFIT_GUNR_ASSOCIATE_GUNRUNNER_1
	,OUTFIT_GUNR_ASSOCIATE_GUNRUNNER_2
	,OUTFIT_GUNR_ASSOCIATE_SMUGGLER_0
	,OUTFIT_GUNR_ASSOCIATE_SMUGGLER_1
	,OUTFIT_GUNR_ASSOCIATE_SMUGGLER_2
	
	,OUTFIT_VERSUS_HIDDEN_TEAM_GENERAL_ORANGE_0
	,OUTFIT_VERSUS_HIDDEN_TEAM_GENERAL_PURPLE_0
	,OUTFIT_VERSUS_HIDDEN_TEAM_GENERAL_PINK_0
	,OUTFIT_VERSUS_HIDDEN_TEAM_GENERAL_GREEN_0
	
	,OUTFIT_HIDDEN_IE_JN4_PINK_TARGET_0
	,OUTFIT_HIDDEN_IE_JN4_GREEN_TARGET_0
	
	,OUTFIT_BIKER_ZOMBIE_0
	,OUTFIT_BIKER_ZOMBIE_1
	,OUTFIT_BIKER_ZOMBIE_2
	,OUTFIT_BIKER_ZOMBIE_3
	,OUTFIT_BIKER_ZOMBIE_4
	,OUTFIT_BIKER_ZOMBIE_5
	,OUTFIT_BIKER_ZOMBIE_6
	,OUTFIT_BIKER_ZOMBIE_7
	
	,OUTFIT_VERSUS_HIDDEN_GR_POWERMAD_ORANGE_0
	,OUTFIT_VERSUS_HIDDEN_GR_POWERMAD_ORANGE_1
	,OUTFIT_VERSUS_HIDDEN_GR_POWERMAD_PURPLE_0
	,OUTFIT_VERSUS_HIDDEN_GR_POWERMAD_PURPLE_1
	,OUTFIT_VERSUS_HIDDEN_GR_POWERMAD_PINK_0
	,OUTFIT_VERSUS_HIDDEN_GR_POWERMAD_PINK_1
	,OUTFIT_VERSUS_HIDDEN_GR_POWERMAD_GREEN_0
	,OUTFIT_VERSUS_HIDDEN_GR_POWERMAD_GREEN_1
	
	,OUTFIT_GUNR_CEO_TACTICAL_0
	,OUTFIT_GUNR_CEO_GANGMASTER_0
	,OUTFIT_GUNR_ASSOCIATE_TACTICAL_0
	,OUTFIT_GUNR_ASSOCIATE_TACTICAL_1
	,OUTFIT_GUNR_ASSOCIATE_TACTICAL_2
	,OUTFIT_GUNR_ASSOCIATE_GANGMASTER_0
	,OUTFIT_GUNR_ASSOCIATE_GANGMASTER_1
	,OUTFIT_GUNR_ASSOCIATE_GANGMASTER_2
	
	,OUTFIT_BIKER_PUFFER_0
	,OUTFIT_BIKER_PUFFER_1
	,OUTFIT_BIKER_PUFFER_2
	,OUTFIT_BIKER_PUFFER_3
	,OUTFIT_BIKER_PUFFER_4
	,OUTFIT_BIKER_PUFFER_5
	,OUTFIT_BIKER_PUFFER_6
	,OUTFIT_BIKER_PUFFER_7
	
	,OUTFIT_BIKER_HILLBILLY_0
	,OUTFIT_BIKER_HILLBILLY_1
	,OUTFIT_BIKER_HILLBILLY_2
	,OUTFIT_BIKER_HILLBILLY_3
	,OUTFIT_BIKER_HILLBILLY_4
	,OUTFIT_BIKER_HILLBILLY_5
	,OUTFIT_BIKER_HILLBILLY_6
	,OUTFIT_BIKER_HILLBILLY_7
	
	,OUTFIT_WVM_OPPRESSOR_0
	,OUTFIT_WVM_OPPRESSOR_1
	,OUTFIT_WVM_OPPRESSOR_2
	,OUTFIT_WVM_OPPRESSOR_3
	
	,OUTFIT_HIDDEN_HOSTILE_TAKEOVER_GREEN_0
	,OUTFIT_HIDDEN_HOSTILE_TAKEOVER_ORANGE_0
	,OUTFIT_HIDDEN_HOSTILE_TAKEOVER_PURPLE_0
	,OUTFIT_HIDDEN_HOSTILE_TAKEOVER_PINK_0
	
	,OUTFIT_VERSUS_HIDDEN_SM_CND_CONDEMNED
	,OUTFIT_VERSUS_HIDDEN_SM_CND_0
	,OUTFIT_VERSUS_HIDDEN_SM_CND_1
	,OUTFIT_VERSUS_HIDDEN_SM_CND_2
	,OUTFIT_VERSUS_HIDDEN_SM_CND_3
	
	,OUTFIT_VERSUS_HIDDEN_SM_VEHICLE_WARFARE_PURPLE_0
	,OUTFIT_VERSUS_HIDDEN_SM_VEHICLE_WARFARE_ORANGE_0
	,OUTFIT_VERSUS_HIDDEN_SM_VEHICLE_WARFARE_PINK_0
	,OUTFIT_VERSUS_HIDDEN_SM_VEHICLE_WARFARE_GREEN_0
	
	,OUTFIT_VERSUS_HIDDEN_SM_AIR_SHOOTOUT_PURPLE_0
	,OUTFIT_VERSUS_HIDDEN_SM_AIR_SHOOTOUT_ORANGE_0
	,OUTFIT_VERSUS_HIDDEN_SM_AIR_SHOOTOUT_PINK_0
	,OUTFIT_VERSUS_HIDDEN_SM_AIR_SHOOTOUT_GREEN_0
	
	,OUTFIT_VERSUS_HIDDEN_SM_BOMBUSHKA_RUN_BLACK_0
	,OUTFIT_VERSUS_HIDDEN_SM_BOMBUSHKA_RUN_BLACK_1
	,OUTFIT_VERSUS_HIDDEN_SM_BOMBUSHKA_RUN_BLACK_2
	,OUTFIT_VERSUS_HIDDEN_SM_BOMBUSHKA_RUN_BLACK_3
	
	,OUTFIT_VERSUS_HIDDEN_SM_BOMBUSHKA_RUN_WHITE_0
	,OUTFIT_VERSUS_HIDDEN_SM_BOMBUSHKA_RUN_WHITE_1
	,OUTFIT_VERSUS_HIDDEN_SM_BOMBUSHKA_RUN_WHITE_2
	,OUTFIT_VERSUS_HIDDEN_SM_BOMBUSHKA_RUN_WHITE_3
	
	,OUTFIT_VERSUS_HIDDEN_SM_STOCKPILE_PURPLE_0
	,OUTFIT_VERSUS_HIDDEN_SM_STOCKPILE_ORANGE_0
	,OUTFIT_VERSUS_HIDDEN_SM_STOCKPILE_PINK_0
	,OUTFIT_VERSUS_HIDDEN_SM_STOCKPILE_GREEN_0
	
	,OUTFIT_SMUGGLER_CEO_FORMAL_PILOT_0
	,OUTFIT_SMUGGLER_CEO_TACTICAL_STEALTH_0
	,OUTFIT_SMUGGLER_ASSOCIATE_FORMAL_PILOT_0
	,OUTFIT_SMUGGLER_ASSOCIATE_FORMAL_PILOT_1
	,OUTFIT_SMUGGLER_ASSOCIATE_FORMAL_PILOT_2
	,OUTFIT_SMUGGLER_ASSOCIATE_TACTICAL_STEALTH_0
	,OUTFIT_SMUGGLER_ASSOCIATE_TACTICAL_STEALTH_1
	,OUTFIT_SMUGGLER_ASSOCIATE_TACTICAL_STEALTH_2
	
	,OUTFIT_BIKER_CASUAL_PILOT_0
	,OUTFIT_BIKER_CASUAL_PILOT_1
	,OUTFIT_BIKER_CASUAL_PILOT_2
	,OUTFIT_BIKER_CASUAL_PILOT_3
	,OUTFIT_BIKER_CASUAL_PILOT_4
	,OUTFIT_BIKER_CASUAL_PILOT_5
	,OUTFIT_BIKER_CASUAL_PILOT_6
	,OUTFIT_BIKER_CASUAL_PILOT_7
	
	,OUTFIT_SMUGGLER_RACE_SUIT_FLOW
	,OUTFIT_SMUGGLER_RACE_SUIT_CNT
	,OUTFIT_SMUGGLER_RACE_SUIT_METV
	,OUTFIT_SMUGGLER_RACE_SUIT_ECOLA
	,OUTFIT_SMUGGLER_RACE_SUIT_SPRUNK
	,OUTFIT_SMUGGLER_RACE_SUIT_TINKLE
	
	,OUTFIT_BIKER_PIRATE_0
	,OUTFIT_BIKER_PIRATE_1
	,OUTFIT_BIKER_PIRATE_2
	,OUTFIT_BIKER_PIRATE_3
	,OUTFIT_BIKER_PIRATE_4
	,OUTFIT_BIKER_PIRATE_5
	,OUTFIT_BIKER_PIRATE_6
	,OUTFIT_BIKER_PIRATE_7
	
	,OUTFIT_GANGOPS_UNDER_CONTROL
	
	,OUTFIT_GANGOPS_HEIST_SCUBA
	,OUTFIT_GANGOPS_HEIST_PARAMEDIC_BLUE_0
	,OUTFIT_GANGOPS_HEIST_PARAMEDIC_BLUE_1
	,OUTFIT_GANGOPS_HEIST_PARAMEDIC_GREEN_0
	,OUTFIT_GANGOPS_HEIST_PARAMEDIC_GREEN_1
	
	,OUTFIT_VERSUS_HIDDEN_GO_SL_CLOWN_0
	,OUTFIT_VERSUS_HIDDEN_GO_SL_CLOWN_1
	,OUTFIT_VERSUS_HIDDEN_GO_SL_CLOWN_2
	,OUTFIT_VERSUS_HIDDEN_GO_SL_CLOWN_3
	,OUTFIT_VERSUS_HIDDEN_GO_SL_CLOWN_4
	,OUTFIT_VERSUS_HIDDEN_GO_SL_CLOWN_5
	,OUTFIT_VERSUS_HIDDEN_GO_SL_CLOWN_6
	,OUTFIT_VERSUS_HIDDEN_GO_SL_CLOWN_7
	,OUTFIT_VERSUS_HIDDEN_GO_SL_GREY_0
	,OUTFIT_VERSUS_HIDDEN_GO_SL_GREY_1
	,OUTFIT_VERSUS_HIDDEN_GO_SL_GREY_2
	,OUTFIT_VERSUS_HIDDEN_GO_SL_GREY_3
	,OUTFIT_VERSUS_HIDDEN_GO_SL_GREY_4
	,OUTFIT_VERSUS_HIDDEN_GO_SL_GREY_5
	,OUTFIT_VERSUS_HIDDEN_GO_SL_GREY_6
	,OUTFIT_VERSUS_HIDDEN_GO_SL_GREY_7
	,OUTFIT_VERSUS_HIDDEN_GO_SL_ALIEN_0
	,OUTFIT_VERSUS_HIDDEN_GO_SL_ALIEN_1
	,OUTFIT_VERSUS_HIDDEN_GO_SL_ALIEN_2
	,OUTFIT_VERSUS_HIDDEN_GO_SL_ALIEN_3
	,OUTFIT_VERSUS_HIDDEN_GO_SL_ALIEN_4
	,OUTFIT_VERSUS_HIDDEN_GO_SL_ALIEN_5
	,OUTFIT_VERSUS_HIDDEN_GO_SL_ALIEN_6
	,OUTFIT_VERSUS_HIDDEN_GO_SL_ALIEN_7
	,OUTFIT_VERSUS_HIDDEN_GO_SL_GRNBRWN_0
	,OUTFIT_VERSUS_HIDDEN_GO_SL_GRNBRWN_1
	,OUTFIT_VERSUS_HIDDEN_GO_SL_GRNBRWN_2
	,OUTFIT_VERSUS_HIDDEN_GO_SL_GRNBRWN_3
	,OUTFIT_VERSUS_HIDDEN_GO_SL_GRNBRWN_4
	,OUTFIT_VERSUS_HIDDEN_GO_SL_GRNBRWN_5
	,OUTFIT_VERSUS_HIDDEN_GO_SL_GRNBRWN_6
	,OUTFIT_VERSUS_HIDDEN_GO_SL_GRNBRWN_7
	
	,OUTFIT_VERSUS_HIDDEN_GO_HT_BLACK_TARGET_0
	,OUTFIT_VERSUS_HIDDEN_GO_HT_BLACK_0
	,OUTFIT_VERSUS_HIDDEN_GO_HT_BLACK_1
	,OUTFIT_VERSUS_HIDDEN_GO_HT_BLACK_2
	,OUTFIT_VERSUS_HIDDEN_GO_HT_BLACK_3
	,OUTFIT_VERSUS_HIDDEN_GO_HT_BLACK_4
	,OUTFIT_VERSUS_HIDDEN_GO_HT_BLACK_5
	,OUTFIT_VERSUS_HIDDEN_GO_HT_BLACK_6
	,OUTFIT_VERSUS_HIDDEN_GO_HT_BLACK_7
	,OUTFIT_VERSUS_HIDDEN_GO_HT_GREEN_TARGET_0
	,OUTFIT_VERSUS_HIDDEN_GO_HT_GREEN_0
	,OUTFIT_VERSUS_HIDDEN_GO_HT_GREEN_1
	,OUTFIT_VERSUS_HIDDEN_GO_HT_GREEN_2
	,OUTFIT_VERSUS_HIDDEN_GO_HT_GREEN_3
	,OUTFIT_VERSUS_HIDDEN_GO_HT_GREEN_4
	,OUTFIT_VERSUS_HIDDEN_GO_HT_GREEN_5
	,OUTFIT_VERSUS_HIDDEN_GO_HT_GREEN_6
	,OUTFIT_VERSUS_HIDDEN_GO_HT_GREEN_7
	
	,OUTFIT_GANGOPS_HEIST_MEDTECH_COMBAT1_0
	,OUTFIT_GANGOPS_HEIST_MEDTECH_COMBAT1_1
	,OUTFIT_GANGOPS_HEIST_MEDTECH_COMBAT1_2
	,OUTFIT_GANGOPS_HEIST_MEDTECH_COMBAT1_3
	,OUTFIT_GANGOPS_HEIST_MEDTECH_COMBAT2_0
	,OUTFIT_GANGOPS_HEIST_MEDTECH_COMBAT2_1
	,OUTFIT_GANGOPS_HEIST_MEDTECH_COMBAT2_2
	,OUTFIT_GANGOPS_HEIST_MEDTECH_COMBAT2_3
	,OUTFIT_GANGOPS_HEIST_MODERN_STEALTH_0
	,OUTFIT_GANGOPS_HEIST_MODERN_STEALTH_1
	,OUTFIT_GANGOPS_HEIST_MODERN_STEALTH_2
	,OUTFIT_GANGOPS_HEIST_MODERN_STEALTH_3
	,OUTFIT_GANGOPS_HEIST_CASUAL_PILOT_0
	,OUTFIT_GANGOPS_HEIST_CASUAL_PILOT_1
	,OUTFIT_GANGOPS_HEIST_CASUAL_PILOT_2
	,OUTFIT_GANGOPS_HEIST_CASUAL_PILOT_3
	
	,OUTFIT_GANGOPS_HEIST_FIGHTER_PILOT_0
	,OUTFIT_GANGOPS_HEIST_FIGHTER_PILOT_1
	,OUTFIT_GANGOPS_HEIST_FIGHTER_PILOT_2
	,OUTFIT_GANGOPS_HEIST_FIGHTER_PILOT_3
	
	,OUTFIT_GANGOPS_HEIST_HIGH_TECH_RIOT_0
	,OUTFIT_GANGOPS_HEIST_HIGH_TECH_RIOT_1
	,OUTFIT_GANGOPS_HEIST_HIGH_TECH_RIOT_2
	,OUTFIT_GANGOPS_HEIST_HIGH_TECH_RIOT_3
	,OUTFIT_GANGOPS_HEIST_HIGH_TECH_IMPACT_0
	,OUTFIT_GANGOPS_HEIST_HIGH_TECH_IMPACT_1
	,OUTFIT_GANGOPS_HEIST_HIGH_TECH_IMPACT_2
	,OUTFIT_GANGOPS_HEIST_HIGH_TECH_IMPACT_3
	,OUTFIT_GANGOPS_HEIST_MED_TECH_MASKED_0
	,OUTFIT_GANGOPS_HEIST_MED_TECH_MASKED_1
	,OUTFIT_GANGOPS_HEIST_MED_TECH_MASKED_2
	,OUTFIT_GANGOPS_HEIST_MED_TECH_MASKED_3
	,OUTFIT_GANGOPS_HEIST_MED_TECH_REBELLION_0
	,OUTFIT_GANGOPS_HEIST_MED_TECH_REBELLION_1
	,OUTFIT_GANGOPS_HEIST_MED_TECH_REBELLION_2
	,OUTFIT_GANGOPS_HEIST_MED_TECH_REBELLION_3
	,OUTFIT_GANGOPS_HEIST_MED_TECH_HAVOC_0
	,OUTFIT_GANGOPS_HEIST_MED_TECH_HAVOC_1
	,OUTFIT_GANGOPS_HEIST_MED_TECH_HAVOC_2
	,OUTFIT_GANGOPS_HEIST_MED_TECH_HAVOC_3
	,OUTFIT_GANGOPS_HEIST_MED_TECH_ADAPTABLE_0
	,OUTFIT_GANGOPS_HEIST_MED_TECH_ADAPTABLE_1
	,OUTFIT_GANGOPS_HEIST_MED_TECH_ADAPTABLE_2
	,OUTFIT_GANGOPS_HEIST_MED_TECH_ADAPTABLE_3
	,OUTFIT_GANGOPS_HEIST_SUB_DRIVER_0
	,OUTFIT_GANGOPS_HEIST_SUB_DRIVER_1
	,OUTFIT_GANGOPS_HEIST_SUB_DRIVER_2
	,OUTFIT_GANGOPS_HEIST_SUB_DRIVER_3
	,OUTFIT_GANGOPS_HEIST_HEAVY_COMBAT_GEAR_0
	,OUTFIT_GANGOPS_HEIST_HEAVY_COMBAT_GEAR_1
	,OUTFIT_GANGOPS_HEIST_HEAVY_COMBAT_GEAR_2
	,OUTFIT_GANGOPS_HEIST_HEAVY_COMBAT_GEAR_3
	,OUTFIT_GANGOPS_HEIST_LOW_TECH_TACTICAL_0
	,OUTFIT_GANGOPS_HEIST_LOW_TECH_TACTICAL_1
	,OUTFIT_GANGOPS_HEIST_LOW_TECH_TACTICAL_2
	,OUTFIT_GANGOPS_HEIST_LOW_TECH_TACTICAL_3
	,OUTFIT_GANGOPS_HEIST_LOW_TECH_COMBAT_0
	,OUTFIT_GANGOPS_HEIST_LOW_TECH_COMBAT_1
	,OUTFIT_GANGOPS_HEIST_LOW_TECH_COMBAT_2
	,OUTFIT_GANGOPS_HEIST_LOW_TECH_COMBAT_3
	,OUTFIT_GANGOPS_HEIST_CLASSIC_STEALTH_GEAR_0
	,OUTFIT_GANGOPS_HEIST_CLASSIC_STEALTH_GEAR_1
	,OUTFIT_GANGOPS_HEIST_CLASSIC_STEALTH_GEAR_2
	,OUTFIT_GANGOPS_HEIST_CLASSIC_STEALTH_GEAR_3
	,OUTFIT_GANGOPS_HEIST_MILITARY_CAMO_GEAR_0
	,OUTFIT_GANGOPS_HEIST_MILITARY_CAMO_GEAR_1
	,OUTFIT_GANGOPS_HEIST_MILITARY_CAMO_GEAR_2
	,OUTFIT_GANGOPS_HEIST_MILITARY_CAMO_GEAR_3
	
	,OUTFIT_GANGOPS_HEIST_GORKA_0
	,OUTFIT_GANGOPS_HEIST_GORKA_1
	,OUTFIT_GANGOPS_HEIST_GORKA_2
	,OUTFIT_GANGOPS_HEIST_GORKA_3
	
	,OUTFIT_VERSUS_HIDDEN_AIR_QUOTA_PURPLE_0
	,OUTFIT_VERSUS_HIDDEN_AIR_QUOTA_PURPLE_1
	,OUTFIT_VERSUS_HIDDEN_AIR_QUOTA_PURPLE_2
	,OUTFIT_VERSUS_HIDDEN_AIR_QUOTA_PURPLE_3
	,OUTFIT_VERSUS_HIDDEN_AIR_QUOTA_ORANGE_0
	,OUTFIT_VERSUS_HIDDEN_AIR_QUOTA_ORANGE_1
	,OUTFIT_VERSUS_HIDDEN_AIR_QUOTA_ORANGE_2
	,OUTFIT_VERSUS_HIDDEN_AIR_QUOTA_ORANGE_3
	,OUTFIT_VERSUS_HIDDEN_AIR_QUOTA_PINK_0
	,OUTFIT_VERSUS_HIDDEN_AIR_QUOTA_PINK_1
	,OUTFIT_VERSUS_HIDDEN_AIR_QUOTA_PINK_2
	,OUTFIT_VERSUS_HIDDEN_AIR_QUOTA_PINK_3
	,OUTFIT_VERSUS_HIDDEN_AIR_QUOTA_GREEN_0
	,OUTFIT_VERSUS_HIDDEN_AIR_QUOTA_GREEN_1
	,OUTFIT_VERSUS_HIDDEN_AIR_QUOTA_GREEN_2
	,OUTFIT_VERSUS_HIDDEN_AIR_QUOTA_GREEN_3
	
	,OUTFIT_GANGOPS_HEIST_SCUBA_NOTANK
	
	,OUTFIT_VERSUS_HIDDEN_SHOWDOWN_PURPLE_0
	,OUTFIT_VERSUS_HIDDEN_SHOWDOWN_PURPLE_1
	,OUTFIT_VERSUS_HIDDEN_SHOWDOWN_PURPLE_2
	,OUTFIT_VERSUS_HIDDEN_SHOWDOWN_PURPLE_3
	,OUTFIT_VERSUS_HIDDEN_SHOWDOWN_ORANGE_0
	,OUTFIT_VERSUS_HIDDEN_SHOWDOWN_ORANGE_1
	,OUTFIT_VERSUS_HIDDEN_SHOWDOWN_ORANGE_2
	,OUTFIT_VERSUS_HIDDEN_SHOWDOWN_ORANGE_3
	,OUTFIT_VERSUS_HIDDEN_SHOWDOWN_PINK_0
	,OUTFIT_VERSUS_HIDDEN_SHOWDOWN_PINK_1
	,OUTFIT_VERSUS_HIDDEN_SHOWDOWN_PINK_2
	,OUTFIT_VERSUS_HIDDEN_SHOWDOWN_PINK_3
	,OUTFIT_VERSUS_HIDDEN_SHOWDOWN_GREEN_0
	,OUTFIT_VERSUS_HIDDEN_SHOWDOWN_GREEN_1
	,OUTFIT_VERSUS_HIDDEN_SHOWDOWN_GREEN_2
	,OUTFIT_VERSUS_HIDDEN_SHOWDOWN_GREEN_3
	
	,OUTFIT_VERSUS_HIDDEN_TRAPDOOR_PURPLE_0
	,OUTFIT_VERSUS_HIDDEN_TRAPDOOR_PURPLE_1
	,OUTFIT_VERSUS_HIDDEN_TRAPDOOR_PURPLE_2
	,OUTFIT_VERSUS_HIDDEN_TRAPDOOR_PURPLE_3
	,OUTFIT_VERSUS_HIDDEN_TRAPDOOR_ORANGE_0
	,OUTFIT_VERSUS_HIDDEN_TRAPDOOR_ORANGE_1
	,OUTFIT_VERSUS_HIDDEN_TRAPDOOR_ORANGE_2
	,OUTFIT_VERSUS_HIDDEN_TRAPDOOR_ORANGE_3
	,OUTFIT_VERSUS_HIDDEN_TRAPDOOR_PINK_0
	,OUTFIT_VERSUS_HIDDEN_TRAPDOOR_PINK_1
	,OUTFIT_VERSUS_HIDDEN_TRAPDOOR_PINK_2
	,OUTFIT_VERSUS_HIDDEN_TRAPDOOR_PINK_3
	,OUTFIT_VERSUS_HIDDEN_TRAPDOOR_GREEN_0
	,OUTFIT_VERSUS_HIDDEN_TRAPDOOR_GREEN_1
	,OUTFIT_VERSUS_HIDDEN_TRAPDOOR_GREEN_2
	,OUTFIT_VERSUS_HIDDEN_TRAPDOOR_GREEN_3
	
	,OUTFIT_VERSUS_HIDDEN_VENETIAN_COP
	,OUTFIT_VERSUS_HIDDEN_VENETIAN_ROBBER_RED
	,OUTFIT_VERSUS_HIDDEN_VENETIAN_ROBBER_BLUE
	,OUTFIT_VERSUS_HIDDEN_VENETIAN_ROBBER_WHITE
	,OUTFIT_VERSUS_HIDDEN_VENETIAN_ROBBER_GRAY
	
	,OUTFIT_VERSUS_HIDDEN_VENETIAN_FIRESUIT_CLASSIC_BLUE
	,OUTFIT_VERSUS_HIDDEN_VENETIAN_FIRESUIT_CLASSIC_RED
	,OUTFIT_VERSUS_HIDDEN_VENETIAN_FIRESUIT_CLASSIC_WHITE
	,OUTFIT_VERSUS_HIDDEN_VENETIAN_FIRESUIT_CLASSIC_GREEN
	,OUTFIT_VERSUS_HIDDEN_VENETIAN_FIRESUIT_CLASSIC_ORANGE
	,OUTFIT_VERSUS_HIDDEN_VENETIAN_FIRESUIT_CLASSIC_PURPLE
	,OUTFIT_VERSUS_HIDDEN_VENETIAN_FIRESUIT_CLASSIC_PINK
	
	,OUTFIT_VERSUS_HIDDEN_DROPBOMB_PURPLE_0
	,OUTFIT_VERSUS_HIDDEN_DROPBOMB_PURPLE_1
	,OUTFIT_VERSUS_HIDDEN_DROPBOMB_PURPLE_2
	,OUTFIT_VERSUS_HIDDEN_DROPBOMB_PURPLE_3
	,OUTFIT_VERSUS_HIDDEN_DROPBOMB_ORANGE_0
	,OUTFIT_VERSUS_HIDDEN_DROPBOMB_ORANGE_1
	,OUTFIT_VERSUS_HIDDEN_DROPBOMB_ORANGE_2
	,OUTFIT_VERSUS_HIDDEN_DROPBOMB_ORANGE_3
	,OUTFIT_VERSUS_HIDDEN_DROPBOMB_PINK_0
	,OUTFIT_VERSUS_HIDDEN_DROPBOMB_PINK_1
	,OUTFIT_VERSUS_HIDDEN_DROPBOMB_PINK_2
	,OUTFIT_VERSUS_HIDDEN_DROPBOMB_PINK_3
	,OUTFIT_VERSUS_HIDDEN_DROPBOMB_GREEN_0
	,OUTFIT_VERSUS_HIDDEN_DROPBOMB_GREEN_1
	,OUTFIT_VERSUS_HIDDEN_DROPBOMB_GREEN_2
	,OUTFIT_VERSUS_HIDDEN_DROPBOMB_GREEN_3

	
	,OUTFIT_VERSUS_HIDDEN_SUMORUN_PURPLE_0
	,OUTFIT_VERSUS_HIDDEN_SUMORUN_ORANGE_0
	,OUTFIT_VERSUS_HIDDEN_SUMORUN_PINK_0
	,OUTFIT_VERSUS_HIDDEN_SUMORUN_GREEN_0
	
	,OUTFIT_VERSUS_HIDDEN_OFFDEF_PURPLE_0
	,OUTFIT_VERSUS_HIDDEN_OFFDEF_PURPLE_1
	,OUTFIT_VERSUS_HIDDEN_OFFDEF_PURPLE_2
	,OUTFIT_VERSUS_HIDDEN_OFFDEF_PURPLE_3
	,OUTFIT_VERSUS_HIDDEN_OFFDEF_ORANGE_0
	,OUTFIT_VERSUS_HIDDEN_OFFDEF_ORANGE_1
	,OUTFIT_VERSUS_HIDDEN_OFFDEF_ORANGE_2
	,OUTFIT_VERSUS_HIDDEN_OFFDEF_ORANGE_3
	,OUTFIT_VERSUS_HIDDEN_OFFDEF_PINK_0
	,OUTFIT_VERSUS_HIDDEN_OFFDEF_PINK_1
	,OUTFIT_VERSUS_HIDDEN_OFFDEF_PINK_2
	,OUTFIT_VERSUS_HIDDEN_OFFDEF_PINK_3
	,OUTFIT_VERSUS_HIDDEN_OFFDEF_GREEN_0
	,OUTFIT_VERSUS_HIDDEN_OFFDEF_GREEN_1
	,OUTFIT_VERSUS_HIDDEN_OFFDEF_GREEN_2
	,OUTFIT_VERSUS_HIDDEN_OFFDEF_GREEN_3
	
	,OUTFIT_VERSUS_HIDDEN_HUNTBACK_REMIX_HOONS_0
	,OUTFIT_VERSUS_HIDDEN_HUNTBACK_REMIX_HOONS_1
	,OUTFIT_VERSUS_HIDDEN_HUNTBACK_REMIX_HOONS_2
	,OUTFIT_VERSUS_HIDDEN_HUNTBACK_REMIX_HOONS_3
	,OUTFIT_VERSUS_HIDDEN_HUNTBACK_REMIX_HOONS_RUNNER_0
	,OUTFIT_VERSUS_HIDDEN_HUNTBACK_REMIX_RABBLE_0
	,OUTFIT_VERSUS_HIDDEN_HUNTBACK_REMIX_RABBLE_1
	,OUTFIT_VERSUS_HIDDEN_HUNTBACK_REMIX_RABBLE_2
	,OUTFIT_VERSUS_HIDDEN_HUNTBACK_REMIX_RABBLE_3
	,OUTFIT_VERSUS_HIDDEN_HUNTBACK_REMIX_RABBLE_RUNNER_0
	
	,OUTFIT_VERSUS_HIDDEN_TRADINGPLACES_BEAST_0
	,OUTFIT_VERSUS_HIDDEN_TRADINGPLACES_BEAST_1
	,OUTFIT_VERSUS_HIDDEN_TRADINGPLACES_BEAST_2
	,OUTFIT_VERSUS_HIDDEN_TRADINGPLACES_BEAST_3
	,OUTFIT_VERSUS_HIDDEN_TRADINGPLACES_BEAST_4
	,OUTFIT_VERSUS_HIDDEN_TRADINGPLACES_BEAST_5
	,OUTFIT_VERSUS_HIDDEN_TRADINGPLACES_BEAST_6
	,OUTFIT_VERSUS_HIDDEN_TRADINGPLACES_BEAST_7
	,OUTFIT_VERSUS_HIDDEN_TRADINGPLACES_JUG_0
	,OUTFIT_VERSUS_HIDDEN_TRADINGPLACES_JUG_1
	,OUTFIT_VERSUS_HIDDEN_TRADINGPLACES_JUG_2
	,OUTFIT_VERSUS_HIDDEN_TRADINGPLACES_JUG_3
	,OUTFIT_VERSUS_HIDDEN_TRADINGPLACES_JUG_4
	,OUTFIT_VERSUS_HIDDEN_TRADINGPLACES_JUG_5
	,OUTFIT_VERSUS_HIDDEN_TRADINGPLACES_JUG_6
	,OUTFIT_VERSUS_HIDDEN_TRADINGPLACES_JUG_7
	
	,OUTFIT_VERSUS_HIDDEN_COMEPLAYREMIX_HUNTER_0
	,OUTFIT_VERSUS_HIDDEN_COMEPLAYREMIX_HUNTER_1
	,OUTFIT_VERSUS_HIDDEN_COMEPLAYREMIX_HUNTER_2
	,OUTFIT_VERSUS_HIDDEN_COMEPLAYREMIX_HUNTER_3
	,OUTFIT_VERSUS_HIDDEN_COMEPLAYREMIX_HUNTER_4
	,OUTFIT_VERSUS_HIDDEN_COMEPLAYREMIX_HUNTER_5
	,OUTFIT_VERSUS_HIDDEN_COMEPLAYREMIX_HUNTER_6
	,OUTFIT_VERSUS_HIDDEN_COMEPLAYREMIX_HUNTER_7
	,OUTFIT_VERSUS_HIDDEN_COMEPLAYREMIX_RUNNER_0
	,OUTFIT_VERSUS_HIDDEN_COMEPLAYREMIX_RUNNER_1
	
	,OUTFIT_VERSUS_HIDDEN_RUNBACKREMIX_BLACK
	,OUTFIT_VERSUS_HIDDEN_RUNBACKREMIX_WHITE
	,OUTFIT_VERSUS_HIDDEN_RUNBACKREMIX_RED
	,OUTFIT_VERSUS_HIDDEN_RUNBACKREMIX_BLUE
	
	,OUTFIT_NIGHTCLUB_CHILIAD_0
	,OUTFIT_NIGHTCLUB_CHILIAD_1
	,OUTFIT_NIGHTCLUB_CHILIAD_2
	
	,OUTFIT_NIGHTCLUB_KIFFLOM_0
	
	,OUTFIT_VERSUS_HIDDEN_RUNBACKREMIX_GREEN
	,OUTFIT_VERSUS_HIDDEN_RUNBACKREMIX_YELLOW
	,OUTFIT_VERSUS_HIDDEN_RUNBACKREMIX_GREENGLOW
	,OUTFIT_VERSUS_HIDDEN_RUNBACKREMIX_YELLOWGLOW
	
	,OUTFIT_ARENA_WARS_CONTENDER_GENERAL_0
	,OUTFIT_ARENA_WARS_CONTENDER_GENERAL_1
	,OUTFIT_ARENA_WARS_CONTENDER_GENERAL_2
	,OUTFIT_ARENA_WARS_CONTENDER_GENERAL_3
	,OUTFIT_ARENA_WARS_CONTENDER_APOCALYPSE_0
	,OUTFIT_ARENA_WARS_CONTENDER_APOCALYPSE_1
	,OUTFIT_ARENA_WARS_CONTENDER_APOCALYPSE_2
	,OUTFIT_ARENA_WARS_CONTENDER_APOCALYPSE_3
	,OUTFIT_ARENA_WARS_CONTENDER_WASTELAND_0
	,OUTFIT_ARENA_WARS_CONTENDER_WASTELAND_1
	,OUTFIT_ARENA_WARS_CONTENDER_WASTELAND_2
	,OUTFIT_ARENA_WARS_CONTENDER_WASTELAND_3
	,OUTFIT_ARENA_WARS_CONTENDER_SCIFI_0
	,OUTFIT_ARENA_WARS_CONTENDER_SCIFI_1
	,OUTFIT_ARENA_WARS_CONTENDER_SCIFI_2
	,OUTFIT_ARENA_WARS_CONTENDER_SCIFI_3
	
	,OUTFIT_ARENA_WARS_PETE
	
	,OUTFIT_CASINO_IMPOTENT_RAGE
	,OUTFIT_CASINO_HIGHROLLER
	
	,OUTFIT_VERSUS_HIDDEN_SPACELING_0
	,OUTFIT_VERSUS_HIDDEN_SPACELING_1
	,OUTFIT_VERSUS_HIDDEN_SPACELING_2
	,OUTFIT_VERSUS_HIDDEN_SPACELING_3
	
	,OUTFIT_CASINO_HEIST_DIRECT_LIGHT_I_0
	,OUTFIT_CASINO_HEIST_DIRECT_LIGHT_I_1
	,OUTFIT_CASINO_HEIST_DIRECT_LIGHT_I_2
	,OUTFIT_CASINO_HEIST_DIRECT_LIGHT_I_3
	,OUTFIT_CASINO_HEIST_DIRECT_LIGHT_I_4
	,OUTFIT_CASINO_HEIST_DIRECT_LIGHT_I_5
	
	,OUTFIT_CASINO_HEIST_DIRECT_LIGHT_II_0
	,OUTFIT_CASINO_HEIST_DIRECT_LIGHT_II_1
	,OUTFIT_CASINO_HEIST_DIRECT_LIGHT_II_2
	,OUTFIT_CASINO_HEIST_DIRECT_LIGHT_II_3
	,OUTFIT_CASINO_HEIST_DIRECT_LIGHT_II_4
	,OUTFIT_CASINO_HEIST_DIRECT_LIGHT_II_5
	
	,OUTFIT_CASINO_HEIST_DIRECT_LIGHT_III_0
	,OUTFIT_CASINO_HEIST_DIRECT_LIGHT_III_1
	,OUTFIT_CASINO_HEIST_DIRECT_LIGHT_III_2
	,OUTFIT_CASINO_HEIST_DIRECT_LIGHT_III_3
	,OUTFIT_CASINO_HEIST_DIRECT_LIGHT_III_4
	,OUTFIT_CASINO_HEIST_DIRECT_LIGHT_III_5
	
	,OUTFIT_CASINO_HEIST_DIRECT_HEAVY_I_0
	,OUTFIT_CASINO_HEIST_DIRECT_HEAVY_I_1
	,OUTFIT_CASINO_HEIST_DIRECT_HEAVY_I_2
	,OUTFIT_CASINO_HEIST_DIRECT_HEAVY_I_3
	,OUTFIT_CASINO_HEIST_DIRECT_HEAVY_I_4
	,OUTFIT_CASINO_HEIST_DIRECT_HEAVY_I_5
	
	,OUTFIT_CASINO_HEIST_DIRECT_HEAVY_II_0
	,OUTFIT_CASINO_HEIST_DIRECT_HEAVY_II_1
	,OUTFIT_CASINO_HEIST_DIRECT_HEAVY_II_2
	,OUTFIT_CASINO_HEIST_DIRECT_HEAVY_II_3
	,OUTFIT_CASINO_HEIST_DIRECT_HEAVY_II_4
	,OUTFIT_CASINO_HEIST_DIRECT_HEAVY_II_5
	
	,OUTFIT_CASINO_HEIST_DIRECT_HEAVY_III_0
	,OUTFIT_CASINO_HEIST_DIRECT_HEAVY_III_1
	,OUTFIT_CASINO_HEIST_DIRECT_HEAVY_III_2
	,OUTFIT_CASINO_HEIST_DIRECT_HEAVY_III_3
	,OUTFIT_CASINO_HEIST_DIRECT_HEAVY_III_4
	,OUTFIT_CASINO_HEIST_DIRECT_HEAVY_III_5
	
	,OUTFIT_CASINO_HEIST_UNDERTAKER
	
	,OUTFIT_CASINO_HEIST_FIB_0
	,OUTFIT_CASINO_HEIST_FIB_1
	,OUTFIT_CASINO_HEIST_FIB_2
	,OUTFIT_CASINO_HEIST_FIB_3
	
	,OUTFIT_CASINO_HEIST_STEALTH_I_0
	,OUTFIT_CASINO_HEIST_STEALTH_I_1
	,OUTFIT_CASINO_HEIST_STEALTH_I_2
	,OUTFIT_CASINO_HEIST_STEALTH_I_3
	,OUTFIT_CASINO_HEIST_STEALTH_I_4
	,OUTFIT_CASINO_HEIST_STEALTH_I_5
	
	,OUTFIT_CASINO_HEIST_STEALTH_II_0
	,OUTFIT_CASINO_HEIST_STEALTH_II_1
	,OUTFIT_CASINO_HEIST_STEALTH_II_2
	,OUTFIT_CASINO_HEIST_STEALTH_II_3
	,OUTFIT_CASINO_HEIST_STEALTH_II_4
	,OUTFIT_CASINO_HEIST_STEALTH_II_5
	
	,OUTFIT_CASINO_HEIST_STEALTH_III_0
	,OUTFIT_CASINO_HEIST_STEALTH_III_1
	,OUTFIT_CASINO_HEIST_STEALTH_III_2
	,OUTFIT_CASINO_HEIST_STEALTH_III_3
	,OUTFIT_CASINO_HEIST_STEALTH_III_4
	,OUTFIT_CASINO_HEIST_STEALTH_III_5
	
	,OUTFIT_CASINO_HEIST_COVERT_STEALTH_I_0
	,OUTFIT_CASINO_HEIST_COVERT_STEALTH_I_1
	,OUTFIT_CASINO_HEIST_COVERT_STEALTH_I_2
	,OUTFIT_CASINO_HEIST_COVERT_STEALTH_I_3
	,OUTFIT_CASINO_HEIST_COVERT_STEALTH_I_4
	,OUTFIT_CASINO_HEIST_COVERT_STEALTH_I_5
	
	,OUTFIT_CASINO_HEIST_COVERT_STEALTH_II_0
	,OUTFIT_CASINO_HEIST_COVERT_STEALTH_II_1
	,OUTFIT_CASINO_HEIST_COVERT_STEALTH_II_2
	,OUTFIT_CASINO_HEIST_COVERT_STEALTH_II_3
	,OUTFIT_CASINO_HEIST_COVERT_STEALTH_II_4
	,OUTFIT_CASINO_HEIST_COVERT_STEALTH_II_5
	
	,OUTFIT_CASINO_HEIST_COVERT_STEALTH_III_0
	,OUTFIT_CASINO_HEIST_COVERT_STEALTH_III_1
	,OUTFIT_CASINO_HEIST_COVERT_STEALTH_III_2
	,OUTFIT_CASINO_HEIST_COVERT_STEALTH_III_3
	,OUTFIT_CASINO_HEIST_COVERT_STEALTH_III_4
	,OUTFIT_CASINO_HEIST_COVERT_STEALTH_III_5
	
	,OUTFIT_CASINO_HEIST_VALET
	
	,OUTFIT_CASINO_HEIST_FIREFIGHTER_0
	,OUTFIT_CASINO_HEIST_FIREFIGHTER_1
	,OUTFIT_CASINO_HEIST_FIREFIGHTER_2
	,OUTFIT_CASINO_HEIST_FIREFIGHTER_3
	,OUTFIT_CASINO_HEIST_FIREFIGHTER_4
	,OUTFIT_CASINO_HEIST_FIREFIGHTER_5
	,OUTFIT_CASINO_HEIST_FIREFIGHTER_6
	,OUTFIT_CASINO_HEIST_FIREFIGHTER_7
	
	,OUTFIT_CASINO_HEIST_NOOSE_0
	,OUTFIT_CASINO_HEIST_NOOSE_1
	,OUTFIT_CASINO_HEIST_NOOSE_2
	,OUTFIT_CASINO_HEIST_NOOSE_3
	
	,OUTFIT_CASINO_HEIST_GRUPPE_SECHS_0
	,OUTFIT_CASINO_HEIST_GRUPPE_SECHS_1
	,OUTFIT_CASINO_HEIST_GRUPPE_SECHS_2
	,OUTFIT_CASINO_HEIST_GRUPPE_SECHS_3
	,OUTFIT_CASINO_HEIST_GRUPPE_SECHS_4
	,OUTFIT_CASINO_HEIST_GRUPPE_SECHS_5
	
	,OUTFIT_CASINO_HEIST_BUGSTARS_0
	,OUTFIT_CASINO_HEIST_BUGSTARS_1
	,OUTFIT_CASINO_HEIST_BUGSTARS_2
	,OUTFIT_CASINO_HEIST_BUGSTARS_3
	,OUTFIT_CASINO_HEIST_BUGSTARS_4
	,OUTFIT_CASINO_HEIST_BUGSTARS_5
	
	,OUTFIT_CASINO_HEIST_CELEB_0
	,OUTFIT_CASINO_HEIST_CELEB_1
	,OUTFIT_CASINO_HEIST_CELEB_2
	,OUTFIT_CASINO_HEIST_CELEB_3
	
	,OUTFIT_CASINO_HEIST_MAINTENANCE_0
	,OUTFIT_CASINO_HEIST_MAINTENANCE_1
	,OUTFIT_CASINO_HEIST_MAINTENANCE_2
	,OUTFIT_CASINO_HEIST_MAINTENANCE_3
	,OUTFIT_CASINO_HEIST_MAINTENANCE_4
	,OUTFIT_CASINO_HEIST_MAINTENANCE_5
	
	,OUTFIT_CASINO_HEIST_PRISON_GUARD_0
	,OUTFIT_CASINO_HEIST_PRISON_GUARD_1
	,OUTFIT_CASINO_HEIST_PRISON_GUARD_2
	,OUTFIT_CASINO_HEIST_PRISON_GUARD_3
	
	,OUTFIT_CASINO_HEIST_HIGH_ROLLER_0
	,OUTFIT_CASINO_HEIST_HIGH_ROLLER_1
	,OUTFIT_CASINO_HEIST_HIGH_ROLLER_2
	,OUTFIT_CASINO_HEIST_HIGH_ROLLER_3
	
//	,OUTFIT_CNC_COP_LSPD_OFFICER_0
//	,OUTFIT_CNC_COP_LSPD_OFFICER_1
//	,OUTFIT_CNC_COP_LSPD_OFFICER_2
//	,OUTFIT_CNC_COP_PARK_RANGER_0
//	,OUTFIT_CNC_COP_PARK_RANGER_1
//	,OUTFIT_CNC_COP_PARK_RANGER_2
//	,OUTFIT_CNC_COP_SHERIFF_0
//	,OUTFIT_CNC_COP_SHERIFF_1
//	,OUTFIT_CNC_COP_SHERIFF_2
//	,OUTFIT_CNC_COP_HIGHWAY_PATROL_0
//	,OUTFIT_CNC_COP_HIGHWAY_PATROL_1
//	,OUTFIT_CNC_COP_HIGHWAY_PATROL_2
//	,OUTFIT_CNC_COP_TECH_CONTRACTOR_0
//	,OUTFIT_CNC_COP_TECH_CONTRACTOR_1
//	,OUTFIT_CNC_COP_TECH_CONTRACTOR_2
//	,OUTFIT_CNC_COP_TACTICAL_SHERIFF_0
//	,OUTFIT_CNC_COP_TACTICAL_SHERIFF_1
//	,OUTFIT_CNC_COP_TACTICAL_SHERIFF_2
//	
//	,OUTFIT_CNC_CROOK_UNAFFILIATED_FOOTSOLDIER_0
//	,OUTFIT_CNC_CROOK_UNAFFILIATED_FOOTSOLDIER_1
//	,OUTFIT_CNC_CROOK_UNAFFILIATED_FOOTSOLDIER_2
//	,OUTFIT_CNC_CROOK_UNAFFILIATED_FOOTSOLDIER_3
//	,OUTFIT_CNC_CROOK_BALLAS_ENFORCER_0
//	,OUTFIT_CNC_CROOK_ONEILS_HACKER_0
//	,OUTFIT_CNC_CROOK_ONEILS_HACKER_1
//	,OUTFIT_CNC_CROOK_ONEILS_HACKER_2
	
	,OUTFIT_SUM20_ALIEN_AWARD
	
	,OUTFIT_ISLAND_HEIST_GUARD_0
	,OUTFIT_ISLAND_HEIST_GUARD_1
	,OUTFIT_ISLAND_HEIST_GUARD_2
	,OUTFIT_ISLAND_HEIST_GUARD_3
	,OUTFIT_ISLAND_HEIST_SMUGGLER_0
	,OUTFIT_ISLAND_HEIST_SMUGGLER_1
	,OUTFIT_ISLAND_HEIST_SMUGGLER_2
	,OUTFIT_ISLAND_HEIST_SMUGGLER_3
	,OUTFIT_ISLAND_HEIST_HEAVY_1_0
	,OUTFIT_ISLAND_HEIST_HEAVY_1_1
	,OUTFIT_ISLAND_HEIST_HEAVY_1_2
	,OUTFIT_ISLAND_HEIST_HEAVY_1_3
	,OUTFIT_ISLAND_HEIST_HEAVY_2_0
	,OUTFIT_ISLAND_HEIST_HEAVY_2_1
	,OUTFIT_ISLAND_HEIST_HEAVY_2_2
	,OUTFIT_ISLAND_HEIST_HEAVY_2_3
	,OUTFIT_ISLAND_HEIST_LIGHT_1_0
	,OUTFIT_ISLAND_HEIST_LIGHT_1_1
	,OUTFIT_ISLAND_HEIST_LIGHT_1_2
	,OUTFIT_ISLAND_HEIST_LIGHT_1_3
	,OUTFIT_ISLAND_HEIST_LIGHT_2_0
	,OUTFIT_ISLAND_HEIST_LIGHT_2_1
	,OUTFIT_ISLAND_HEIST_LIGHT_2_2
	,OUTFIT_ISLAND_HEIST_LIGHT_2_3
	,OUTFIT_ISLAND_HEIST_STEALTH_1_0
	,OUTFIT_ISLAND_HEIST_STEALTH_1_1
	,OUTFIT_ISLAND_HEIST_STEALTH_1_2
	,OUTFIT_ISLAND_HEIST_STEALTH_1_3
	,OUTFIT_ISLAND_HEIST_STEALTH_2_0
	,OUTFIT_ISLAND_HEIST_STEALTH_2_1
	,OUTFIT_ISLAND_HEIST_STEALTH_2_2
	,OUTFIT_ISLAND_HEIST_STEALTH_2_3
	
	,OUTFIT_ISLAND_HEIST_BEACH_PARTY_0
	,OUTFIT_ISLAND_HEIST_BEACH_PARTY_1
	,OUTFIT_ISLAND_HEIST_BEACH_PARTY_2
	,OUTFIT_ISLAND_HEIST_BEACH_PARTY_3
	,OUTFIT_ISLAND_HEIST_BEACH_PARTY_4
	
	,OUTFIT_TUNER_ROBBER_BRAVADO
	,OUTFIT_TUNER_ROBBER_LAMPADATI
	,OUTFIT_TUNER_ROBBER_ANORAK
	,OUTFIT_TUNER_ROBBER_SMOLDER
	,OUTFIT_TUNER_ROBBER_RED_RACING
	,OUTFIT_TUNER_ROBBER_PUFF
	,OUTFIT_TUNER_ROBBER_NEW_SKOOL
	,OUTFIT_TUNER_ROBBER_POLO
	,OUTFIT_TUNER_ROBBER_CHECK
	,OUTFIT_TUNER_ROBBER_LURKER
	,OUTFIT_TUNER_ROBBER_ROBBER
	
	,OUTFIT_TUNER_SECURITY_0
	,OUTFIT_TUNER_SECURITY_1
	,OUTFIT_TUNER_SECURITY_2
	,OUTFIT_TUNER_SECURITY_3
	,OUTFIT_TUNER_LOST_MC_0
	,OUTFIT_TUNER_LOST_MC_1
	,OUTFIT_TUNER_LOST_MC_2
	,OUTFIT_TUNER_LOST_MC_3
	,OUTFIT_TUNER_DOCK_WORKER_0
	,OUTFIT_TUNER_DOCK_WORKER_1
	,OUTFIT_TUNER_DOCK_WORKER_2
	,OUTFIT_TUNER_DOCK_WORKER_3
	
	,OUTFIT_FIXER_SETUP_0
	,OUTFIT_FIXER_SETUP_1
	,OUTFIT_FIXER_SETUP_2
	
	,OUTFIT_FIXER_PARTY_PROMOTER_0
	,OUTFIT_FIXER_PARTY_PROMOTER_1
	,OUTFIT_FIXER_PARTY_PROMOTER_2
	,OUTFIT_FIXER_PARTY_PROMOTER_3
	
	,OUTFIT_FIXER_BILLIONAIRE_GAMES_0
	,OUTFIT_FIXER_BILLIONAIRE_GAMES_1
	,OUTFIT_FIXER_BILLIONAIRE_GAMES_2
	,OUTFIT_FIXER_BILLIONAIRE_GAMES_3
	
	,OUTFIT_FIXER_GOLF_0
	,OUTFIT_FIXER_GOLF_1
	,OUTFIT_FIXER_GOLF_2
	,OUTFIT_FIXER_GOLF_3
	,OUTFIT_FIXER_GOLF_4
	,OUTFIT_FIXER_GOLF_5
	,OUTFIT_FIXER_GOLF_6
	,OUTFIT_FIXER_GOLF_7
	
	,OUTFIT_HEIST_COVERALLS_NAVY
	
	,OUTFIT_LD_ORGANICS_AWARD_0
	
	,OUTFIT_SUM22_IAA_AGENT_0
	,OUTFIT_SUM22_IAA_AGENT_1
	,OUTFIT_SUM22_IAA_AGENT_2
	,OUTFIT_SUM22_IAA_AGENT_3
	
	,OUTFIT_VERSUS_HIDDEN_SUM22_HALLOWEEN_RIDERS_0
	,OUTFIT_VERSUS_HIDDEN_SUM22_HALLOWEEN_RIDERS_1
	,OUTFIT_VERSUS_HIDDEN_SUM22_HALLOWEEN_RIDERS_2
	,OUTFIT_VERSUS_HIDDEN_SUM22_HALLOWEEN_RIDERS_3
	,OUTFIT_VERSUS_HIDDEN_SUM22_HALLOWEEN_RIDERS_4
	,OUTFIT_VERSUS_HIDDEN_SUM22_HALLOWEEN_RIDERS_5
	,OUTFIT_VERSUS_HIDDEN_SUM22_HALLOWEEN_RIDERS_6
	,OUTFIT_VERSUS_HIDDEN_SUM22_HALLOWEEN_RIDERS_7
	,OUTFIT_VERSUS_HIDDEN_SUM22_HALLOWEEN_HUNTED_0
	,OUTFIT_VERSUS_HIDDEN_SUM22_HALLOWEEN_HUNTED_1
	,OUTFIT_VERSUS_HIDDEN_SUM22_HALLOWEEN_HUNTED_2
	,OUTFIT_VERSUS_HIDDEN_SUM22_HALLOWEEN_HUNTED_3
	,OUTFIT_VERSUS_HIDDEN_SUM22_HALLOWEEN_HUNTED_4
	,OUTFIT_VERSUS_HIDDEN_SUM22_HALLOWEEN_HUNTED_5
	,OUTFIT_VERSUS_HIDDEN_SUM22_HALLOWEEN_HUNTED_6
	,OUTFIT_VERSUS_HIDDEN_SUM22_HALLOWEEN_HUNTED_7
	
	,OUTFIT_MAX_AMOUNT
ENDENUM

STRUCT MP_OUTFITS_DATA_REQUEST
	BOOL 					bMale
	MP_OUTFIT_ENUM 			eOutfit			= OUTFIT_MP_DEFAULT
ENDSTRUCT


STRUCT MP_OUTFITS_DATA
	INT iComponentDrawableID[NUM_PED_COMPONENTS]
	INT iComponentTextureID[NUM_PED_COMPONENTS]
	
	INT iPropDrawableID[9]
	INT iPropTextureID[9]
	
	INT iDLCTattooOverlay[3]
ENDSTRUCT

ENUM PED_RACE_TYPE
	PED_RACE_UNIVERSAL = 0,
	PED_RACE_WHITE,
	PED_RACE_BLACK,
	PED_RACE_CHINESE,	
	PED_RACE_LATINO,
	PED_RACE_ARAB,
	PED_RACE_BALKAN,
	PED_RACE_JAMAICAN,
	PED_RACE_KOREAN,
	PED_RACE_ITALIAN,
	PED_RACE_PAKISTANI
ENDENUM

ENUM PEDHEADSHOTSTATE
    PHS_INVALID = 0,
    PHS_QUEUED = 1,
    PHS_READY = 2,
    PHS_WAITING_ON_TEXTURE = 3,
    PHS_FAILED = 4
ENDENUM

ENUM VEHICLE_ENTRY_CONFIG_FLAGS
	VC_NONE = 0,
	VC_FORCE_USE_FRONT_SEATS = 1,
	VC_FORCE_USE_REAR_SEATS = 2
ENDENUM

// Ped Config flags, used to control ped behaviour/setup
// match these with the enum in PedFlagsMeta.h
STRICT_ENUM PED_CONFIG_FLAGS
	PCF_AllowMedicsToAttend = 20,					// If this ped dies medics will be dispatched, false by default for mission peds, the ped wont be revived
    PCF_DontAllowToBeDraggedOutOfVehicle = 26,		// Prevents a ped from being able to be dragged out of a car	
    PCF_GetOutUndriveableVehicle = 29,				// Script can stop peds automatically getting out of car when it's upside down or undrivable, defaults to true
    PCF_WillFlyThroughWindscreen = 32,				// Ped will fly through the vehicle windscreen upon a forward impact at high velocity
    PCF_HasHelmet = 34,								// Ped has a helmet (/ The PedHelmetComponent has put the helmet on the ped via "put on" animations)
    PCF_DontTakeOffHelmet = 36,						// Disable the ped taking off his helmet automatically
	PCF_DontInfluenceWantedLevel	= 42,			// Can do any crime against this character and the cops turn a blind eye (no crime reported)
    PCF_DisableLockonToRandomPeds	= 44,			// Disable lockon to random ambient peds
    PCF_AllowLockonToFriendlyPlayers = 45,
	PCF_DisableHornAudioWhenDead = 46,				// Disable horn audio when the ped dies and rests his head on top of the steering wheel
    PCF_IsAimingGun					= 78,			// Is set when a ped is performing an aim task
    PCF_ForcedAim								= 101,  // If set, we will always behave like we have the aim trigger pressed, also works for AI in cars
    PCF_OpenDoorArmIK							= 104,  // Set if the ped should enable open door arm IK
    PCF_DontActivateRagdollFromVehicleImpact	= 106,  // Blocks ragdoll activation when hit by a vehicle
    PCF_DontActivateRagdollFromBulletImpact		= 107,  // Blocks ragdoll activation when hit by a bullet
    PCF_DontActivateRagdollFromExplosions		= 108,  // Blocks ragdoll activation when hit by an explosive
    PCF_DontActivateRagdollFromFire				= 109,  // Blocks ragdoll activation when set on fire
    PCF_DontActivateRagdollFromElectrocution	= 110,  // Blocks ragdoll activation when electrocuted
    PCF_KeepWeaponHolsteredUnlessFired = 113,		// Will keep the peds weapon holstered until they shoot or change weapons
    PCF_ForceControlledKnockout		= 114,			// Forces a melee knockout state for the victim ped
    PCF_FallsOutOfVehicleWhenKilled = 115,			// Forces a ped in a vehicle to collapse out onto the floor (TaskDyingDead launches TaskExitVehicle)
    PCF_GetOutBurningVehicle = 116,					// If set, a ped will escape a burning vehicle they are inside, defaults to true
    PCF_RunFromFiresAndExplosions = 118,			// If set, a ped will escape a burning vehicle they are inside, defaults to true
    PCF_TreatAsPlayerDuringTargeting = 119,			// If set, the ped will be given the same boost a player gets in the targeting scoring system
    PCF_DisableMelee = 122,							// Disable melee for a ped (only supported for player right now)
    PCF_DisableUnarmedDrivebys = 123,				// Disable unarmed driveby taunts for a ped
    PCF_JustGetsPulledOutWhenElectrocuted = 124,		// MP only - if this ped is tased or rubber bulleted in a vehicle and a ped jacks them, the jacker will only pull the ped out
    PCF_WillNotHotwireLawEnforcementVehicle = 126,	// If set, the ped won't hotwire a lawenforcement vehicle
    PCF_WillCommandeerRatherThanJack = 127,			// If set, the ped will play commandeering anims rather than jacking if available
    PCF_CanBeAgitated = 128,						// If set, the ped can be agitated
    PCF_ForcePedToFaceLeftInCover  = 129,			// If set ped will turn to face left in cover
    PCF_ForcePedToFaceRightInCover = 130,			// If set ped will turn to face right in cover
    PCF_BlockPedFromTurningInCover  = 131,			// If set ped will not turn in cover, unless one of the force flags is set
    PCF_KeepRelationshipGroupAfterCleanUp = 132,	// Ped keeps their relationship group when the mission is cleaned up or they are marked as no longer needed
    PCF_ForcePedToBeDragged = 133,					// Ped will loop the try locked door anim when they get to the door in order for them to automatically be dragged along
    PCF_PreventPedFromReactingToBeingJacked = 134,	// Ped doesn't react when being jacked
    PCF_RemoveDeadExtraFarAway = 137,				// We must be further away before ped polulation remove this ped when it is dead
    PCF_ArrestResult = 139,							// If set, the ped arrest task completed successfully
    PCF_CanAttackFriendly = 140,					// True allows this ped to attack peds they are friendly with
    PCF_WillJackAnyPlayer = 141,					// MP only, if set this ped will be allowed to jack any player peds, regardless of relationship
    PCF_WillJackWantedPlayersRatherThanStealCar = 144, //MP only, True if this player will jack hated players rather than try to steal a car (cops arresting crims)
    PCF_DisableLadderClimbing = 146,				// If this flag is set on a ped it will not scan for or climb ladders
    PCF_CowerInsteadOfFlee = 150,					// If set the ped should cower instead of fleeing
    PCF_CanActivateRagdollWhenVehicleUpsideDown = 151, //If set the ped will be allowed to ragdoll when the vehicle they are in gets turned upside down if the seat supports it
    PCF_AlwaysRespondToCriesForHelp = 152,			// If set the ped will respond to cries for help even if not friends with the injured ped.
    PCF_DisableBloodPoolCreation = 153,				// If set the ped will not create a blood pool when dead
    PCF_ShouldFixIfNoCollision = 154,				// If set, the ped will be fixed if there is no collision around.
    PCF_CanPerformArrest = 155,						// If set, the ped can perform arrests on peds that can be arrested
    PCF_CanPerformUncuff = 156,						// If set, the ped can uncuff peds that are handcuffed
    PCF_CanBeArrested = 157,						// If set, the ped can be arrested
    PCF_PlayerPreferFrontSeatMP = 159,				// When true, Prefer the front seat when getting in a car with buddies.
    PCF_DontEnterVehiclesInPlayersGroup = 167,		// When true, will follow the player around if in their group but wont enter vehicles.
    PCF_CannotBeTargeted = 169,						// DEPRECATED - Use the reset flag instead
	PCF_PreventAllMeleeTaunts = 169,				// Disable all melee taunts for this particular ped
    PCF_ForceDirectEntry = 170,						// Will force this ped to use the direct entry point for any vehicle they try to enter, or warp in
    PCF_AlwaysSeeApproachingVehicles = 171,			// This ped will always see approaching vehicles (even from behind).
    PCF_CanDiveAwayFromApproachingVehicles = 172,	// This ped can dive away from approaching vehicles.
    PCF_AllowPlayerToInterruptVehicleEntryExit = 173, // Will allow player to interrupt a peds scripted entry/exit task as if they had triggered it themselves
    PCF_OnlyAttackLawIfPlayerIsWanted = 174,		// This ped will only attack cops if the player is wanted
    PCF_PedsJackingMeDontGetIn = 177,				// If set the ped will not get in as part of the jack
    PCF_PedIgnoresAnimInterruptEvents = 179,		// AI peds only, will not early out of anims, default behaviour is to exit as early as possible
    PCF_IsInCustody = 180,							// Any targeting LoS checks will fail if any materials with 'see through' materials found.
    PCF_ForceStandardBumpReactionThresholds = 181,	// Setting this on an armed or buddy ped will make him more likely to perform an nm reaction when bumped by a player, friendly vehicle or ragdolling ped.
    PCF_LawWillOnlyAttackIfPlayerIsWanted = 182,	// If set on a ped, law peds will only attack if the local player is wanted
    PCF_PreventAutoShuffleToDriversSeat = 184,		// Prevents passenger from auto shuffling over to drivers seat if it becomes free
    PCF_UseKinematicModeWhenStationary = 185,		// When enabled, the ped will continually set the kinematic mode reset flag when stationary.
    PCF_DisableHurt = 188,							// Set to disable the combat hurt mode
    PCF_PlayerIsWeird = 189,						// Should this player ped periodically generate shocking events for being weird						
    PCF_DoNothingWhenOnFootByDefault = 193,			// Do nothing when on foot, by default
    PCF_DontReactivateRagdollOnPedCollisionWhenDead = 198, // Peds with this flag set won't be allowed to reactivate their ragdoll when hit by another ragdoll.
    PCF_DontActivateRagdollOnVehicleCollisionWhenDead = 199, // Peds with this flag set won't be allowed to reactivate their ragdoll when hit by a vehicle.
    PCF_HasBeenInArmedCombat = 200,					// True if we've ever been in non-melee combat
    PCF_Avoidance_Ignore_All = 202,					// True if we never steer around peds
    PCF_Avoidance_Ignored_by_All = 203,				// True if peds never steer around us
    PCF_Avoidance_Ignore_Group1 = 204,				// True if we steer around peds that are members of group 1
    PCF_Avoidance_Member_of_Group1 = 205,			// True if we are members of avoidance group 1
    PCF_ForcedToUseSpecificGroupSeatIndex = 206,	// Ped is forced to use specific seat index set by SET_PED_GROUP_MEMBER_PASSENGER_INDEX
    PCF_DisableExplosionReactions = 208,			// If set, ped will ignore explosion events
    PCF_WaitingForPlayerControlInterrupt = 210,		// Set when player switches to an ai ped and keeps the scripted task of the ai ped, if unset we won't check for interrupts or time out
    PCF_ForcedToStayInCover = 211,					// If set, ped will stay in cover (won't come out to fire or move out during combat)
    PCF_GeneratesSoundEvents = 212,					// Does this ped generate sound events?
	PCF_ListensToSoundEvents = 213,					// Does this ped have the ability to respond to sound events?
	PCF_AllowToBeTargetedInAVehicle = 214,			// Ped can be targeting inside a vehicle  
	PCF_WaitForDirectEntryPointToBeFreeWhenExiting = 215,	// When exiting a vehicle, the ped will wait for the direct entry point to be clear before exiting
	PCF_OnlyRequireOnePressToExitVehicle = 216,		// Player doesn't need to hold exit button to exit vehicles
	PCF_ForceExitToSkyDive = 217,					// Force the skydive exit if we're exiting the vehicle
	PCF_DisableExitToSkyDive = 221,					// Disable the skydive exit if we're exiting the vehicle
	PCF_DisablePedAvoidance = 226,					// This ped will not avoid other peds whilst navigating
	PCF_ForceRagdollUponDeath = 227,				// When the ped dies, it will ragdoll instead of potentially choosing an animated death
	PCF_DisablePanicInVehicle = 229,				// Disable panic in vehicle
	PCF_AllowedToDetachTrailer = 230,				// Allow this ped to detach trailers from vehicles
	PCF_ForceSkinCharacterCloth = 240,				// ForceSkin character cloth on creation when flag is set
	PCF_LeaveEngineOnWhenExitingVehicles = 241,		// Player will leave the engine on when exiting a vehicle normally
	PCF_PhoneDisableTextingAnimations = 242,		// tells taskmobile phone to not texting animations.  Currently don't play these in MP
	PCF_PhoneDisableTalkingAnimations = 243,		// tells taskmobile phone to not talking animations.  Currently don't play these in MP
	PCF_PhoneDisableCameraAnimations = 244,			// tells taskmobile phone to not camera animations.  Currently don't play these in SP
	PCF_DisableBlindFiringInShotReactions = 245,	// Stops the ped from accidentally firing his weapon when shot.
	PCF_AllowNearbyCoverUsage = 246,				// This makes it so that OTHER peds are allowed to take cover at points that would otherwise be rejected due to proximity
	PCF_CanAttackNonWantedPlayerAsLaw = 249,		// If this ped is a law enforcement ped then we will NOT quit combat due to a target player no longer having a wanted level
	PCF_WillTakeDamageWhenVehicleCrashes = 250,		// If set, this ped will take damage if the car they are in crashes
	PCF_AICanDrivePlayerAsRearPassenger = 251,		// If this ai ped is driving the vehicle, if the player taps to enter, they will enter as a rear passenger, if they hold, they'll jack the driver
	PCF_PlayerCanJackFriendlyPlayers = 252,			// If a friendly player is driving the vehicle, if the player taps to enter, they will enter as a passenger, if they hold, they'll jack the driver
	PCF_AIDriverAllowFriendlyPassengerSeatEntry = 255,	// If this ai ped is driving the vehicle, allow players to get in passenger seats
	PCF_AllowMissionPedToUseInjuredMovement = 259,	// Set the target ped to be allowed to use Injured movement clips
	PCF_PreventUsingLowerPrioritySeats = 261,		// Don't use certain seats (like hanging on the side of a vehicle)
	PCF_TeleportToLeaderVehicle = 268,				// If set, teleport if ped is not in the leader's vehicle before TaskEnterVehicle::m_SecondsBeforeWarpToLeader.
	PCF_Avoidance_Ignore_WeirdPedBuffer = 269,		// Don't walk extra far around weird peds like trevor
	PCF_DontBlipCop = 272,							// Don't add a blip for this cop
	PCF_KillWhenTrapped = 275,						// Kill this ped if it becomes trapped and cannot get up
	PCF_AvoidTearGas = 279,							// If set, this ped will avoid tear gas
	PCF_DisableGoToWritheWhenInjured = 281,			// If set, CPed::DAMAGED_GOTOWRITHE will no longer get set.  In particular, tazer hits wil no longer kill this ped in one hit
	PCF_OnlyUseForcedSeatWhenEnteringHeliInGroup = 282,	// If set this ped will only use their forced seat index if the vehicle they're entering is a heli as part of a group
	PCF_DisableWeirdPedEvents = 285,				// Disables weird ped events
	PCF_ShouldChargeNow = 286,						// This ped should charge if in combat right away, for use by scripts, cleared once ped charges
	PCF_DisableShockingEvents = 294,				// This ped should ignore shocking events.
	PCF_NeverReactToPedOnRoof = 296,				// If true, this ped will not react to a ped standing on the roof
	PCF_DisableShockingDrivingOnPavementEvents = 299, // If true, this ped will not react to peds driving on pavement
	PCF_ShouldThrowSmokeGrenadeNow = 300,			// This ped should throw a smoke grenade in combat right away, for use by scripts, cleared once ped throws
	PCF_ForceInitialPeekInCover = 302, // If set, ped will peek once before firing in cover. Cleared upon peeking.
	PCF_DisableJumpingFromVehiclesAfterLeader = 305,  // If true, disable followers jumping out of cars after their group leader
	PCF_ShoutToGroupOnPlayerMelee = 311,			// If set, ped will shout target position when melee attacked by a player
	PCF_IgnoredByAutoOpenDoors = 312,				// Set this for a ped to be ignored by the auto opened doors when checking to see if the door should be opened.
	PCF_ForceIgnoreMeleeActiveCombatant = 314,		// Purposely ignore the melee active combatant role and push them into a support or inactive combatant role
	PCF_CheckLoSForSoundEvents = 315,				// If set, ped will ignore sound events generated by entites it can't see.
	PCF_CanSayFollowedByPlayerAudio = 317,			// If set, ped can play FRIEND_FOLLOWED_BY_PLAYER lines.
	PCF_ActivateRagdollFromMinorPlayerContact = 318,// If set, the ped will activate ragdoll much more easily on contact with the player
	PCF_ForcePoseCharacterCloth = 320,				// Default cloth pose will be applied if is available in the character cloth when the cloth is created
	PCF_HasClothCollisionBounds = 321,				// Ped has cloth collision bounds
	PCF_DontBehaveLikeLaw = 324,					// If set on a non-law ped that has law like behavior (i.e. security) then that ped will not use the law like behaviors/logic
	PCF_DisablePoliceInvestigatingBody = 326,		// If set, police will not perform the CTaskShockingPoliceInvestigate behavior on the ped	
	PCF_DisableWritheShootFromGround = 327,			// If set, the ped will no longer shoot while writhing
	PCF_LowerPriorityOfWarpSeats = 328,				// If set the ped will only just the warp entry points if there are no animated entry points available
	PCF_DisableTalkTo = 329,						// If set the ped can't be talked to
	PCF_DontBlip = 330,								// If set the ped will not be blipped by the wanted system
	PCF_IgnoreLegIkRestrictions = 332,				// If set, the ped will ignore leg IK request restrictions for non-player peds
	PCF_ForceNoTimesliceIntelligenceUpdate = 333,	// If set, the ped will never have their intelligence update time sliced across frames.
	PCF_AllowTaskDoNothingTimeslicing = 339,		// If set, this ped will timeslice it's DoNothing Task when computing default task.	
	PCF_NotAllowedToJackAnyPlayers = 342,			// If set, this ped will not be allowed to jack any other players (not synced)
	PCF_AlwaysLeaveTrainUponArrival = 345,			// If set, this ped will always exit the train when it stops at a station.
	PCF_OnlyWritheFromWeaponDamage = 347,			// If set, Only allow ped to wrothe from weapon damage, not from other stuff, like small vehicle impacts
	PCF_UseSloMoBloodVfx = 348,						// If set, this ped will use slo mo blood vfx instead of the normal ones (these effects must be included in the script particle asset)
	PCF_PreventDraggedOutOfCarThreatResponse = 350,	// Don't do threat response when dragged out of a car
	PCF_ForceDeepSurfaceCheck = 356,				// Don't do distance from camera culling of the deep surface check, needed for detecting snow, mud, etc.
	PCF_DisableDeepSurfaceAnims = 357,				// Disable deep surface anims to prevent them slowing ped down.
	PCF_DontBlipNotSynced = 358,				    // If set the ped will not be blipped by the wanted system, this will not be synced and be set on clones so the behaviour can be changed per player
	PCF_IsDuckingInVehicle = 359,					// Query only, see if the ped is ducking in a vehicle
	PCF_PreventAutoShuffleToTurretSeat = 360,		// If set the ped will not automatically shuffle to the turret seat when it becomes free
	PCF_DisableEventInteriorStatusCheck = 361,		// Disables the ignore events based on interior status check which normally has peds inside ignore events from outside
	PCF_TreatDislikeAsHateWhenInCombat = 364,		// If the ped this is set on is in combat then any dislike feeling they have towards other peds will be treated as a hate feeling
	PCF_OnlyUpdateTargetWantedIfSeen = 365,			// Law with this set will only update the WL is the target player is seen. This includes on combat initialization as well as during normal LOS checks (ignoring "last known position" reports)
	PCF_AllowAutoShuffleToDriversSeat = 366,		// Allows this ped to auto shuffle to the driver seat of a vehicle if the driver is dead (law and MP peds would do this normally)
	PCF_PreventReactingToSilencedCloneBullets = 372,	// If set prevents the ped from reacting to silenced bullets fired from network clone peds (use for peds where stealth kills are important)
	PCF_DisableInjuredCryForHelpEvents = 373,		// Blocks ped from creating the injured cry for help events (run over, tazed or melee would usually do this)
	PCF_NeverLeaveTrain = 374,                      // Prevents peds riding trains from getting off them
	PCF_DontDropJetpackOnDeath = 375,				// Prevents ped dropping jetpack when they die
	PCF_DisableAutoEquipHelmetsInBikes = 380,		// Prevents ped from auto-equipping helmets when entering a bike (includes quadbikes)
	PCF_DisableAutoEquipHelmetsInAicraft = 381,		// Prevents ped from auto-equipping helmets when entering an aircraft
	PCF_HasBareFeet = 389,							// Flag to indicate that player has no shoes(used for first person aiming camera)  
	PCF_UNUSED_REPLACE_ME_2 = 390,					// 
	PCF_GoOnWithoutVehicleIfItIsUnableToGetBackToRoad = 391, // It will force the ped to abandon its vehicle (when using TaskGoToPointAnyMeans) if it is unable to get back to road
	PCF_BlockDroppingHealthSnacksOnDeath = 392,		// This will block health pickups from being created when the ped dies.
	PCF_ForceThreatResponseToNonFriendToFriendMeleeActions = 394, // Forces threat response to melee actions from non friend to friend peds.
	PCF_DontRespondToRandomPedsDamage = 395, // Do not respond to random peds damage.
	PCF_AllowContinuousThreatResponseWantedLevelUpdates = 396, // Shares the same logic of PCF_OnlyUpdateTargetWantedIfSeen but will continue to check even after the initial WL is set
	PCF_KeepTargetLossResponseOnCleanup = 397,		// The target loss response will not be reset to exit task on cleanup if this is set
	PCF_PlayersDontDragMeOutOfCar = 398,				// Similar to DontDragMeOutCar except it will still allow AI to drag the ped out of a vehicle
	PCF_BroadcastRepondedToThreatWhenGoingToPointShooting = 399, // Whenever the ped starts shooting while going to a point, it trigger a responded to threat broadcast
	PCF_IgnorePedTypeForIsFriendlyWith = 400,		// If this is set then IsFriendlyWith will ignore the ped type checks (i.e. two PEDTYPE_COP peds are not automatically friendly)
	PCF_TreatNonFriendlyAsHateWhenInCombat = 401, // Any non friendly ped will be considered as hated instead when in combat
	PCF_DontLeaveVehicleIfLeaderNotInVehicle = 402,	// Supresses "LeaderExistedCarAsDriver" events. Ped won't exit vehicle if leader isn't in it as well.
	PCF_AllowMeleeReactionIfMeleeProofIsOn = 404, //Allow melee reaction to come through even if proof is on
	PCF_UseNormalExplosionDamageWhenBlownUpInVehicle = 407,	// If this is set, ped won't be instantly killed if vehicle is blown up. Instead, they will take normal explosive damage and be forced to exit the vehicle if they're still alive.
	PCF_DisableHomingMissileLockForVehiclePedInside = 408,  // Blocks locking on of the vehicle that the ped is inside.
	PCF_DisableTakeOffScubaGear = 409,  // Disable taking off the scuba gear. Same as PRF_DisableTakeOffScubaGear but on a config flag.
	PCF_IgnoreMeleeFistWeaponDamageMult = 410,	// Melee fist weapons (ie knuckle duster) won't apply relative health damage scaler (MeleeRightFistTargetHealthDamageScaler in weapon info).
	PCF_LawPedsCanFleeFromNonWantedPlayer = 411,	// Law peds will be triggered to flee if player triggers an appropriate event (even if ped is not wanted) instead of entering combat. NB: Only synced over the network when set on players.
	PCF_ForceBlipSecurityPedsIfPlayerIsWanted =	412,	// Forces security peds (not cop peds) to be blipped on the minimap if the player is wanted. Set this on the local player.
	PCF_UseGoToPointForScenarioNavigation = 414,	// Don't use nav mesh for navigating to scenario points. DLC Hack for yachts
	PCF_DontClearLocalPassengersWantedLevel = 415,	// Don't clear local ped's wanted level when remote ped in the same car has his wanted level cleared by script.
	PCF_BlockAutoSwapOnWeaponPickups = 416,	// Block auto weapon swaps for weapon pickups.
	PCF_ThisPedIsATargetPriorityForAI = 417,	// Increase AI targeting score for peds with this flag.
	PCF_IsSwitchingHelmetVisor = 418, // Indicates ped is using switch helmet visor up/down anim
	PCF_ForceHelmetVisorSwitch = 419, // Indicates ped is using switch helmet visor up/down anim
	PCF_UseOverrideFootstepPtFx = 421, // Overrides ped footstep particle effects with the overriden footstep effect
	PCF_DisableVehicleCombat = 422, // Disables vehicle combat.
	PCF_AllowBikeAlternateAnimations = 424, // Allows transition into bike alternate animations (PI menu option)
	PCF_UseLockpickVehicleEntryAnimations = 426, // Use Franklin's alternate lockpicking animations for forced entry
	PCF_IgnoreInteriorCheckForSprinting = 427, // When set, player will be able to sprint inside interriors even if it is tagged to prevent it.
	PCF_SwatHeliSpawnWithinLastSpottedLocation = 428, // When set, swat helicopters will spawn within last spotted location instead of actual ped location (and target is a player)
	PCF_DisableStartEngine = 429, // Prevents ped from playing start engine anims (and turning engine on)
	PCF_IgnoreBeingOnFire = 430, // Makes ped ignore being on fire (fleeing, reacting to CEventOnFire event)
	PCF_DisableTurretOrRearSeatPreference = 431, // Disables turret seat and activity seat preference for vehicle entry for local player
	PCF_DisableWantedHelicopterSpawning = 432, // Will not spawn wanted helicopters to chase after this target
	PCF_UseTargetPerceptionForCreatingAimedAtEvents = 433, // Will only create aimed at events if player is within normal perception of the target
	PCF_DisableHomingMissileLockon = 434, // Will prevent homing lockon on this ped
	PCF_ForceIgnoreMaxMeleeActiveSupportCombatants = 435, //Ignore max number of active support combatants and let ped join them as such
	PCF_StayInDefensiveAreaWhenInVehicle = 436, // Will try to stay within set defensive area while driving a vehicle
	PCF_DontShoutTargetPosition = 437, // Will prevent the ped from communicating target position to all other friendly peds
	PCF_DisableHelmetArmor = 438, // Will apply full headshot damage, regardless if ped has a helmet (or armored one)
	PCF_PreventVehExitDueToInvalidWeapon = 441, // Will prevent ped from automatically being forced out of vehicle due to weapon being invalid (e.g. turret seats after going into water)
	PCF_IgnoreNetSessionFriendlyFireCheckForAllowDamage = 442, // Will ignore the friendly fire setting set by NETWORK_SET_FRIENDLY_FIRE_OPTION when checking if ped can be damaged
	PCF_DontLeaveCombatIfTargetPlayerIsAttackedByPolice = 443, // Will make ped stay in combat even if the player hes targeting starts being attacked by cops
	PCF_CheckLockedBeforeWarp = 444, // Will check when entering a vehicle if it is locked before warping
	PCF_DontShuffleInVehicleToMakeRoom = 445, // Will prevent a player from shuffling across to make room if another player is entering from the same side
	PCF_GiveWeaponOnGetup = 446, // Will give the ped a weapon to use once their weapon is removed for getups
	PCF_DontHitVehicleWithProjectiles = 447, // Ped fired projectiles will ignore the vehicle they are in
	PCF_DisableForcedEntryForOpenVehiclesFromTryLockedDoor = 448, // Will prevent ped from forcing entry into cars that are open from TryLockedDoor state
	PCF_FiresDummyRockets = 449, // his ped will fire rockets that explode when close to its target, and won't affect it
	PCF_DecoyPed = 451,  // Will make this ped a decoy ped that will focus targeting
	PCF_HasEstablishedDecoy = 452,  // This ped has created a decoy
	PCF_BlockDispatchedHelicoptersFromLanding = 453,  // Will prevent dispatched helicopters from landing and dropping off peds
	PCF_DontCryForHelpOnStun = 454,  // Will prevent peds from crying for help when shot with the stun gun
	PCF_CanBeIncapacitated = 456,  // If set, the ped may be incapacitated
	PCF_DontChangeTargetFromMelee = 458,  // If set, we wont set a new target after a melee attack
	PCF_RagdollFloatsIndefinitely = 460,  // Prevents a dead ped from sinking
	PCF_BlockElectricWeaponDamage = 461  // Blocks electric weapon damage
ENDENUM

// These flags are reset every frame
// match these with the enum in PedFlagsMeta.h
STRICT_ENUM PED_RESET_FLAGS
	PRF_DisablePlayerJumping		   = 46,	// Disable jumping (exclusive from climbing).
	PRF_DisablePlayerVaulting		   = 47,	// Disable climbing / vaulting (but not auto-vault, that's a seperate flag).
    PRF_AllowUpdateIfNoCollisionLoaded = 55,	// Don't freeze this ped for not having bounds loaded around it
    PRF_DisableSecondaryAnimationTasks = 58,	// Disable upper body animtion tasks such as shove ped and open door anims
    PRF_SearchForClosestDoor = 60,				// Will check for the closest door in proximity and store it off
    PRF_SupressGunfireEvents = 62,				// Supresses AI generating fire events, so civilians wont be shocked or react, for use in a shooting range for example	
    PRF_InfiniteStamina = 63,					// Currently just for mounts, but could be expanded to anything with stamina
    PRF_BlockWeaponReactionsUnlessDead = 64,	// Stops the ped from reacting to damage events (such as shots / fires, etc). The ped will still take damage while this flag is active. Note: this does not block explosion reactions.
    PRF_ForcePlayerFiring = 65,					// Forces player to fire even if they aren't pressing fire
    PRF_ForcePeekFromCover = 67,				// Forces an actor that is in cover to continue (or start if they haven't yet) peeking
    PRF_ForcePedToStrafe = 69,					// Forces an actor to strafe
    PRF_UseKinematicPhysics = 71,				// Enables kinematic physics mode on this ped. This stops other physical objects from pushing the ped around, and causes the ped to push any physical objects out of its way when it moves into them.
    PRF_ClearLockonTarget = 72,					// Clear the players lockon target next frame
    PRF_ForcePedToUseScripCamHeading = 77,   	// forces a ped to the scripted camera heading instead of gameplay
    PRF_IgnoreTargetsCoverForLOS = 85,			// When doing LOS checks to other peds we won't use the cover vantage position as the "target" position
    PRF_DisableCrouchWhileInCover = 88,  		// Force the crouch flag to return true while in cover.
    PRF_ForceRunningSpeedForFragSmashing = 91,  // Forces a ped to apply forces to frags as if running on contact, to guarantee peds will smash through frag objects when playing custom anims
    PRF_ExtraLongWeaponRange = 95,				// Force the bullets gun range to increase to 250m
    PRF_ForcePlayerToEnterVehicleThroughDirectDoorOnly = 96, // Forces the player to only use direct access when entering vehicles
    PRF_TaskCullExtraFarAway = 97,				// Disable a ped getting cull from a vehicle from pretend occupants.
    PRF_DisablePlayerAutoVaulting = 102,		// If this flag is set on a ped it will not attempt to autovault
    PRF_UseBulletPenetration = 107,				// If this flag is set on a ped it will use the bullet shoot through code
    PRF_ForceAimAtHead = 108,					// Force all attackers to target the head of this ped
    PRF_IsInStationaryScenario = 109,			// Inform avoidance code that this ped isn't going anywhere and should be steered around rather than waited for
    PRF_DisableSeeThroughChecksWhenTargeting = 112,	// Any targeting LoS checks will fail if any materials with 'see through' materials found.
    PRF_PuttingOnHelmet = 113,					// When set, the ped is putting on a helmet. DONT SET THIS only query it
    PRF_PanicInVehicle = 120,					// When set, the ped will play panic animations if in a vehicle
    PRF_CannotBeTargetedByAI = 124,				// When set, this ped cannot be added to the targeting list of AI peds, will be removed if already in the list and is thought of as not able to be attacked
    PRF_ForceInjuryAfterStunned = 126,			// Forces this ped to the injured state after being stunned	
    PRF_BlockWeaponFire = 128,					// Prevent the ped from shooting a weapon
    PRF_ExpandPedCapsuleFromSkeleton = 129,		// Set the ped capsule radius based on skeleton
    PRF_DisableWeaponLaserSight = 130,			// Toggle the weapon laser sight off for this frame
    PRF_SuspendInitiatedMeleeActions = 149,		// Temporarily suspend any melee actions this frame (does not include hit reactions). Use PCF_DisableMelee to turn it off completely
    PRF_SuppressInAirEvent = 150,				// Prevents ped from getting the in air event the next frame
    PRF_AllowTasksIncompatibleWithMotion = 151, // If set, allows ped to have tasks incompatible with its current motion
    PRF_SuppressLethalMeleeActions = 155,		// This will suppress any melee action that is considered lethal (RA_IS_LETHAL, defined in action_table.meta)
    PRF_InstantBlendToAim = 156,				// Blend straight into an aim instantly, if starting a gun task this frame
    PRF_MakeHeadInvisble = 166,					// If set, scale the head of the ped to 0.001
    PRF_NoAutoRunWhenFiring = 167,				// Don't auto run when NoAutoRunWhenFiring is set
	PRF_DisableSteeringAroundNavMeshEdges = 172,// Don't let this ped take navmesh edges into account when performing their low-level steering/avoidance code
    PRF_DisableTakeOffParachutePack = 177,		// Disable taking off the parachute pack
    PRF_ForceCombatTaunt = 179,					// If this ped has the INSULT special ability, and this flag is set, he will always use the combat taunt when the special is activated
    PRF_IgnoreCombatTaunts = 180,				// This ped will ignore combat taunts
    PRF_PreventAllMeleeTakedowns = 187,			// Will temporarily prevent any takedown from being performed on this ped
    PRF_PreventFailedMeleeTakedowns = 188,		// Will temporarily prevent any failed takedown from being performed on this ped
	PRF_UseTighterAvoidanceSettings = 190,		// Will temporarily force min avoidance on this ped.  will brush other peds but avoid a bit
    PRF_DisableDropDowns = 195,					// Disable drop downs for this ped
    PRF_DisableTakeOffScubaGear = 197,			// Disable taking off the scuba gear
    PRF_DisableActionMode = 200,					// Disable combat anims for ped.
    PRF_UseHeadOrientationForPerception = 206,	// Use the ped's head orientation for perception tests
	PRF_DisableJumpRagdollOnCollision = 210,	// The player will no longer auto-ragdoll when colliding with objects, peds, etc. while jumping
	PRF_DisableParachuting = 217,				// Disable parachuting for the ped
	PRF_KeepParachutePackOnAfterTeleport = 222,	// Keep the parachute pack on after a teleport
	PRF_DontRaiseFistsWhenLockedOn = 223,		// Whether or not you want the player ped to use the new front melee logic in TODO #981120
	PRF_PreferMeleeBodyIkHitReaction = 224,		// This will prefer all melee hit reactions to use body ik hit reactions if ragdoll is not selected
	PRF_DisableFriendlyGunReactAudio = 227,     // If set, disables friendly responses to gunshots/being aimed at.
	PRF_DisableAgitationTriggers = 228,			// Disables agitation triggers
	PRF_DisableNMForRiverRapids = 234,			// Disable NM reactions to fast moving water for this ped
	PRF_PreventGoingIntoStillInVehicleState = 236, // If set, the ped will not go into the still in vehicle pose
	PRF_UseFastEnterExitVehicleRates = 237,		// If set, the ped will get in and out of vehicles faster (same as in mp)
	PRF_DisableAgitation = 239,					// Disables agitation
	PRF_DisableTalk = 240,						// Disables talking
	PRF_UseProbeSlopeStairsDetection = 247,		// Uses more expensive slope/stairs detection
	PRF_DisableVehicleDamageReactions = 248,	// Disables vehicle damage reactions
	PRF_DisablePotentialBlastReactions = 249,	// Disables potential blast reactions
	PRF_OnlyAllowLeftArmDoorIk = 250,			// When set along side open door ik, will only use the left hand
	PRF_OnlyAllowRightArmDoorIk = 251,			// When set along side open door ik, will only use the left hand
	PRF_DisableFlashLight = 253,				// When set, the flash light on a Ai weapon will be turned off
	PRF_ForceEnableFlashLightForAI = 258,		// When set, the ai ped will enable their flash light
	PRF_DisableCombatAudio = 262,				// Disables combat audio
	PRF_DisableCoverAudio = 263,				// Disables cover audio
	PRF_EnablePressAndReleaseDives = 271,			// Player has to press and hold dive button to dive in water
	PRF_OnlyExitVehicleOnButtonRelease = 272,	// Only allows player to exit vehicle when button is released rather than pressed or held
	PRF_ConsiderAsPlayerCoverThreatWithoutLOS = 282, // Considered as a threat as part of player cover search even if they can't see the player
	PRF_BlockCustomAIEntryAnims = 283,			// Disables ped from using custom ai cover entry animations
	PRF_IgnoreVehicleEntryCollisionTests = 284,	// Ignore the vehicle entry collision tests for this ped 
	PRF_PreventGoingIntoShuntInVehicleState = 287, // If set, the ped will not go into the shunt in vehicle pose
	PRF_EnableVoiceDrivenMouthMovement = 302,	// If set, turn on the voice driven mouth movement
	PRF_UseTighterEnterVehicleSettings = 304,	// To have peds do better vehicle entries when in a group and interfered by other peds, use carefully though
	PRF_InRaceMode = 305,						// Set when the player is in the races to make the player more interesting to look at.
	PRF_DisableAmbientMeleeMoves = 306,			// Disable ambient (initial) melee moves
	PRF_AllowSpecialAbilityInVehicle = 308,		// Allows the player to trigger the special ability while in a vehicle
	PRF_DisableInVehicleActions = 309,			  // Prevents ped from doing in vehicle actions like closing door, hotwiring, starting engine, putting on helmet etc
	PRF_ForceInstantSteeringWheelIkBlendIn = 310, // Forces ped to blend in steering wheel ik instantly rather than over time
	PRF_IgnoreThreatEngagePlayerCoverBonus = 311,  // Ignores the bonus score for selecting cover that the player can engage the enemy at
	PRF_DontCloseVehicleDoor = 313,				// Prevents the ped from closing the vehicle door of the car they're inside
	PRF_SkipExplosionOcclusion = 314,			// Explosions can't be blocked by map collision when damaging this ped
	PRF_MeleeStrikeAgainstNonPed = 316,			// Set when the ped has performed a melee strike and hit any non ped material
	PRF_IgnoreNavigationForDoorArmIK = 317,		// We will not attempt to walk around doors when using arm IK
	PRF_DisableAimingWhileParachuting = 318,	// Disable aiming while parachuting
	PRF_DisablePedCollisionWithPedEvent = 319,	// Disable hit reaction due to colliding with a ped
	PRF_IgnoreVelocityWhenClosingVehicleDoor = 320, // Will ignore the vehicle speed threshold and close the door anyway
	PRF_SkipOnFootIdleIntro = 321,				// Skip idle intro
	PRF_DontWalkRoundObjects = 322,				// Don't walk round objects that we collide with whilst moving
	PRF_DisablePedEnteredMyVehicleEvents = 323,	// Disable ped entered my vehicle events
	PRF_DisableInVehiclePedVariationBlocking = 326, // Will allow ped variations to be rendered in vehicles, even if marked otherwise
	PRF_ReduceEffectOfVehicleRamControlLoss = 327, // When on a mission this reset flag will slightly reduce the amount of time the player loses control of their vehicle when hit by an AI ped
	PRF_DisablePlayerMeleeFriendlyAttacks = 328,// Another flag to disable friendly attack from the player. Set on the opponent you would like it to be disabled on.
	PRF_IsMeleeTargetUnreachable = 330,			// Set when the melee target has been deemed unreachable (AI only)
	PRF_DisableAutoForceOutWhenBlowingUpCar = 331, // Disable automatically forcing player to exit a vehicle in a network game when blowing up vehicle
	PRF_DisableDustOffAnims = 334,				// Disable amient dust off animations
	PRF_DisableMeleeHitReactions = 335,			// This ped will refrain from ever performing a melee hit reaction
	PRF_AllowHeadPropInVehicle = 337,			// This overrides PV_FLAG_NOT_IN_CAR set on any head prop and stops it from being removed when getting into the vehicle
	PRF_DontQuitMotionAiming = 339,
	PRF_OpenDoorArmIK = 342,					// Reset version of PCF_OpenDoorArmIK, which sets if the ped should enable open door arm IK.
	PRF_UseTighterTurnSettingsForScript = 343,	// Force use of tighter turn settings in locomotion task
	PRF_DisableVoiceDrivenMouthMovement = 346,	// If set, turn off the voice driven mouth movement (overrides EnableVoiceDrivenMouthMovement)
	PRF_SteerIntoSkids = 347,					// If set, steer into skids while driving
	PRF_AllowOpenDoorIkBeforeFullMovement = 348,// When set, code will ignore the logic that requires the ped to be in CTaskHumanLocomotion::State_Moving
	PRF_AllowHomingMissileLockOnInVehicle = 349,	// When set, code will bypass rel settings and allow a homing lock on to this ped when they are in a vehicle
	PRF_AllowCloneForcePostCameraAIUpdate = 350,
	PRF_DisableHighHeels = 351,					// Force the high heels DOF to be 0
	PRF_DontUseSprintEnergy = 353,				// Player does not get tired when sprinting
	PRF_DisableMaterialCollisionDamage = 355,		// Don't be damaged by touching dangerous material (e.g. electic generator)
	PRF_DisableMPFriendlyLockon = 356,				// Don't target friendly players in MP
	PRF_DisableMPFriendlyLethalMeleeActions = 357,	// Don't melee kill friendly players in MP
	PRF_IfLeaderStopsSeekCover = 358,				// If our leader stops, try and seek cover if we can	
	PRF_UseInteriorCapsuleSettings = 362,			// Use Interior capsule settings
	PRF_IsClosingVehicleDoor = 363,				// Ped is closing a vehicle door
	PRF_DisableWallHitAnimation = 371,			// Disable stuck wall hit animation for the ped this frame
	PRF_PlayAgitatedAnimsInVehicle = 372,		// When set, the ped will play panic animations if in a vehicle
	PRF_IsSeatShuffling = 373,					// Ped is shuffling seat
	PRF_AllowControlRadioInAnySeatInMP = 376,	// Allows ped in any seat to control the radio (in MP only)
	PRF_DisableSpycarTransformation	= 377,		// Blocks ped from manually transforming spycar to/from car/sub modes
	PRF_BlockHeadbobbingToRadio = 379,			//Blocks ped from headbobbing to radio music in vehicles
	PRF_ForceExtraLongBlendInForPedSkipIdleCoverTransition = 381, //When putting a ped directly into cover, the ped will blend in the new cover anims slowly to prevent a pose pop, see B*1788366
	PRF_DisableAssistedAimLockon = 390,			// Don't ever try to lock on to this ped with cinematic aim
	PRF_NoCollisionDamageFromOtherPeds = 394,	// Any ped this is set on won't register damage from collisions against other peds.
	PRF_DontSuppressUseNavMeshToNavigateToVehicleDoorWhenVehicleInWater = 398, // For thing that inherit from boats only
	PRF_InstantBlendToAimNoSettle = 401,				// If true it avoids playing the settle anim when aiming
	PRF_ForceScriptedCameraLowCoverAngleWhenEnteringCover = 406,	// For first person mode, when the player enters low cover, will orientate camera to face left or right rather than into cover
	PRF_DisableMeleeWeaponSelection = 417,
	PRF_WaypointPlaybackSlowMoreForCorners = 418,	// Allows peds following waypoint recordings to slow down more for corners. (Achieves same effect as the EWAYPOINT_SUPPRESS_EXACTSTOP flag, which is passed into TASK_FOLLOW_WAYPOINT_RECORDING).
	PRF_UseBulletPenetrationForGlass = 420,		//Ped will use bullet penetration code when glass material is hit.
	PRF_CanBePinnedByFriendlyBullets = 423,		// If set on a ped then they are allowed to be pinned by bullets from friendly peds
	PRF_DisableSpikeStripRoadBlocks = 425,		// Blocks road blocks with spike strips from spawning
	PRF_IsLowerPriorityMeleeTarget = 428,		// Peds marked with this flag will only be able to be hit by the player if the player explicitly presses the melee button
	PRF_ForceScanForEventsThisFrame = 429,		// Disable timeslicing of event scanning this frame (see url:bugstar:2100836 for an example situation where this is useful)
	PRF_ForceAutoEquipHelmetsInAicraft = 432,	// Forces ped to auto-equip a helmet when entering an aircraft. Overrides PCF_DisableAutoEquipHelmetsInAicraft which is set in the interaction menu.	
	PRF_BlockRemotePlayerRecording     = 433,	// Flag used by replay editor to disable recording specified remote players (for url:bugstar:2218297).
	PRF_UseFirstPersonVehicleAnimsIfFPSCamNotDominant = 435,	// allow FPS vehicle anims even if FPS camera isn't dominant
	PRF_ForceIntoStandPoseOnJetski = 436,	// allow FPS vehicle anims even if FPS camera isn't dominant
    PRF_SuppressTakedownMeleeActions = 438,		// This will suppress all takedown melee actions (RA_IS_TAKEDOWN or RA_IS_STEALTH_KILL, defined in action_table.meta)
    PRF_InvertLookAroundControls = 439,			// Inverts lookaround controls (right stick / mouse) for this player
	PRF_IgnoreCombatManager = 440,			// Allows attacking ped to engage another entity without waiting for its turn (if there's multiple attackers)
    PRF_UseBlendedCamerasOnUpdateFpsCameraRelativeMatrix = 441, //Check if there is an active camera blending and use the blended camera frame when compute the FPS camera relative matrix.
	PRF_ForceMeleeCounter = 442,				//Forces the ped to perform a dodge and a counter move if it's attacked.
	PRF_SuppressNavmeshForEnterVehicleTask = 444, //Suppress navmesh navigation in TaskEnterVehicle. Will use gotopoint or bail if cant use that
	PRF_DisableShallowWaterBikeJumpOutThisFrame = 445, // Prevents the ped from jumping out of the vehicle in shallow water if the bike is submerged
	PRF_DisablePlayerCombatRoll = 446, // Prevents the player from performing a combat roll.
	PRF_IgnoreDetachSafePositionCheck = 447, // Will ignore safe position check on detaching the ped
	PRF_DisableEasyLadderConditions = 448, // Prevents the more forgiving MP ladder detection settings from being used, and forces SP settings.
	PRF_PlayerIgnoresScenarioSpawnRestrictions = 449, // Makes local player ignore certain scenario spawn restrictions on scenarios that respect this flag
	PRF_UsingDrone = 450, // Indicates player is using Drone from Battle DLC
	PRF_UseScriptedWeaponFirePosition = 452, // Will use scripted firing position on the clones of this ped on other machines
	PRF_UseExtendedRagdollCollisionCalculator = 454, // Use extended logic for determining damage instigator for ragdoll collisions
	PRF_PreventLockonToFriendlyPlayers = 455, // Prevent the player locking on to friendly players
	PRF_OnlyAbortScriptedAnimOnMovementByInput = 456, //  Modifies AF_ABORT_ON_PED_MOVEMENT to only trigger an abort when movement would be caused by player input
	PRF_PreventAllStealthKills = 457,			// Prevents stealth take downs from being preformed on a ped
	PRF_BlockFallTaskFromExplosionDamage = 458,	// Prevent peds from entering a fall task if affected by explosion damage
	PRF_AllowPedRearEntry = 459                 // Mimics the behaviour of boss peds by holding the button for entering the rear seats
ENDENUM

// used to disable ragdoll behaviours from various sources (use with SET_RAGDOLL_BLOCKING_FLAGS and CLEAR_RAGDOLL_BLOCKING_FLAGS)
ENUM RAGDOLL_BLOCKING_FLAGS
    RBF_NONE					= 0,
    RBF_BULLET_IMPACT			= 1,
    RBF_VEHICLE_IMPACT			= 2,
    RBF_FIRE					= 4,
    RBF_ELECTROCUTION			= 8,
    RBF_PLAYER_IMPACT			= 16,	// Blocks ragdoll activation from any impact with a ped (player characters running into the ped, or active ragdolls colliding with them)
    RBF_EXPLOSION				= 32,
    RBF_IMPACT_OBJECT			= 64,
    RBF_MELEE					= 128,
    RBF_RUBBER_BULLET			= 256,
    RBF_FALLING					= 512,
    RBF_WATER_JET				= 1024,
    RBF_DROWNING				= 2048,
	RBF_ALLOW_BLOCK_DEAD_PED	= 4096,	 // allow blocking of ragdoll activation for dead peds (by default dead peds' ragdolls are allowed to activate regardless of how these flags have been set)
	RBF_PLAYER_BUMP				= 8192,  // Blocks ragdoll activation from an animated player running into the character (but not from collisions with other ragdolls)
	RBF_PLAYER_RAGDOLL_BUMP		= 16384, // Blocks ragdoll activation from a ragdolling player colliding with the character (but not from animated player bumps or collisions with active non-player ragdolls)
	RBF_PED_RAGDOLL_BUMP		= 32768, // Blocks ragdoll activation from a ragdolling non-player colliding with the character (but not from any collisions with players, ragdolling or otherwise)
	RBF_VEHICLE_GRAB			= 65536  // Blocks ragdoll activation from grabbing a vehicle door whilst it pulls away
ENDENUM

ENUM PED_DECORATION_ZONE		// This must match PedDamage.h ePedDamageZones enum
    PDZ_TORSO = 0,	
    PDZ_HEAD,
    PDZ_LEFT_ARM,
    PDZ_RIGHT_ARM,
    PDZ_LEFT_LEG,
    PDZ_RIGHT_LEG,
    PDZ_MEDALS,
    PDZ_INVALID	
ENDENUM

// NOTE: these are for the old style, depricated Ped Blood damage functions, and will go away.
ENUM PED_BLOOD_DAMAGE_TYPE		// This must match the first entries in PedDamage.h ePedDamageTypes enum
    BDT_BULLET_SMALL = 0,		// small caliber bullet wound
    BDT_BULLET_LARGE,			// larger caliber bullet wound
    BDT_SHOTGUN_SMALL,			// close range shotgun splatter wound?
    BDT_SHOTGUN_LARGE,			// far shotgun splatter wound
    BDT_STAB					// a stab style wound (streches along the suppolied direction)
ENDENUM


ENUM NM_FEEDBACK_TYPES
    NM_FB_SUCCESS = 0,
    NM_FB_FAILURE,
    NM_FB_FINISH
ENDENUM

ENUM LEG_IK_MODE
    LEG_IK_OFF = 0,			// No leg IK at all, totally controlled by animation
    LEG_IK_PARTIAL,			// Default for non-player peds. Ground position at feet is inferred from standing capsule
    LEG_IK_FULL,			// Physics probes are done at feet to find exact ground position
    LEG_IK_FULL_MELEE		// Physics probes are done at feet to find exact ground position with support for melee
ENDENUM

ENUM IK_PART
	IK_PART_INVALID = 0,
	IK_PART_HEAD,
	IK_PART_SPINE,
	IK_PART_ARM_LEFT,
	IK_PART_ARM_RIGHT,
	IK_PART_LEG_LEFT,
	IK_PART_LEG_RIGHT
ENDENUM

ENUM IK_TARGET_FLAGS
	ITF_DEFAULT 					= 0,
	ITF_ARM_TARGET_WRT_HANDBONE		= 1,	// arm target relative to the handbone
	ITF_ARM_TARGET_WRT_POINTHELPER	= 2,	// arm target relative to the pointhelper
	ITF_ARM_TARGET_WRT_IKHELPER		= 4,	// arm target relative to the ikhelper
	ITF_IK_TAG_MODE_NORMAL			= 8,	// use animation tags directly
	ITF_IK_TAG_MODE_ALLOW			= 16,	// use animation tags in ALLOW mode
	ITF_IK_TAG_MODE_BLOCK			= 32,	// use animation tags in BLOCK mode
	ITF_ARM_USE_ORIENTATION			= 64	// solve for orientation in addition to position
ENDENUM

//Checks which peds can be created
ENUM RANDOM_PED_MODEL
    RPM_DONT_CARE,
    RPM_MALE_PED,
    RPM_FEMALE_PED
ENDENUM

ENUM LADDER_INPUT_STATE
	LIS_NOTHING = 0,
	LIS_CLIMB_DOWN,
	LIS_CLIMB_UP
ENDENUM

//  These should match the PropTypes enum in PedProps.h
//  They are used by RESTRICT_PED_PROPS
// FA: !!!DEPRECATED!!!
CONST_INT PROP_TYPE_COLD_WEATHER 1  //  1<<0
CONST_INT PROP_TYPE_HOT_WEATHER  2  //  1<<1
CONST_INT PROP_TYPE_CHEAP        4  //  1<<2
CONST_INT PROP_TYPE_EXPENSIVE    8  //  1<<3
CONST_INT PROP_TYPE_SKIING       16 //  1<<4
CONST_INT PROP_TYPE_SPECIAL1     32 //  1<<5

// Keep in sync with eAnimEvents in AnimFlags.h
CONST_INT AE_LOOPSTART_1        1
CONST_INT AE_LOOPSTOP_1         2
CONST_INT AE_LOOPSTART_2        4
CONST_INT AE_LOOPSTOP_2         8
CONST_INT AE_EVENT_FIRE_1       512
CONST_INT AE_EVENT_FIRE_2       1024

//must match order in commands_ped.cpp
ENUM TRANSPORT_MODE
        TM_ANY_2D,                  // Any mode of transport bike, car plane, on foot etc
        TM_ANY_3D,                  // Any mode of transport bike, car plane, on foot  etc
        TM_ON_FOOT_2D,          //The ped is on foot
        TM_ON_FOOT_3D,          //The ped is on foot
        TM_IN_VEHICLE_2D,       //The ped is in a vehicle not on foot
        TM_IN_VEHICLE_3D        //The ped is in a vehicle not on foot
ENDENUM

ENUM COMBAT_MOVEMENT
    CM_STATIONARY,            // Stands totally still during combat
    CM_DEFENSIVE,              // Seeks a defensive position.
    CM_WILLADVANCE,         // Will advance forward in combat
    CM_WILLRETREAT          // Will retreat if the enemy gets too close
ENDENUM

ENUM COMBAT_ABILITY_LEVEL
    CAL_POOR,                   // Ped has low combat ability
    CAL_AVERAGE,            // Ped has average combat ability
    CAL_PROFESSIONAL   // Ped has high combat ability
ENDENUM

ENUM COMBAT_RANGE
    CR_NEAR,    // keeps within 5-15m
    CR_MEDIUM,	// keeps within 7-30m
    CR_FAR,		// keeps within 15-40m
    CR_VERY_FAR	// keeps within 22-45m
ENDENUM

// Keep this in sync with enum BehaviourFlags in CombatData.h
STRICT_ENUM COMBAT_ATTRIBUTE       //Set a specific combat attribute
    CA_INVALID						= -1,	
    CA_USE_COVER 					= 0,	// AI will only use cover if this is set
    CA_USE_VEHICLE 					= 1,	// AI will only use vehicles if this is set
    CA_DO_DRIVEBYS					= 2,	// AI will only driveby from a vehicle if this is set
    CA_LEAVE_VEHICLES               = 3,	// Will be forced to stay in a ny vehicel if this isn't set
    CA_CAN_USE_DYNAMIC_STRAFE_DECISIONS	= 4,	// This ped can make decisions on whether to strafe or not based on distance to destination, recent bullet events, etc.
    CA_ALWAYS_FIGHT					= 5,	// Ped will always fight upon getting threat response task
    CA_FLEE_WHILST_IN_VEHICLE		= 6,	// If in combat and in a vehicle, the ped will flee rather than attacking
    CA_JUST_FOLLOW_VEHICLE			= 7,	// If in combat and chasing in a vehicle, the ped will keep a distance behind rather than ramming
    CA_PLAY_REACTION_ANIMS			= 8,	// Deprecated
    CA_WILL_SCAN_FOR_DEAD_PEDS		= 9,	// Peds will scan for and react to dead peds found
    CA_IS_A_GUARD					= 10,	// Deprecated
    CA_JUST_SEEK_COVER				= 11,	// The ped will seek cover only 
    CA_BLIND_FIRE_IN_COVER			= 12,	// Ped will only blind fire when in cover
    CA_AGGRESSIVE					= 13,	// Ped may advance
    CA_CAN_INVESTIGATE				= 14,	// Ped can investigate events such as distant gunfire, footsteps, explosions etc
    CA_CAN_USE_RADIO				= 15,	// Ped can use a radio to call for backup (happens after a reaction)
    CA_CAN_CAPTURE_ENEMY_PEDS		= 16,	// Deprecated
    CA_ALWAYS_FLEE					= 17,	// Ped will always flee upon getting threat response task
    CA_CAN_TAUNT_IN_VEHICLE			= 20, 	// Ped can do unarmed taunts in vehicle
    CA_CAN_CHASE_TARGET_ON_FOOT		= 21,	// Ped will be able to chase their targets if both are on foot and the target is running away
    CA_WILL_DRAG_INJURED_PEDS_TO_SAFETY = 22, // Ped can drag injured peds to safety
    CA_REQUIRES_LOS_TO_SHOOT		= 23,	// Ped will require LOS to the target it is aiming at before shooting
    CA_USE_PROXIMITY_FIRING_RATE	= 24,	// Ped is allowed to use proximity based fire rate (increasing fire rate at closer distances)
    CA_DISABLE_SECONDARY_TARGET		= 25,	// Normally peds can switch briefly to a secondary target in combat, setting this will prevent that
    CA_DISABLE_ENTRY_REACTIONS		= 26,	// This will disable the flinching combat entry reactions for peds, instead only playing the turn and aim anims
    CA_PERFECT_ACCURACY				= 27,	// Force ped to be 100% accurate in all situations (added by Jay Reinebold)
    CA_CAN_USE_FRUSTRATED_ADVANCE	= 28,	// If we don't have cover and can't see our target it's possible we will advance, even if the target is in cover
    CA_MOVE_TO_LOCATION_BEFORE_COVER_SEARCH = 29, // This will have the ped move to defensive areas and within attack windows before performing the cover search
    CA_CAN_SHOOT_WITHOUT_LOS		= 30,	// Allow shooting of our weapon even if we don't have LOS (this isn't X-ray vision as it only affects weapon firing)
    CA_MAINTAIN_MIN_DISTANCE_TO_TARGET = 31, // Ped will try to maintain a min distance to the target, even if using defensive areas (currently only for cover finding + usage) 
    CA_CAN_USE_PEEKING_VARIATIONS	= 34,	// Allows ped to use steamed variations of peeking anims
    CA_DISABLE_PINNED_DOWN			= 35,	// Disables pinned down behaviors
    CA_DISABLE_PIN_DOWN_OTHERS		= 36,	// Disables pinning down others
    CA_OPEN_COMBAT_WHEN_DEFENSIVE_AREA_IS_REACHED = 37,	// When defensive area is reached the area is cleared and the ped is set to use defensive combat movement
    CA_DISABLE_BULLET_REACTIONS		= 38,	// Disables bullet reactions
    CA_CAN_BUST						= 39,	// Allows ped to bust the player
    CA_IGNORED_BY_OTHER_PEDS_WHEN_WANTED = 40,	// This ped is ignored by other peds when wanted
    CA_CAN_COMMANDEER_VEHICLES		= 41,	// Ped is allowed to "jack" vehicles when needing to chase a target in combat
    CA_CAN_FLANK					= 42,	// Ped is allowed to flank
    CA_SWITCH_TO_ADVANCE_IF_CANT_FIND_COVER = 43,	// Ped will switch to advance if they can't find cover
    CA_SWITCH_TO_DEFENSIVE_IF_IN_COVER = 44,	// Ped will switch to defensive if they are in cover
    CA_CLEAR_PRIMARY_DEFENSIVE_AREA_WHEN_REACHED = 45,	// Ped will clear their primary defensive area when it is reached
    CA_CAN_FIGHT_ARMED_PEDS_WHEN_NOT_ARMED = 46, // Ped is allowed to fight armed peds when not armed
    CA_ENABLE_TACTICAL_POINTS_WHEN_DEFENSIVE = 47, // Ped is not allowed to use tactical points if set to use defensive movement (will only use cover)
    CA_DISABLE_COVER_ARC_ADJUSTMENTS = 48,	// Ped cannot adjust cover arcs when testing cover safety (atm done on corner cover points when  ped usingdefensive area + no LOS)
	CA_USE_ENEMY_ACCURACY_SCALING	= 49, // Ped may use reduced accuracy with large number of enemies attacking the same local player target
	CA_CAN_CHARGE					= 50, // Ped is allowed to charge the enemy position
    CA_REMOVE_AREA_SET_WILL_ADVANCE_WHEN_DEFENSIVE_AREA_REACHED = 51, // When defensive area is reached the area is cleared and the ped is set to use will advance movement
    CA_USE_VEHICLE_ATTACK			= 52, // Use the vehicle attack mission during combat (only works on driver)
    CA_USE_VEHICLE_ATTACK_IF_VEHICLE_HAS_MOUNTED_GUNS = 53, // Use the vehicle attack mission during combat if the vehicle has mounted guns (only works on driver)
    CA_ALWAYS_EQUIP_BEST_WEAPON		= 54, // Always equip best weapon in combat
    CA_CAN_SEE_UNDERWATER_PEDS		= 55, // Ignores in water at depth visibility check
    CA_DISABLE_AIM_AT_AI_TARGETS_IN_HELIS = 56, // Will prevent this ped from aiming at any AI targets that are in helicopters
    CA_DISABLE_SEEK_DUE_TO_LINE_OF_SIGHT = 57,	// Disables peds seeking due to no clear line of sight
    CA_DISABLE_FLEE_FROM_COMBAT		= 58, // To be used when releasing missions peds if we don't want them fleeing from combat (mission peds already prevent flee)
    CA_DISABLE_TARGET_CHANGES_DURING_VEHICLE_PURSUIT = 59, // Disables target changes during vehicle pursuit
	CA_CAN_THROW_SMOKE_GRENADE = 60, // Ped may throw a smoke grenade at player loitering in combat
	CA_CLEAR_AREA_SET_DEFENSIVE_IF_DEFENSIVE_CANNOT_BE_REACHED = 62, // Will clear a set defensive area if that area cannot be reached
	CA_DISABLE_BLOCK_FROM_PURSUE_DURING_VEHICLE_CHASE = 64, // Disable block from pursue during vehicle chases
	CA_DISABLE_SPIN_OUT_DURING_VEHICLE_CHASE = 65, // Disable spin out during vehicle chases
	CA_DISABLE_CRUISE_IN_FRONT_DURING_BLOCK_DURING_VEHICLE_CHASE = 66, // Disable cruise in front during block during vehicle chases
	CA_CAN_IGNORE_BLOCKED_LOS_WEIGHTING = 67, // Makes it more likely that the ped will continue targeting a target with blocked los for a few seconds
	CA_DISABLE_REACT_TO_BUDDY_SHOT = 68, // Disables the react to buddy shot behaviour.
	CA_PREFER_NAVMESH_DURING_VEHICLE_CHASE = 69, // Prefer pathing using navmesh over road nodes
	CA_ALLOWED_TO_AVOID_OFFROAD_DURING_VEHICLE_CHASE = 70, // Ignore road edges when avoiding
	CA_PERMIT_CHARGE_BEYOND_DEFENSIVE_AREA = 71, // Permits ped to charge a target outside the assigned defensive area.
	CA_USE_ROCKETS_AGAINST_VEHICLES_ONLY = 72, // This ped will switch to an RPG if target is in a vehicle, otherwise will use alternate weapon.
	CA_DISABLE_TACTICAL_POINTS_WITHOUT_CLEAR_LOS = 73, // Disables peds moving to a tactical point without clear los
	CA_DISABLE_PULL_ALONGSIDE_DURING_VEHICLE_CHASE = 74, // Disables pull alongside during vehicle chase
	CA_DISABLE_ALL_RANDOMS_FLEE	= 78,	// If set on a ped, they will not flee when all random peds flee is set to TRUE (they are still able to flee due to other reasons)
	CA_WILL_GENERATE_DEAD_PED_SEEN_SCRIPT_EVENTS = 79, // This ped will send out a script DeadPedSeenEvent when they see a dead ped
	CA_USE_MAX_SENSE_RANGE_WHEN_RECEIVING_EVENTS = 80, // This will use the receiving peds sense range rather than the range supplied to the communicate event
	CA_RESTRICT_IN_VEHICLE_AIMING_TO_CURRENT_SIDE = 81, // When aiming from a vehicle the ped will only aim at targets on his side of the vehicle
	CA_USE_DEFAULT_BLOCKED_LOS_POSITION_AND_DIRECTION = 82, // LOS to the target is blocked we return to our default position and direction until we have LOS (no aiming)
	CA_REQUIRES_LOS_TO_AIM = 83, // LOS to the target is blocked we return to our default position and direction until we have LOS (no aiming)
	CA_CAN_CRUISE_AND_BLOCK_IN_VEHICLE = 84, // Allow vehicles spawned infront of target facing away to enter cruise and wait to block approaching target
	CA_PREFER_AIR_COMBAT_WHEN_IN_AIRCRAFT = 85, // Peds flying aircraft will prefer to target other aircraft over entities on the ground
	CA_ALLOW_DOG_FIGHTING = 86, //Allow peds flying aircraft to use dog fighting behaviours
	CA_PREFER_NON_AIRCRAFT_TARGETS = 87,	// This will make the weight of targets who aircraft vehicles be reduced greatly compared to targets on foot or in ground based vehicles
	CA_PREFER_KNOWN_TARGETS_WHEN_COMBAT_CLOSEST_TARGET = 88, //When peds are tasked to go to combat, they keep searching for a known target for a while before forcing an unknown one
	CA_FORCE_CHECK_ATTACK_ANGLE_FOR_MOUNTED_GUNS = 89, // Only allow mounted weapons to fire if within the correct attack angle (default 25-degree cone). On a flag in order to keep exiting behaviour and only fix in specific cases.
	CA_BLOCK_FIRE_FOR_VEHICLE_PASSENGER_MOUNTED_GUNS = 90 // Blocks the firing state for passenger-controlled mounted weapons. Existing flags CA_USE_VEHICLE_ATTACK and CA_USE_VEHICLE_ATTACK_IF_VEHICLE_HAS_MOUNTED_GUNS only work for drivers.
ENDENUM

ENUM COMBAT_INFO_TYPE
    CI_DEFAULT = -455129387,
    CI_GRUNT = 1805487359,
    CI_CAPTAIN = -384210918
ENDENUM

ENUM COMBAT_TARGET_LOSS_RESPONSE
    TLR_EXIT_TASK = 0,
    TLR_NEVER_LOSE_TARGET = 1,
	TLR_SEARCH_FOR_TARGET = 2 
ENDENUM

ENUM STEALTH_ATTRIBUTE                      // Set a specific stealth attribute
    SA_TREATED_AS_ACTING_SUSPCIOUSLY = 1,   // If a hated ped is spotted and is outside of identification range, a suspcious activity event is generated
    SA_GENERATES_FOOTSTEP_EVENTS = 2        // This ped will generate events detectable by unfriendly peds
ENDENUM

ENUM FLEE_ATTRIBUTE     //Set a specific flee attribute
    FA_USE_COVER = 1,   
    FA_USE_VEHICLE = 2,
    FA_CAN_SCREAM = 4,
    FA_PREFER_PAVEMENTS = 8,
    FA_WANDER_AT_END = 16,
    FA_LOOK_FOR_CROWDS = 32,
    FA_RETURN_TO_ORIGNAL_POSITION_AFTER_FLEE = 64,
    FA_DISABLE_HANDS_UP = 128,
    FA_UPDATE_TO_NEAREST_HATED_PED = 256,
    FA_NEVER_FLEE = 512,
    FA_DISABLE_COWER = 1024,
    FA_DISABLE_EXIT_VEHICLE = 2048,
    FA_DISABLE_REVERSE_IN_VEHICLE = 4096,
    FA_DISABLE_ACCELERATE_IN_VEHICLE = 8192,
    FA_DISABLE_FLEE_FROM_INDIRECT_THREATS = 16384,
    FA_COWER_INSTEAD_OF_FLEE = 32768,
    FA_FORCE_EXIT_VEHICLE = 65536,
    FA_DISABLE_HESITATE_IN_VEHICLE = 131072,
    FA_DISABLE_AMBIENT_CLIPS = 262144
ENDENUM

ENUM ALERTNESS_STATE
    AS_NOT_ALERT    = 0,        // Ped hasn't received any events recently
    AS_ALERT        = 1,        // Ped has received at least one event
    AS_VERY_ALERT   = 2,        // Ped has received multiple events
    AS_MUST_GO_TO_COMBAT = 3    // This value basically means the ped should be in combat but isn't because he's not allowed to investigate etc
ENDENUM

ENUM PED_MOTION_STATE	// must be kept in sync with the motion state enum in PedMotionStates.h
    MS_ON_FOOT_IDLE			= -1871534317,	// The standing idle pose for on foot movement
    MS_ON_FOOT_WALK			= -668482597,	// Walking straight forward in on foot movement
    MS_ON_FOOT_RUN			= -530524,	// Running straight forward in on foot movement
    MS_ON_FOOT_SPRINT		= -1115154469,	// Sprinting straight forward in on foot movement
    MS_CROUCH_IDLE			= 1140525470,	// The standing idle for crouching movement
    MS_CROUCH_WALK			= 147004056,	// walking straight forward whilst crouching
    MS_CROUCH_RUN			= 898879241,	// running straight forward whilst crouching
    MS_DO_NOTHING			= 247561816,
    MS_DIVING_IDLE			= 1212730861,	// Idling whilst swimming underwater
    MS_DIVING_SWIM			= -1855028596,	// swimming forwards whilst swimming underwater
    MS_PARACHUTING			= -1161760501,	// parachuting
    MS_AIMING				= 1063765679, // aiming
    MS_ACTIONMODE_IDLE		= -633298724,
    MS_ACTIONMODE_WALK		= -762290521,
    MS_ACTIONMODE_RUN		= 834330132,
    MS_STEALTHMODE_IDLE		= 1110276645,
    MS_STEALTHMODE_WALK		= 69908130,
    MS_STEALTHMODE_RUN		= -83133983
ENDENUM

//states that will for motion update
ENUM FORCE_ANIM_AI_UPDATE_STATE
    FAUS_DEFAULT = 0, 
    FAUS_CUTSCENE_EXIT = 1
ENDENUM

// Defaults are taken from gta5\build\dev\common\data\ai\combatbehaviour.meta
ENUM COMBAT_ATTRIBUTE_FLOATS
    CCF_BLIND_FIRE_CHANCE,				// Chance to blind fire from cover, range is 0.0-1.0 (default is 0.05 for civilians, law doesn't blind fire)
    CCF_BURST_DURATION_IN_COVER,		// How long each burst from cover should last (default is 2.0)
    CCF_MAX_SHOOTING_DISTANCE,			// The maximum distance the ped will try to shoot from (will override weapon range if set to anything > 0.0, default is -1.0)
    CCF_TIME_BETWEEN_BURSTS_IN_COVER,	// How long to wait, in cover, between firing bursts (< 0.0 will disable firing, unless cover fire is requested, default is 1.25)
    CCF_TIME_BETWEEN_PEEKS,				// How long to wait before attempting to peek again (default is 10.0)
    CCF_STRAFE_WHEN_MOVING_CHANCE,		// A chance to strafe to cover, range is 0.0-1.0 (0.0 will force them to run, 1.0 will force strafe and shoot, default is 1.0)
    CCF_WEAPON_ACCURACY,				// default is 0.4
    CCF_FIGHT_PROFICIENCY,				// How well an opponent can melee fight, range is 0.0-1.0 (default is 0.5)
    CCF_WALK_WHEN_STRAFING_CHANCE,		// The possibility of a ped walking while strafing rather than jog/run, range is 0.0-1.0 (default is 0.0)
    CCF_HELI_SPEED_MODIFIER,			// The speed modifier when driving a heli in combat
    CCF_HELI_SENSES_RANGE,				// The range of the ped's senses (sight, identification, hearing) when in a heli
    CCF_ATTACK_WINDOW_DISTANCE_FOR_COVER, // The distance we'll use for cover based behaviour in attack windows Default is -1.0 (disabled), range is -1.0 to 150.0
    CCF_TIME_TO_INVALIDATE_INJURED_TARGET,	// How long to stop combat an injured target if there is no other valid target, if target is player in singleplayer
                                            // this will happen indefinitely unless explicitly disabled by setting to 0.0, default = 10.0 range = 0-50
    CCF_MIN_DISTANCE_TO_TARGET,			// Min distance the ped will use if CA_MAINTAIN_MIN_DISTANCE_TO_TARGET is set, default 5.0 (currently only for cover search + usage)
    CCF_BULLET_IMPACT_DETECTION_RANGE,	// The range at which the ped will detect the bullet impact event
    CCF_AIM_TURN_THRESHOLD,				// The threshold at which the ped will perform an aim turn
    CCF_OPTIMAL_COVER_DISTANCE,			//
    CCF_AUTOMOBILE_SPEED_MODIFIER,		// The speed modifier when driving an automobile in combat
	CCF_SPEED_TO_FLEE_IN_VEHICLE,		//
	CCF_TRIGGER_CHARGE_TIME_NEAR,		// How long to wait before charging a close target hiding in cover
	CCF_TRIGGER_CHARGE_TIME_FAR,		// How long to wait before charging a distant target hiding in cover
	CCF_MAX_DISTANCE_TO_HEAR_EVENTS, // Max distance peds can hear an event from, even if the sound is louder
	CCF_MAX_DISTANCE_TO_HEAR_EVENTS_USING_LOS, // Max distance peds can hear an event from, even if the sound is louder if the ped is using LOS to hear events (CPED_CONFIG_FLAG_CheckLoSForSoundEvents)				
	CCF_HOMING_ROCKET_BREAK_LOCK_ANGLE,				// Angle between the rocket and target where lock-on will stop, range is 0.0-1.0, (default is 0.2), the bigger the number the easier to break lock
	CCF_HOMING_ROCKET_BREAK_LOCK_ANGLE_CLOSE,		// Angle between the rocket and target where lock-on will stop, when rocket is within CCF_HOMING_ROCKET_BREAK_LOCK_CLOSE_DISTANCE, range is 0.0-1.0, (default is 0.6), the bigger the number the easier to break lock
	CCF_HOMING_ROCKET_BREAK_LOCK_CLOSE_DISTANCE,	// Distance at which we check CCF_HOMING_ROCKET_BREAK_LOCK_ANGLE_CLOSE rather than CCF_HOMING_ROCKET_BREAK_LOCK_ANGLE
	CCF_HOMING_ROCKET_TURN_RATE_MODIFIER,			// Alters homing characteristics defined for the weapon (1.0 is default, <1.0 slow turn rates, >1.0 speed them up
	CCF_TIME_BETWEEN_AGGRESSIVE_MOVES_DURING_VEHICLE_CHASE,	// Sets the time delay between aggressive moves during vehicle chases. -1.0 means use random values, 0.0 means never
	CCF_MAX_VEHICLE_TURRET_FIRING_RANGE,	// Max firing range for a ped in vehicle turret seat
	CCF_WEAPON_DAMAGE_MODIFIER,				// Multiplies the weapon damage dealt by the ped, range is 0.0-10.0 (default is 1.0)
    MAX_COMBAT_FLOATS
ENDENUM

ENUM PED_SEXINESS_FLAG
    SF_JEER_AT_HOT_PED		= 1,
    SF_JEER_SCENARIO_ANIM	= 2,
    SF_HOT_PERSON			= 4
ENDENUM

// INFO: Ped Parachuting Query States
ENUM PED_PARACHUTE_STATE
    PPS_INVALID		= -1,	// Ped is not in a valid Parachuting state
    PPS_SKYDIVING	= 0,
    PPS_DEPLOYING	= 1,
    PPS_PARACHUTING	= 2,
    PPS_LANDING		= 3
ENDENUM

ENUM PED_PARACHUTE_LANDING_TYPE
	PPLT_INVALID	= -1,
	PPLT_SLOW		= 0,
	PPLT_REGULAR	= 1,
	PPLT_FAST		= 2,
	PPLT_CRASH		= 3,
	PPLT_WATER		= 4
ENDENUM

ENUM FIRING_PATTERN_HASH
    FIRING_PATTERN_BURST_FIRE = -687903391,
    FIRING_PATTERN_BURST_FIRE_DRIVEBY = -753768974,
    FIRING_PATTERN_FULL_AUTO = -957453492,
    FIRING_PATTERN_SINGLE_SHOT = 1566631136,
    FIRING_PATTERN_DELAY_FIRE_BY_ONE_SEC = 2055493265,
    FIRING_PATTERN_BURST_FIRE_HELI = -1857128337,
    FIRING_PATTERN_SHORT_BURSTS = 445831135,
    FIRING_PATTERN_BURST_FIRE_MICRO = 1122960381,
	FIRING_PATTERN_SLOW_FIRE_TANK = -490063247,
	FIRING_PATTERN_TAMPA_MORTAR = -1842093953
ENDENUM

// These can be used to iterate through members of a ped group.  The leader always has the index GROUP_LEADER_INDEX.
// When removing members from a group, the remaining members are *not* shuffled up to occupy the empty slot.
CONST_INT GROUP_MAX_NUM_MEMBERS 8
CONST_INT GROUP_LEADER_INDEX    7

ENUM SPAWNPOINTS_FLAGS
    SPAWNPOINTS_FLAG_DEFAULT										= 0,
    // allow spawn points to be chosen in interiors
    SPAWNPOINTS_FLAG_MAY_SPAWN_IN_INTERIOR							= 1,
    // allow spawn points to be chosen in exterior (main map) locations
    SPAWNPOINTS_FLAG_MAY_SPAWN_IN_EXTERIOR							= 2,
    // allow to choose polygons not marked as "network spawn candidate"
    SPAWNPOINTS_FLAG_ALLOW_NOT_NETWORK_SPAWN_CANDIDATE_POLYS		= 4,
    // allow to choose polygons marked as "isolated"
    SPAWNPOINTS_FLAG_ALLOW_ISOLATED_POLYS							= 8,
    // allow to choose polygons marked as "road"
    SPAWNPOINTS_FLAG_ALLOW_ROAD_POLYS								= 16,
    // only return points which are against navmesh polygon edges
    SPAWNPOINTS_FLAG_ONLY_POINTS_AGAINST_EDGES						= 32
    
ENDENUM

ENUM SPAWNPOINTS_RESULT_FLAGS
	SPAWNPOINTS_RESULT_FLAG_DEFAULT							= 0,
	// spawn point is on pavement
	SPAWNPOINTS_RESULT_FLAG_PAVEMENT						= 1,
	// spawn point is in an interior
	SPAWNPOINTS_RESULT_FLAG_INTERIOR						= 2
ENDENUM

//INFO: Definition of ped components flags
//This needs to match ePedCompFlags in PedVariationDS.h
ENUM PED_COMP_FLAGS
	PV_FLAG_NONE				 =	0, //0,
	PV_FLAG_BULKY				 =	1, //1<<0,
	PV_FLAG_JOB					 = 	2, //1<<1,
	PV_FLAG_SUNNY				 = 	4, //1<<2,
	PV_FLAG_WET					 = 	8, //1<<3,
	PV_FLAG_COLD				 = 	16, //1<<4,
	PV_FLAG_NOT_IN_CAR			 = 	32, //1<<5,
	PV_FLAG_BIKE_ONLY			 =   64, //1<<6,
	PV_FLAG_NOT_INDOORS			 = 	128, //1<<7,
	PV_FLAG_FIRE_RETARDENT		 = 	256, //1<<8,
	PV_FLAG_ARMOURED			 = 	512, //1<<9,
	PV_FLAG_LIGHTLY_ARMOURED	 = 	1024, //1<<10,
	PV_FLAG_HIGH_DETAIL			 = 	2048, //1<<11,
	PV_FLAG_DEFAULT_HELMET		 = 	4096, //1<<12,
	PV_FLAG_RANDOM_HELMET		 = 	8192, //1<<13,
	PV_FLAG_SCRIPT_HELMET		 = 	16384, //1<<14,
	PV_FLAG_FLIGHT_HELMET		 =	32768, //1<<15,
	PV_FLAG_HIDE_IN_FIRST_PERSON =	65536, //1<<16,
	PV_FLAG_USE_PHYSICS_HAT_2	 =	131072,	//1<<17,
	PV_FLAG_PILOT_HELMET		 =	262144	//1<<18,
ENDENUM

//Flags used in 
ENUM PROP_DAMAGE_FLAGS
	PF_CAN_LOSE_PROPS_ON_DAMAGE			= 0,
	PF_ALLOW_HELMET_LOSS_ON_HEADSHOT	= 1
ENDENUM

ENUM HEAD_BLEND_HEAD_TYPE
	HBHT_MALE = 0,
	HBHT_FEMALE,
	HBHT_UNIQUE_MALE,
	HBHT_UNIQUE_FEMALE
ENDENUM

ENUM PED_VISEME_FLAGS
	PVF_NONE = 0, //0
	PVF_ALLOW_VISEME_ANIMS_AUDIO = 1 //1<<0
ENDENUM

ENUM PED_DECORATIONS_STATE
    PDS_IN_PROGRESS = 0,
    PDS_NO_DECORATIONS,
    PDS_READY
ENDENUM

//~><   PED COMMANDS: Create & Delete   ><~

//~>            Ped: Create, Delete -> Ped

//INFO: 
//PARAM NOTES: PED_TYPE is contained in command_ped.sch: RegisterAsNetworkObject set true if creating a network ped.
// 	       RegisterAsNetworkObject:		The new object will be created and synced on other machines if a network game is running
//	       ScriptHostObject:		If true, this object has been created by the host portion of a network script and is vital to that script - it must always exist regardless of who is hosting the script.
//						If false, the object has been created by the client portion of a network script and can be removed when the client who created it leaves the script session.
//PURPOSE: Creates a ped on foot at the specified co-ordinates with heading. More info..
NATIVE FUNC PED_INDEX CREATE_PED (PED_TYPE PedType, MODEL_NAMES PedModelHashKey, VECTOR VecNewCoors, FLOAT fPedHeading = 0.0, BOOL RegisterAsNetworkObject = TRUE, BOOL ScriptHostObject = TRUE) = "0xa8d58c3aada2c41c"

//INFO: 
//PARAM NOTES: PedIndex: The existing ped to clone.
// 	       RegisterAsNetworkObject:	The new object will be created and synced on other machines if a network game is running
//	       ScriptHostObject:		If true, this object has been created by the host portion of a network script and is vital to that script - it must always exist regardless of who is hosting the script.
//									If false, the object has been created by the client portion of a network script and can be removed when the client who created it leaves the script session.
//		   IncludeHeadBlend:		Clones the head blend data (and creates a link between the two peds for it)
//PURPOSE: Creates a new ped by cloning an existing one.
NATIVE FUNC PED_INDEX CLONE_PED(PED_INDEX PedIndex, BOOL bRegisterAsNetworkObject = TRUE, BOOL bScriptHostObject = TRUE, BOOL bLinkBlends = TRUE) = "0x67e4cf00756bc7f7"

//INFO: 
//PARAM NOTES: PedIndex: The existing ped to clone.
// 	       RegisterAsNetworkObject:	The new object will be created and synced on other machines if a network game is running
//	       ScriptHostObject:		If true, this object has been created by the host portion of a network script and is vital to that script - it must always exist regardless of who is hosting the script.
//									If false, the object has been created by the client portion of a network script and can be removed when the client who created it leaves the script session.
//		   IncludeHeadBlend:		Clones the head blend data (and creates a link between the two peds for it)
//		   CloneCompressedDamage:	true=clone shares compressed damage (default), false=clone has no compressed damage
//PURPOSE: Creates a new ped by cloning an existing one.
NATIVE FUNC PED_INDEX CLONE_PED_ALT(PED_INDEX PedIndex, BOOL bRegisterAsNetworkObject = TRUE, BOOL bScriptHostObject = TRUE, BOOL bLinkBlends = TRUE, BOOL bCloneCompressedDamage = TRUE) = "0x951d499767e322eb"

//INFO: 
//PARAM NOTES:	PedIndexSource: The ped instance to copy settings from
//				PedIndexTarget: The ped instance to copy settings to
//PURPOSE: Copies variation and head blend settings from one ped to another.
NATIVE PROC CLONE_PED_TO_TARGET(PED_INDEX PedIndexSource, PED_INDEX PedIndexTarget) = "0xc70fd0e17f3b16a8"

//INFO: 
//PARAM NOTES:	PedIndexSource: The ped instance to copy settings from
//				PedIndexTarget: The ped instance to copy settings to
//		   		CloneCompressedDamage:	true=clone shares compressed damage (default), false=clone has no compressed damage
//PURPOSE: Copies variation and head blend settings from one ped to another.
NATIVE PROC CLONE_PED_TO_TARGET_ALT(PED_INDEX PedIndexSource, PED_INDEX PedIndexTarget, BOOL bCloneCompressedDamage = TRUE) = "0xdb5929d6bd66757d"

//INFO: 
//PARAM NOTES:
//PURPOSE: Removes the PED 
NATIVE PROC REMOVE_PED_ELEGANTLY(PED_INDEX &PedIndex) = "0x56f6ab6eb61767c5"

//~><   PED COMMANDS:  Position Commands    ><~

//~>            Ped: Set, Get -> Ped -> Position, Heading

//INFO: 
//PARAM NOTES:
//PURPOSE: Moves a ped and his vehicle 
NATIVE PROC SET_PED_COORDS_KEEP_VEHICLE(PED_INDEX PedIndex, VECTOR VecNewCoors) = "0xcb8859434b382fcc"

//INFO: 
//PARAM NOTES:
//PURPOSE: Sets the ped coords but if the ped is a gang leader it will not warp the gang.
NATIVE PROC SET_PED_COORDS_NO_GANG(PED_INDEX PedIndex,  VECTOR VecNewCoors) = "0x53abb8c1f2ce7610"

//INFO:
//PARAM NOTES:
//	NewPedPitch: New pitch in degrees. Should be in range -180.0 to 180.0f. Postive pitch makes the ped face the sky
//PURPOSE: 
NATIVE PROC SET_PED_PITCH(PED_INDEX PedIndex, FLOAT NewPedPitch) = "0xb854140f1f7813e8"

//INFO:
//PARAM NOTES:
//	NewPedHeading: New heading in degrees
//	NewPedPitch: New pitch in degrees. Should be in range -180.0 to 180.0f. Postive pitch makes the ped face the sky
//PURPOSE: Combined version of SET_ENTITY_HEADING and SET_PED_PITCH which is faster than calling them seperately
NATIVE PROC SET_PED_HEADING_AND_PITCH(PED_INDEX PedIndex, FLOAT NewPedHeading, FLOAT NewPedPitch) = "0x9ab327b74d84cc1a"

//INFO: 
//PARAM NOTES:
//PURPOSE: Sets the heading the Ped will try to turn too.
NATIVE PROC SET_PED_DESIRED_HEADING(PED_INDEX PedIndex, FLOAT DesiredHeading) = "0x2e9120fd2882e04e"


//INFO: 
//PARAM NOTES:
//PURPOSE: Makes all of the heading values the same, so the ped doesn't attempt to turn.
NATIVE PROC FORCE_ALL_HEADING_VALUES_TO_ALIGN(PED_INDEX PedIndex) = "0x6b15094e523d0487"


//~>            Ped: Set (Warp) -> Ped -> Position


//~>            Ped: Set (Warp) -> Ped -> Vehicle

//INFO: 
//PARAM NOTES: VEHICLE_SEAT enum is in generic.sch
//PURPOSE: Warps a ped onto a mount
NATIVE PROC SET_PED_ONTO_MOUNT(PED_INDEX PedIndex, PED_INDEX MountIndex, VEHICLE_SEAT seat = VS_DRIVER ) = "0xeafc2c540173fb2c"

//INFO: 
//PARAM NOTES: 
//PURPOSE: Warps a ped off its' mount
NATIVE PROC REMOVE_PED_FROM_MOUNT(PED_INDEX PedIndex) = "0xf35937a1d475ddde"

//INFO: 
//PARAM NOTES: 
//PURPOSE: Checks if PedIndex is mounted
NATIVE FUNC BOOL IS_PED_ON_MOUNT(PED_INDEX PedIndex) = "0xa476005b8c3eeaeb"

//INFO: 
//PARAM NOTES:
//PURPOSE:Returns the ped index of the ped this ped is riding
NATIVE FUNC PED_INDEX GET_MOUNT(PED_INDEX PedIndex) = "0xcdb459fbaed2d476"

//INFO: 
//PARAM NOTES: PedIndex (should be a mount), Speed = 0 (stand) ->1.0 (full gallop)
//PURPOSE:Overrides horse speed while rider aims
NATIVE PROC SET_MAX_MOUNT_SPEED_WHILE_AIMING(PED_INDEX PedIndex, FLOAT Speed) = "0x1fe31c699532d0f3"

//INFO: 
//PARAM NOTES:
//PURPOSE:Scale the current mount agitation 
NATIVE PROC SET_MOUNT_AGITATION_SCALE(PED_INDEX PedIndex, FLOAT Scale) = "0x94768def7f2cfb42"

//INFO: 
//PARAM NOTES:
//PURPOSE: Returns true if the ped in a lowrider and using the alternate clipset (arm on window animations).
NATIVE FUNC BOOL IS_PED_USING_LOWRIDER_ALTERNATE_CLIPSET(PED_INDEX PedIndex) = "0xb6f85aec0fb59585"

//INFO: 
//PARAM NOTES:
//PURPOSE:Returns true if the ped is current on (it's ground physical) a vehicle. Example:Standing on the back of a truck or bonnet.
NATIVE FUNC BOOL IS_PED_ON_VEHICLE(PED_INDEX PedIndex) = "0x1f5ae5900921235a"

//INFO: 
//PARAM NOTES:
//PURPOSE:Returns true if the ped is current on (it's ground physical) a specific vehicle. Example:Standing on the back of a truck or bonnet.
NATIVE FUNC BOOL IS_PED_ON_SPECIFIC_VEHICLE(PED_INDEX PedIndex, VEHICLE_INDEX VehicleIndex) = "0x8465e2ab4423b436"

//INFO: 
//PARAM NOTES: VEHICLE_SEAT enum is in generic.sch
//PURPOSE: Sets a Ped into the releveant seat of the given Vehicle. More info..
NATIVE PROC SET_PED_INTO_VEHICLE(PED_INDEX PedIndex, VEHICLE_INDEX VehicleIndex, VEHICLE_SEAT seat = VS_DRIVER ) = "0xa9f390242f9eb2e1"

//INFO: 
//PARAM NOTES: 
//PURPOSE: Allow the ped to be set in vehicles even if the ped's TaskData would otherwise disallow it.
NATIVE PROC SET_PED_ALLOW_VEHICLES_OVERRIDE(PED_INDEX PedIndex, BOOL bOnOff) = "0x5d07a2cf7f265fcb"

//~><   PED COMMANDS: Ped Vehicle Commands  ><~

//~>            Ped: Create -> Ped (in Vehicle) 

//INFO: If any_seat_is passed in the command will assert.
//PARAM NOTES: VEHICLE_SEAT enum is in generic.sch
// 	       RegisterAsNetworkObject:		The new object will be created and synced on other machines if a network game is running
//	       ScriptHostObject:		If true, this object has been created by the host portion of a network script and is vital to that script - it must always exist regardless of who is hosting the script.
//						If false, the object has been created by the client portion of a network script and can be removed when the client who created it leaves the script session.
//PURPOSE: Creates a ped inside at seat number.  More info..
NATIVE FUNC PED_INDEX CREATE_PED_INSIDE_VEHICLE (VEHICLE_INDEX VehicleIndex, PED_TYPE PedType, MODEL_NAMES PedModelHashKey, VEHICLE_SEAT Seat = VS_DRIVER, BOOL RegisterAsNetworkObject = TRUE, BOOL ScriptHostObject = TRUE) = "0x487c17b41938052c"

//~>            Ped: Bool (Is) ->  Ped (in Vehicle) 

//INFO: 
//PARAM NOTES:
//PURPOSE: Checks the ped is getting in/out OR sitting in the specified vehicle. 
NATIVE FUNC BOOL IS_PED_IN_VEHICLE(PED_INDEX PedIndex, VEHICLE_INDEX VehicleIndex, BOOL ConsiderEnteringAsInVehicle = FALSE) = "0xf6f5d18ef8eab859"

//INFO: 
//PARAM NOTES:
//PURPOSE: Checks the ped is getting in/out OR sitting in any vehicle. 
NATIVE FUNC BOOL IS_PED_IN_ANY_VEHICLE(PED_INDEX PedIndex, BOOL ConsiderEnteringAsInVehicle = FALSE) = "0xd5c6b5e3b93a5edc"

//INFO: 
//PARAM NOTES:
//PURPOSE: Checks the ped is sitting the specified vehicle.
NATIVE FUNC BOOL IS_PED_SITTING_IN_VEHICLE(PED_INDEX PedIndex, VEHICLE_INDEX VehicleIndex) = "0x87b449f4c26e764a"

//INFO: 
//PARAM NOTES:
//PURPOSE: Checks the ped is sitting in any vehicle.
NATIVE FUNC BOOL IS_PED_SITTING_IN_ANY_VEHICLE(PED_INDEX PedIndex) = "0x174b84f6b78d6ca7"

//INFO: 
//PARAM NOTES:
//PURPOSE: Checks the ped is getting into a vehicle but not sitting in a vehicle
NATIVE FUNC BOOL IS_PED_GETTING_INTO_A_VEHICLE(PED_INDEX PedIndex) = "0xcede6233b8f49499"

//INFO: 
//PARAM NOTES:
//PURPOSE:  Checks the ped is in the specified model.
NATIVE FUNC BOOL IS_PED_IN_MODEL(PED_INDEX PedIndex, MODEL_NAMES VehicleModelHashKey) = "0xf30a227f7990ae00"

//INFO: 
//PARAM NOTES:
//PURPOSE: Checks that ped is on foot (not in a vehicle)
NATIVE FUNC BOOL IS_PED_ON_FOOT(PED_INDEX PedIndex) = "0x3c7ed37a9fe7c585"

//INFO: 
//PARAM NOTES:
//PURPOSE:  Checks that the ped is in a boat model.
NATIVE FUNC BOOL IS_PED_IN_ANY_BOAT(PED_INDEX PedIndex) = "0xec6430115d7dd916"

//INFO: 
//PARAM NOTES:
//PURPOSE:  Checks that the ped is in a sub model.
NATIVE FUNC BOOL IS_PED_IN_ANY_SUB(PED_INDEX PedIndex) = "0xaff5fd1a82555477"

//INFO: 
//PARAM NOTES:
//PURPOSE: Checks that the ped is in a helicopter model.
NATIVE FUNC BOOL IS_PED_IN_ANY_HELI(PED_INDEX PedIndex) = "0x0f92affde5783870"

//INFO: 
//PARAM NOTES:
//PURPOSE: Checks that the ped is in a plane model.
NATIVE FUNC BOOL IS_PED_IN_ANY_PLANE(PED_INDEX PedIndex) = "0xb73d201873640749"

//INFO: 
//PARAM NOTES:
//PURPOSE: Checks that the ped is in a plane or helicopter model.
NATIVE FUNC BOOL IS_PED_IN_FLYING_VEHICLE(PED_INDEX PedIndex) = "0x17fe501894ed2713"

//INFO: 
//PARAM NOTES:
//PURPOSE: Checks that the ped is in a train model.
NATIVE FUNC BOOL IS_PED_IN_ANY_TRAIN(PED_INDEX PedIndex) = "0x2852e016e0ac134c"

//INFO: 
//PARAM NOTES:
//PURPOSE: Checks that the ped is in a police model.
NATIVE FUNC BOOL IS_PED_IN_ANY_POLICE_VEHICLE(PED_INDEX PedIndex) = "0x79135882170e3d22"

//INFO: 
//PARAM NOTES:
//PURPOSE: Checks that the ped is in a taxi model.
NATIVE FUNC BOOL IS_PED_IN_ANY_TAXI(PED_INDEX PedIndex) = "0x4da360fc7c3cfefa"

//~>			Ped: Area query

//INFO:
//PARAM NOTES:
//PURPOSE: Checks if a cop ped is in a given area
NATIVE FUNC BOOL IS_COP_PED_IN_AREA_3D(VECTOR VecFirstCoors, VECTOR VecSecondCoors) = "0x97d65c0968cfe3af"

//~>            Ped: Get -> Vehicle (Ped is in) 

//INFO: 
//PARAM NOTES:
//PURPOSE: Gets the vehicle that the ped is in or trying to get into.
NATIVE FUNC VEHICLE_INDEX GET_VEHICLE_PED_IS_USING(PED_INDEX PedIndex) = "0xd9bd5965b9552645"

//INFO: 
//PARAM NOTES:
//PURPOSE: Gets the vehicle that the ped is trying to get into.
NATIVE FUNC VEHICLE_INDEX GET_VEHICLE_PED_IS_ENTERING(PED_INDEX PedIndex) = "0x8db5c2d06228df32"

//INFO: 
//PARAM NOTES:
//PURPOSE: Gets the vehicle that the ped is in.
NATIVE FUNC VEHICLE_INDEX GET_VEHICLE_PED_IS_IN(PED_INDEX PedIndex, BOOL ConsiderEnteringAsInVehicle = FALSE) = "0xb3ff0049c1fd38ec"

//INFO:
//PARAM NOTES: PedIndex - the ped should not be currently in a vehicle.
//PURPOSE: Resets the ped's "last vehicle," so they will no longer consider it as the vehicle they just left.  Use this to prevent car stolen events from affecting the ped in some circumstances.
NATIVE PROC RESET_PED_LAST_VEHICLE(PED_INDEX PedIndex) = "0x4731a59f8dc19173"

//INFO:  Unlike RESET_PED_LAST_VEHICLE, the ped can be inside a vehicle when this function is called.
//PARAM NOTES: PedIndex - the ped to have its last vehicle status cleared on next exit
//PURPOSE:  Resets the ped's "last vehicle" as soon as they exit, so they will no longer consider it as the vehicle they just left.  Use this to prevent car stolen events from affecting the ped in some circumstances.
NATIVE PROC RESET_PED_LAST_VEHICLE_ON_EXIT(PED_INDEX PedIndex) = "0x264fe2d874f196fb"

//~><   PED COMMANDS: Ped Active Status Commands    ><~

//~>            Ped: Bool (is) -> Ped (Alive Status) 

//INFO: Cannot give ped tasks if fatally injured.
//PARAM NOTES: 
//PURPOSE: Checks that the ped is going to die. More info..
NATIVE FUNC BOOL IS_PED_FATALLY_INJURED(PED_INDEX PedIndex) = "0xfd478ecfa85a941a"

//INFO:This check should be used on a ped to determine if ped is able to do anything in the game ie run a task.
//The game will assert if to you try to give an injured ped  a task. This command will return true if the ped is dead as well
//The IS_ENTITY_DEAD command should be used only if you want to specifically know that the ped is dead. i.e. remove a blip, set the dead ped coords.
//PARAM NOTES:
//PURPOSE: Checks the ped status is injured. Should be used in the majority of checks on a ped.    More info..
NATIVE FUNC BOOL IS_PED_INJURED(PED_INDEX PedIndex) = "0xf68107c40359970c"

//INFO: This is the official IS_PED_INJURED. Since V considers injured the same as dying a ped will never be "injured"
// The hurt threshold was added and is used to describe peds that are injured enough to limp away or flee.
//PARAM NOTES: PedIndex is a handle to the ped you would like to query
//PURPOSE: Checks the ped status is hurt.
NATIVE FUNC BOOL IS_PED_HURT(PED_INDEX PedIndex) = "0xc96a660f9cab40fc"

//INFO: Cannot give ped tasks if dead or dying. I.e. if the ped is running CTaskDamageDeath.  
//Calling IS_PED_FATALLY_INJURED doesn't necessarily mean that CTaskDamageDeath has started yet
//PARAM NOTES: CheckMeleeDeathFlags, if TRUE IS_PED_DEAD_OR_DYING will return TRUE In the case of doing a paired takedown move before they are running the dead task
//PURPOSE: Checks that the ped is running CTaskDamageDeath
NATIVE FUNC BOOL IS_PED_DEAD_OR_DYING(PED_INDEX PedIndex, BOOL CheckMeleeDeathFlags = TRUE) = "0xe63474311c6e3825"

//INFO: 
//PARAM NOTES: 
//PURPOSE: Checks that the ped is dead, using the same check as the audio conversation system.  This can be used to avoid asserts regarding 
//		conversations failing to play due to dead peds.
NATIVE FUNC BOOL IS_CONVERSATION_PED_DEAD(PED_INDEX PedIndex) = "0xb6f838c7e14ccb73"

//INFO: 
//PARAM NOTES:
//PURPOSE: Checks if the ped is aiming/firing or moving out to aim from cover
NATIVE FUNC BOOL IS_PED_AIMING_FROM_COVER(PED_INDEX PedIndex) = "0x5e057f1d5da0cf01"

//INFO: 
//PARAM NOTES:
//PURPOSE: Checks if the ped is throwing a grenade while still aiming a gun
NATIVE FUNC BOOL IS_PED_THROWING_GRENADE_AND_AIMING_GUN(PED_INDEX PedIndex) = "0x54f3888840c6d4a9"

//INFO: 
//PARAM NOTES:
//PURPOSE: Checks if the ped is reloading
NATIVE FUNC BOOL IS_PED_RELOADING(PED_INDEX PedIndex) = "0xc56f471f53aca87b"

//INFO: 
//PARAM NOTES:
//PURPOSE: Checks if the ped is a player's ped
NATIVE FUNC BOOL IS_PED_A_PLAYER(PED_INDEX PedIndex) = "0x65fab09725e2fe75"

//INFO: 
//PARAM NOTES:
//PURPOSE: Checks if the ped is performing a gundisarm move
NATIVE FUNC BOOL IS_PED_DOING_GUN_DISARM(PED_INDEX PedIndex) = "0x3f86225325ad91b7"

//~>            Ped: Set -> Ped -> Alive Status 

//INFO: This can only be applied to an injured ped
//PARAM NOTES:
//PURPOSE: Sets an injured ped to full health.  More info..
NATIVE PROC REVIVE_INJURED_PED ( PED_INDEX PedIndex ) = "0x38bd4cfc2abd412b"

//INFO: 
//PARAM NOTES:
//PURPOSE: Resurrect a dead ped
NATIVE PROC RESURRECT_PED ( PED_INDEX PedIndex ) = "0x6adb1e9f1234cde6"

//INFO: 
//PARAM NOTES:
//PURPOSE: Sets the ped will die when injured.
NATIVE PROC SET_PED_DIES_WHEN_INJURED(PED_INDEX PedIndex, BOOL bDies) = "0xa5d600c274cc186f"

//INFO: 
//PARAM NOTES:
//PURPOSE: Allows this non-player ped to use weapon blocked behavior.  Help prevent wall penetration!
NATIVE PROC SET_PED_ENABLE_WEAPON_BLOCKING(PED_INDEX PedIndex, BOOL bEnableWeaponBlocking) = "0xd8eae777cf6367dd"

//INFO: 
//PARAM NOTES:
//PURPOSE: Appllies a sniper rifle damage to the ped.
NATIVE PROC EXPLODE_PED_HEAD(PED_INDEX PedIndex, WEAPON_TYPE wtWeapon = WEAPONTYPE_SNIPERRIFLE) = "0x978c27cce53d6781"

//INFO: 
//PARAM NOTES:
//PURPOSE: Sets the ped to die in the vehicle or play a special anim outside the vehicle.
NATIVE PROC SET_PED_DIES_IN_VEHICLE(PED_INDEX PedIndex, BOOL DieInCarFlag) = "0x279e52abb546c567"

//~><   PED COMMANDS: Ped Attribute Commands    ><~

//INFO: 
//PARAM NOTES:
//PURPOSE: Override to allow the pending last damage event flag to get reset without health being set to max. Used for game modes where players are respawned with less than full health which interferes with kill tracking.
// This should be reset back to false when it's no longer needed.
NATIVE PROC SET_PED_HEALTH_PENDING_LAST_DAMAGE_EVENT_OVERRIDE_FLAG(BOOL OverrideValue) = "0xb3352e018d6f89df"

//INFO: 
//PARAM NOTES:
//PURPOSE: Sets the peds max health.
NATIVE PROC SET_PED_MAX_HEALTH(PED_INDEX PedIndex, INT MaxHealth) = "0xd170c822231288fa"

//INFO: 
//PARAM NOTES:
//PURPOSE: Gets the peds max health.
NATIVE FUNC INT GET_PED_MAX_HEALTH(PED_INDEX PedIndex) = "0x3c739e920862f79e"

//~>            Ped: Get, Set(Add) -> Ped -> Armour

//INFO: 
//PARAM NOTES:
//PURPOSE: Get the peds current armour.
NATIVE FUNC INT GET_PED_ARMOUR(PED_INDEX PedIndex) = "0x28e4040be8c027ef"

//INFO: 
//PARAM NOTES:
//PURPOSE: Increments the peds armour
NATIVE PROC ADD_ARMOUR_TO_PED(PED_INDEX PedIndex, INT ArmourToAdd) = "0x4c12922738b94758"

//INFO: 
//PARAM NOTES:
//PURPOSE: Sets the peds armour
NATIVE PROC SET_PED_ARMOUR(PED_INDEX PedIndex, INT Armour) = "0x495f6ebd50bcb090"

//INFO: 
//PARAM NOTES: iPedIndex is a handle to the Ped you would like to query.
//PURPOSE: Gets the Ped's endurance.
NATIVE FUNC INT GET_PED_ENDURANCE(PED_INDEX iPedIndex) = "0x2a8210c428f480cb"

//INFO: 
//PARAM NOTES: iPedIndex is a handle to the Ped you would like to query.
//PURPOSE: Gets the Ped's maximum endurance.
NATIVE FUNC INT GET_PED_MAX_ENDURANCE(PED_INDEX iPedIndex) = "0x5b78f399a98794de"

//INFO: 
//PARAM NOTES: iPedIndex is a handle to the Ped you would like to modify. iNewEndurance should be non-negative.
//PURPOSE: Sets the Ped's endurance.
NATIVE PROC SET_PED_ENDURANCE(PED_INDEX iPedIndex, INT iNewEndurance) = "0xbd123dfbbfb5cbe3"

//INFO: 
//PARAM NOTES: iPedIndex is a handle to the Ped you would like to modify. iNewEndurance should be non-negative.
//PURPOSE: Sets the Ped's maximum endurance.
NATIVE PROC SET_PED_MAX_ENDURANCE(PED_INDEX iPedIndex, INT iNewEndurance) = "0x6fc653d4f3413902"

//~>            Ped: Get -> Ped -> Money 

//INFO: 
//PARAM NOTES:
//PURPOSE: Sets the peds money.
NATIVE PROC SET_PED_MONEY(PED_INDEX PedIndex, INT MoneyToSet) = "0x62bdda84cccf90a9"

//INFO: 
//PARAM NOTES:
//PURPOSE: Gets the ped current money. 
NATIVE FUNC INT GET_PED_MONEY(PED_INDEX PedIndex) = "0x402553675e4bbba9"

//INFO: 
//PARAM NOTES: -1 leaves the vaules unchanged, 0 or greater will sets the new value.
//PURPOSE: Sets the money value of new created peds. More info..
NATIVE PROC SET_MONEY_CARRIED_BY_ALL_NEW_PEDS(INT MoneyToSet) = "0x59533590c072028d"

//INFO: 
//PARAM NOTES: fProbability - between 0 (peds never drop snacks) and 1 (peds always drop snacks)
//			   HealthGiven - the amount of health given by each snack
//PURPOSE: Sets the probability and amount of health d
NATIVE PROC SET_HEALTH_SNACKS_CARRIED_BY_ALL_NEW_PEDS(FLOAT fProbability, INT HealthGiven) = "0x1031302428923cdb"

//~>            Ped: Bool (is) -> Ped -> Movment Status

//INFO: 
//PURPOSE: Sets whether ambient peds drop any money when killed. This is switched off by default in MP.
NATIVE PROC SET_AMBIENT_PEDS_DROP_MONEY(BOOL PedsDropMoney) = "0x97d2605f3900ff11"

//INFO: 
//PURPOSE: Blocks non temp events for ambient peds this frame.  Excludes law enforcement peds.
NATIVE PROC SET_BLOCKING_OF_NON_TEMPORARY_EVENTS_FOR_AMBIENT_PEDS_THIS_FRAME(BOOL Block) = "0x50eb67d38f5d4fd9"

//INFO: 
//PARAM NOTES:
//PURPOSE: Checks if the ped is stood still or in a stationary vehicle. 
NATIVE FUNC BOOL IS_PED_STOPPED(PED_INDEX PedIndex) = "0xeeec05469860b219"

//INFO: 
//PARAM NOTES:
//PURPOSE:  Checks that the ped is ducking
NATIVE FUNC BOOL IS_PED_DUCKING(PED_INDEX PedIndex) = "0xff45c7cd7f890b51"

//INFO: 
//PARAM NOTES:
//PURPOSE: Checks that the ped is swimming. 
NATIVE FUNC BOOL IS_PED_SWIMMING(PED_INDEX PedIndex) = "0xda664493accdbe81"

//INFO: 
//PARAM NOTES:
//PURPOSE: Checks that the ped is swimming under water. 
NATIVE FUNC BOOL IS_PED_SWIMMING_UNDER_WATER(PED_INDEX PedIndex) = "0x35d4f23cb8a63edb"

//~>            Ped: Get, Set-> Ped -> Movment Attribute

//INFO: 
//PARAM NOTES:
//PURPOSE: Sets if the ped is allowed to duck.
NATIVE PROC SET_PED_ALLOWED_TO_DUCK(PED_INDEX PedIndex, BOOL AllowedToDuckFlag) = "0xcd2750dc39e123f3"

//INFO: make sure that SET_PED_ALLOWED_TO_DUCK is set true
//PARAM NOTES:
//PURPOSE: Sets a ped to a ducking pose.  More info..
NATIVE PROC SET_PED_DUCKING (PED_INDEX PedIndex, BOOL bDuck ) = "0xc28a66e18d3390fd"

//INFO: Instructs the game to update ragdoll bounds for animated AI peds for a specified number of frames.
//PARAM NOTES: framesToUpdateBounds gets set as a u16 in code, so make sure that the input value in between 0 and 65535.
//PURPOSE: You should call this at least one frame prior to requesting a bound position or activating a ragdoll from script.
NATIVE PROC REQUEST_RAGDOLL_BOUNDS_UPDATE (PED_INDEX PedIndex, INT framesToUpdateBounds = 10 ) = "0xa265face1aed5794"

//INFO: The default mode for non-player peds is LEG_IK_PARTIAL.
//PARAM NOTES:
//PURPOSE: Sets the allowed IK mode for a ped. More info.. 
NATIVE PROC SET_PED_LEG_IK_MODE(PED_INDEX PedIndex, LEG_IK_MODE nLegIkMode) = "0xd34edb9c1da61c7f"

//INFO: 
//PARAM NOTES:
//PURPOSE: Set the rate of the climb anim rate
NATIVE PROC SET_PED_CLIMB_ANIM_RATE(PED_INDEX PedIndex, FLOAT fRate) = "0x57288dcaa5d1010b"

//INFO: 
//PARAM NOTES:
//PURPOSE: Control AI peds on ladders
NATIVE PROC SET_LADDER_CLIMB_INPUT_STATE(PED_INDEX PedIndex, LADDER_INPUT_STATE nInputState) = "0x1cf0511efc35d2f8"

//INFO: 
//PARAM NOTES:
//PURPOSE: Set the distance that the ped can travel when seated in a vehicle. 
NATIVE PROC SET_SCRIPTED_ANIM_SEAT_OFFSET( PED_INDEX PedIndex, FLOAT fDistance ) = "0x2254bff47f4a5852"

//~>        Ped:  Bool (has, is)-> Ped (Damage Status)

//INFO: 
//PARAM NOTES:  PED_BONETAG can be found in Ped_bonetags.sch
//PURPOSE: Gets the bone that took the last piece of damage. More info..
NATIVE FUNC BOOL GET_PED_LAST_DAMAGE_BONE(PED_INDEX PedIndex, PED_BONETAG &ReturnBoneTag) = "0x7709b2482f29a1bb"

//INFO: 
//PARAM NOTES: MinTime - The time the ped should stay on the ground for (in milliseconds). Use -1 to revert to the default code controlled value.
//PURPOSE: Override the minimum time this ped should stay on the ground for when hit by a stun gun
NATIVE PROC SET_PED_MIN_GROUND_TIME_FOR_STUNGUN( PED_INDEX PedIndex, INT MinTime ) = "0xb4d956c3c9624b6b"

//INFO: 
//PARAM NOTES:
//PURPOSE: Sets a passenger ped will stay in the vehicle when jacked. 
NATIVE PROC SET_PED_STAY_IN_VEHICLE_WHEN_JACKED(PED_INDEX PedIndex, BOOL StayInCarFlag) = "0x4d671450ebb62809"

//~>            Ped: Get, Set-> Ped -> Damage Attribute

//INFO: 
//PARAM NOTES:
//PURPOSE: Reset the 
NATIVE PROC CLEAR_PED_LAST_DAMAGE_BONE(PED_INDEX PedIndex) = "0xe657cd67ef2ecdd3"

//INFO: 
//PARAM NOTES:
//PURPOSE: Applies damage  to the ped, can apply to the body armour as well.
NATIVE PROC APPLY_DAMAGE_TO_PED (PED_INDEX PedIndex, INT Damage, BOOL DamageArmourFlag, ENTITY_INDEX InstigatorIndex = NULL) = "0xad22ea15d9200b6e"

//INFO: 
//PARAM NOTES:
//PURPOSE: Returns the time that the ped was damaged by specified weapon type.
NATIVE FUNC INT GET_TIME_PED_DAMAGED_BY_WEAPON (PED_INDEX PedIndex, WEAPON_TYPE WeaponType) = "0x560e111ab28af995"

//INFO: Call this after has_entity_been_damaged_by_entity if you want to control the ragdoll
//PARAM NOTES:
//PURPOSE: Sets this flag so that script can control the ragdoll for a damaged ped. More info
NATIVE FUNC BOOL SET_SCRIPT_CONTROLLED_RAGDOLL_FLAG_FOR_DAMAGED_PED (PED_INDEX FirstPedIndex, BOOL bForceScriptControlOfRagdoll ) = "0xf0f79acb2596a3be"

//INFO: This function will change the ai weapon damage multiplier
//PARAM NOTES:
//PURPOSE: Applies a damage modifier when ai is inflicting weapon damage
NATIVE PROC SET_AI_WEAPON_DAMAGE_MODIFIER(FLOAT Modifier) = "0xbe16a4f63911dc82"

//INFO: This function will reset the ai weapon damage multiplier
//PARAM NOTES:
//PURPOSE: Resets the damage modifier when ai is inflicting weapon damage
NATIVE PROC RESET_AI_WEAPON_DAMAGE_MODIFIER() = "0xbb76e4e041cf4402"

//INFO: This function will change the ai melee weapon damage multiplier
//PARAM NOTES:
//PURPOSE: Applies a damage modifier when ai is inflicting melee weapon damage
NATIVE PROC SET_AI_MELEE_WEAPON_DAMAGE_MODIFIER(FLOAT Modifier) = "0x74d120c7128bba54"

//INFO: This function will reset the ai melee weapon damage multiplier
//PARAM NOTES:
//PURPOSE: Resets the damage modifier when ai is inflicting melee weapon damage
NATIVE PROC RESET_AI_MELEE_WEAPON_DAMAGE_MODIFIER() = "0xc1a5ea5ad1304e68"

//~>                Ped: Set-> Ped -> Water Attribute

//INFO: 
//PARAM NOTES:
//PURPOSE: Sets whether a ped takes damage in deep water.
NATIVE PROC SET_PED_DIES_IN_WATER(PED_INDEX PedIndex, BOOL DrownsInWaterFlag) = "0x96c405257a1bd81b"

//INFO: 
//PARAM NOTES:
//PURPOSE: Checks whether a ped takes damage in deep water.
NATIVE FUNC BOOL GET_PED_DIES_IN_WATER(PED_INDEX PedIndex) = "0x65671a4fb8218930"

//INFO: 
//PARAM NOTES:
//PURPOSE: Sets whether a ped takes damage in a sinking vehicle
NATIVE PROC SET_PED_DIES_IN_SINKING_VEHICLE(PED_INDEX PedIndex, BOOL DrownsInSinkingVehFlag) = "0x8888993dfeae0d08"

//INFO: 
//PARAM NOTES: fMaxTime = -1 sets a default
//PURPOSE: Sets the duration in seconds that a ped may be in the water before drowning.  More info..
NATIVE PROC SET_PED_MAX_TIME_IN_WATER(PED_INDEX PedIndex, FLOAT fMaxTime) = "0xc8a40a36f093f11c"

//INFO: 
//PARAM NOTES:  fMaxTime = -1 sets as default
//PURPOSE:ets the duration in seconds that a ped may be underwater before drowning.  More info..
NATIVE PROC SET_PED_MAX_TIME_UNDERWATER(PED_INDEX PedIndex, FLOAT fMaxTime) = "0x8ca55705a203c152"

//INFO: 
//PARAM NOTES:
//PURPOSE: Sets whether the ped will die instantly if it finds itself in a body of water. 
NATIVE PROC SET_PED_DIES_INSTANTLY_IN_WATER(PED_INDEX PedIndex, BOOL bDiesInstantly) = "0x157a3b02d5ded24b"


//~><   PED COMMANDS: Ped Combat    ><~

//~>            Ped: Bool (is) -> Ped (Shooting)

//INFO: 
//PARAM NOTES: COMBAT_MOVEMENT are in commands_ped.sch 
//PURPOSE: Set the peds movment type during combat.  More info..
NATIVE PROC SET_PED_COMBAT_MOVEMENT (PED_INDEX PedIndex, COMBAT_MOVEMENT PedCombatMoveType ) = "0x71b502fc2e129665"

//INFO: 
//PARAM NOTES:
//PURPOSE: Get the current type of combat movement
NATIVE FUNC COMBAT_MOVEMENT  GET_PED_COMBAT_MOVEMENT (PED_INDEX PedIndex) = "0x88f1bf35930e9b1d"

//INFO: Combat ability is how quickly the ped responds in combat.
//PARAM NOTES: COMBAT_ABILITY_LEVEL are in commands_ped.sch 
//PURPOSE: Set the peds combat level.  More info..
NATIVE PROC SET_PED_COMBAT_ABILITY (PED_INDEX PedIndex, COMBAT_ABILITY_LEVEL PedCombatAbilityType) = "0x395228f7a14c6543"

//INFO: 
//PARAM NOTES:
//PURPOSE: Get the peds combat ability.
NATIVE FUNC COMBAT_ABILITY_LEVEL GET_PED_COMBAT_ABILITY (PED_INDEX PedIndex) = "0x88534ad73a83cc68"

//INFO: 
//PARAM NOTES:  COMBAT_RANGE are in commands_ped.sch 
//PURPOSE: Sets the range that the ped will combat the target.  More info..
NATIVE PROC SET_PED_COMBAT_RANGE (PED_INDEX PedIndex,  COMBAT_RANGE CombatRange ) = "0x3dab02aac9e9ec02"

//INFO: 
//PARAM NOTES: 
//PURPOSE: Gets the current range that the ped will engage the targets during combat.  More info..
NATIVE FUNC COMBAT_RANGE   GET_PED_COMBAT_RANGE (PED_INDEX PedIndex) = "0x3e5fa83d8cbed3e6"

//INFO: 
//PARAM NOTES: COMBAT_ATTRIBUTES are in commands_ped.sch 
//PURPOSE: Activate or deactivate the combat attributes, flags can be or'ed together.  More info..
NATIVE PROC SET_PED_COMBAT_ATTRIBUTES (PED_INDEX PedIndex, COMBAT_ATTRIBUTE CombatAttribute, BOOL bActiveSkill) = "0xbc12d08ee7559ccd"


//INFO: 
//PARAM NOTES: COMBAT_INFO_TYPE are in commands_ped.sch 
//PURPOSE: Set the peds combat info to a predefined set.  More info..
NATIVE PROC SET_PED_COMBAT_INFO (PED_INDEX PedIndex, COMBAT_INFO_TYPE CombatInfoHash) = "0x10d97a69d88d734a"

//INFO: 
//PARAM NOTES: COMBAT_TARGET_LOSS_RESPONSE are in commands_ped.sch 
//PURPOSE: Set the peds target loss response
NATIVE PROC SET_PED_TARGET_LOSS_RESPONSE (PED_INDEX PedIndex, COMBAT_TARGET_LOSS_RESPONSE TargetLossResponse) = "0x7dcb4594acf18da7"

//INFO: 
//PURPOSE: Whether or not the designated ped is currently performing any type of melee action (attack, block, stealth kill, takedown, dodge, etc)
NATIVE FUNC BOOL IS_PED_PERFORMING_MELEE_ACTION(PED_INDEX PedIndex) = "0x1e6abfb33bdd2a4c"

//INFO: 
//PURPOSE: Whether or not the designated ped is currently performing a stealth kill
NATIVE FUNC BOOL IS_PED_PERFORMING_STEALTH_KILL(PED_INDEX PedIndex) = "0x06ff19e64d0c2827"

//INFO: 
//PURPOSE: Whether or not the designated ped is currently performing a block
NATIVE FUNC BOOL IS_PED_PERFORMING_A_BLOCK(PED_INDEX PedIndex) = "0xd79e249683ab2e3f"

//INFO:
//PURPOSE: Whether or not the designated ped is currently performing a counter attack.
NATIVE FUNC BOOL IS_PED_PERFORMING_A_COUNTER_ATTACK(PED_INDEX PedIndex) = "0x7ab6ed2ef9dc2f84"

//INFO: 
//PURPOSE: Whether or not the designated ped is currently being killed by a melee stealth action
NATIVE FUNC BOOL IS_PED_BEING_STEALTH_KILLED(PED_INDEX PedIndex) = "0x4b7e6e16d3345fe8"

//INFO: 
//PURPOSE: Get melee target for ped (if in a reaction or stealth kill, this includes attacker).
NATIVE FUNC PED_INDEX GET_MELEE_TARGET_FOR_PED(PED_INDEX PedIndex) = "0xeba91bc1f5199cbc"

//INFO: 
//PARAM NOTES: STEALTH_ATTRIBUTES are in commands_ped.sch 
//PURPOSE: Activate or deactivate the stealth attributes, flags can be or'ed together.  More info..
NATIVE PROC SET_PED_STEALTH_ATTRIBUTES (PED_INDEX PedIndex, STEALTH_ATTRIBUTE StealthAttribute, BOOL bActiveSkill) = "0x6c6e2f291d259049"

//INFO: 
//PARAM NOTES:
//PURPOSE: Checks if a ped was killed by stealth. 
NATIVE FUNC BOOL WAS_PED_KILLED_BY_STEALTH(PED_INDEX PedIndex) = "0xe573aca59d8c5c18"

//INFO: 
//PARAM NOTES:
//PURPOSE: Checks if a ped was killed by melee takedown. 
NATIVE FUNC BOOL WAS_PED_KILLED_BY_TAKEDOWN(PED_INDEX PedIndex) = "0xed41aac94202b65c"

//INFO: 
//PARAM NOTES:
//PURPOSE: Checks if a ped was knocked out from regular melee
NATIVE FUNC BOOL WAS_PED_KNOCKED_OUT(PED_INDEX PedIndex) = "0x9936e299ab236ef3"

//INFO: 
//PARAM NOTES: FLEE_ATTRIBUTES are in commands_ped.sch 
//PURPOSE: Activate or deactivate the flee attributes, flags can be or'ed together.  More info..
NATIVE PROC SET_PED_FLEE_ATTRIBUTES (PED_INDEX PedIndex, FLEE_ATTRIBUTE FleeAttribute, BOOL bActiveSkill) = "0xdc6110e0f8ff9da0"

//INFO: 
//PARAM NOTES: CowerScenarioName can currently be either CODE_HUMAN_STAND_COWER or CODE_HUMAN_COWER.
//PURPOSE: Override the ped's default cowering hash.  
NATIVE PROC SET_PED_COWER_HASH(PED_INDEX PedIndex, STRING CowerScenarioName) = "0x4f93378a3f279d8b"

//INFO: 
//PARAM NOTES: Default value is a 3D locate
//PURPOSE: Checks that a ped is shooting in an area.  More info..
NATIVE FUNC BOOL IS_PED_SHOOTING_IN_AREA(PED_INDEX PedIndex, VECTOR vMin, VECTOR vMax, BOOL HighlightArea, BOOL bDo3DCheck = true) = "0x955815b1a675a225"

//INFO: 
//PARAM NOTES :Default value is a 3D locate
//PURPOSE: Checks that any peds are shooting in the area.  More info..
NATIVE FUNC BOOL IS_ANY_PED_SHOOTING_IN_AREA(VECTOR vMin, VECTOR vMax, BOOL HighlightArea, BOOL bDo3DCheck = true ) = "0x7f97ee72f87f3234"

//INFO: 
//PARAM NOTES:
//PURPOSE: Checks that a ped is shooting
NATIVE FUNC BOOL IS_PED_SHOOTING(PED_INDEX PedIndex) = "0xe323e6755636a70e"

//INFO: 
//PARAM NOTES:
//PURPOSE: Gets the VEHICLE_SEAT the ped is trying to enter 
NATIVE FUNC INT GET_SEAT_PED_IS_TRYING_TO_ENTER(PED_INDEX PedIndex) = "0xab51590a27ee5f98"

//INFO: 
//PARAM NOTES:
//PURPOSE: Gets the target vehicle index the ped is trying to enter. Return 0 for invalid target vehicle.  
NATIVE FUNC INT GET_VEHICLE_PED_IS_TRYING_TO_ENTER(PED_INDEX PedIndex) = "0x6fb52092269a5c69"

//INFO: 
//PARAM NOTES:
//PURPOSE: Retrieves the index of the entity that killed the ped.
NATIVE FUNC ENTITY_INDEX GET_PED_SOURCE_OF_DEATH(PED_INDEX PedIndex) = "0xdb73c91f09bb8060"

//INFO: 
//PARAM NOTES:
//PURPOSE: Retrieves the weapon that killed the ped.
NATIVE FUNC WEAPON_TYPE GET_PED_CAUSE_OF_DEATH(PED_INDEX PedIndex) = "0x91947acf8b072be2"

//INFO: 
//PARAM NOTES:
//PURPOSE: Retrieves the time of death for the ped.
NATIVE FUNC INT GET_PED_TIME_OF_DEATH(PED_INDEX PedIndex) = "0xafa8dfb27e0b49a3"

//INFO: 
//PARAM NOTES:
//PURPOSE: Retrieves the number of peds that are currently in combat (using TASK_COMBAT) with the target
NATIVE FUNC INT COUNT_PEDS_IN_COMBAT_WITH_TARGET(PED_INDEX TargetIndex) = "0xbe961a177a9ec01c"

//INFO: 
//PARAM NOTES:
//PURPOSE: Retrieves the number of peds that are currently in combat (using TASK_COMBAT) with the target within the given sphere
NATIVE FUNC INT COUNT_PEDS_IN_COMBAT_WITH_TARGET_WITHIN_RADIUS(PED_INDEX TargetIndex, VECTOR vecSearchCenter, FLOAT fSearchRadius) = "0xca0ed3b082a9c834"


//~>            Ped: Set -> Ped -> Shooting (at Vector)

//INFO: 
//PARAM NOTES:
//PURPOSE: Checks that a ped is planting c4
NATIVE FUNC BOOL IS_PED_PLANTING_C4(PED_INDEX PedIndex) = "0x19332eb633bc7494"


//INFO: 
//PARAM NOTES:
//PURPOSE: Checks that a ped is planting a bomb
NATIVE FUNC BOOL IS_PED_PLANTING_BOMB(PED_INDEX PedIndex) = "0x3da4842fa4407be2"

//INFO: 
//PARAM NOTES:
//PURPOSE: Shoots a ped weapon at a coord
NATIVE PROC SET_PED_SHOOTS_AT_COORD(PED_INDEX PedIndex, VECTOR vecTarget, BOOL bPerfectAccuracy = FALSE) = "0x53af46d2ef908a45"

//~>            Ped: Bool (is) -> Ped -> Combat (Active)

//INFO: 
//PARAM NOTES:
//PURPOSE: Checks if the ped is in combat, if a target ped index is provided, 
// it will return true if the ped is in combat with the target ped, false otherwise
NATIVE FUNC BOOL IS_PED_IN_COMBAT(PED_INDEX PedIndex, PED_INDEX TargetPedIndex = NULL) = "0xced7266bab0bdc20"

//INFO: 
//PARAM NOTES:
//PURPOSE: Return the index of the target ped with which the ped is in combat with.
//  Allow for an optional LoS check to be enforced. Will return 0 if there is no target ped or if the ped is not in TASK_COMBAT
NATIVE FUNC ENTITY_INDEX GET_PED_TARGET_FROM_COMBAT_PED(PED_INDEX PedIndex, BOOL ForceLoSCheck = false) = "0x5c4aaba3e6cebf7f"

//INFO: 
//PARAM NOTES:
//PURPOSE: Checks if the ped can see the target using the targeting system (which won't be active unless combat is)
NATIVE FUNC BOOL CAN_PED_IN_COMBAT_SEE_TARGET(PED_INDEX PedIndex, PED_INDEX TargetPedIndex) = "0xb626e828f46adca7"

//INFO: 
//PARAM NOTES: Returns true if they can trigger a shuffle, also fills out the seat they will shuffle to in TargetShuffleSeat
//PURPOSE: Checks to see if the ped can trigger a manual shuffle to or from a turreted seat (in mp)
NATIVE FUNC BOOL CAN_PED_SHUFFLE_TO_OR_FROM_TURRET_SEAT(PED_INDEX PedIndex, INT& TargetShuffleSeat) = "0x127ebfada96eb575"

//INFO: 
//PARAM NOTES: Returns true if they can trigger a shuffle, also fills out the seat they will shuffle to in TargetShuffleSeat
//PURPOSE: Checks to see if the ped can trigger a manual shuffle to or from a extra seat (in mp)
NATIVE FUNC BOOL CAN_PED_SHUFFLE_TO_OR_FROM_EXTRA_SEAT(PED_INDEX PedIndex, INT& TargetShuffleSeat) = "0x7aed27c1f71c9044"

//INFO: 
//PARAM NOTES:
//PURPOSE: Returns true if the ped is basically lying on the ground
NATIVE FUNC BOOL IS_PED_PRONE(PED_INDEX PedIndex) = "0xa6bb28cad9fb957e"

//INFO: 
//PARAM NOTES:
//PURPOSE: Checks if the ped is investigating
NATIVE FUNC BOOL IS_PED_INVESTIGATING(PED_INDEX PedIndex) = "0x384f62158a0fb144"

//INFO: 
//PARAM NOTES:
//PURPOSE: Checks if the ped is currently performing the driveby task
NATIVE FUNC BOOL IS_PED_DOING_DRIVEBY(PED_INDEX PedIndex) = "0xd2cf464c6a551325"

//INFO: 
//PARAM NOTES:
//PURPOSE:Checks if the ped is in the process of dragging another ped from a vehicle.
NATIVE FUNC BOOL IS_PED_JACKING(PED_INDEX PedIndex) = "0x706e4529f37489db"

//INFO: 
//PARAM NOTES:
//PURPOSE:Checks if the ped is in the process of being dragged from his vehicle by another ped. 
NATIVE FUNC BOOL IS_PED_BEING_JACKED(PED_INDEX PedIndex) = "0x177106d5e97d1958"

//INFO: 
//PARAM NOTES:
//PURPOSE: Returns whether or not the designated ped is currently being stunned
NATIVE FUNC BOOL IS_PED_BEING_STUNNED(PED_INDEX PedIndex, WEAPON_TYPE WeaponType = WEAPONTYPE_INVALID) = "0x7114c4d8ac9360fe"

//INFO: 
//PARAM NOTES:
//PURPOSE:Returns the ped index of the ped who is jacking the ped specfied
NATIVE FUNC PED_INDEX GET_PEDS_JACKER(PED_INDEX PedIndex) = "0xba67eb7a53262b5b"

//INFO: 
//PARAM NOTES:
//PURPOSE:Returns the ped index of the ped who is being jacked the ped specfied
NATIVE FUNC PED_INDEX GET_JACK_TARGET(PED_INDEX PedIndex) = "0xc5df16431698b381"

//INFO: 
//PARAM NOTES:
//PURPOSE:Checks if the ped is performing any kind of flee task. 
NATIVE FUNC BOOL IS_PED_FLEEING(PED_INDEX PedIndex) = "0x51b334b227ec8042"

//INFO: 
//PARAM NOTES: bLimitToPedsInCoverThatAreIdle = FALSE: if true, then only those that are idle or peeking in cover (e.g. not performing an action) will return TRUE.
//PURPOSE:Checks if the ped is currently behind and using cover. 
NATIVE FUNC BOOL IS_PED_IN_COVER(PED_INDEX PedIndex, BOOL bLimitToPedsInCoverThatAreIdle = FALSE ) = "0x1cfdd57741085128"

//INFO: 
//PARAM NOTES:
//PURPOSE:Checks if the ped is currently facing left in cover. Note you should call IS_PED_IN_COVER first to ensure the ped is
// in cover, this will return false if the ped is not in cover.
NATIVE FUNC BOOL IS_PED_IN_COVER_FACING_LEFT(PED_INDEX PedIndex) = "0x40ae5496b9b55629"

//INFO: 
//PARAM NOTES:
//PURPOSE: Checks if the ped is currently in high cover, will return false if in low cover.
// This will also return false and assert if the ped is not in cover at all, so you should call IS_PED_IN_COVER first.
NATIVE FUNC BOOL IS_PED_IN_HIGH_COVER(PED_INDEX PedIndex) = "0x61926d906e949cee"

//INFO: 
//PARAM NOTES:
//PURPOSE:Checks if the ped is currently going into cover. 
NATIVE FUNC BOOL IS_PED_GOING_INTO_COVER(PED_INDEX PedIndex) = "0xd2fb3e2f21b617df"

//INFO: 
//PARAM NOTES: bPinned = FALSE: prevents the ped from getting pinned down for Time milliseconds.
//PURPOSE: Sets the ped to be pinned down for Time milliseconds.  More info..
NATIVE FUNC BOOL SET_PED_PINNED_DOWN(PED_INDEX PedIndex, BOOL bPinned, INT Time ) = "0x1fefcd675975f510"

//INFO: 
//PARAM NOTES:
//PURPOSE: Checks if any peds that hate the ped passed are in the area defined by sphere with vCentre and radius
NATIVE FUNC BOOL IS_PED_IN_SPHERE_AREA_OF_ANY_ENEMY_PEDS (PED_INDEX PedIndex, VECTOR vCentre, FLOAT radius) = "0x5e6af58339f55e67"

//~>            Ped Perception

//INFO: 
//PARAM NOTES: Seeing: default is 60m
//PURPOSE:This command sets how far a ped can see. More info in wiki.
NATIVE PROC SET_PED_SEEING_RANGE(PED_INDEX PedIndex, FLOAT SeeingRange) = "0xe014ff3c785eefb5"

//INFO: 
//PARAM NOTES: Seeing: default is 60m
//PURPOSE:This command sets how far a ped can hear. More info in wiki.
NATIVE PROC SET_PED_HEARING_RANGE(PED_INDEX PedIndex, FLOAT HearingRange) = "0x5c9d9a4ea475f37e"

//INFO: 
//PARAM NOTES: IdentificationRange: default is 20m
//PURPOSE:This command sets how far away a ped can identify the ped (as a friend/enemy etc)
// E.g. If a ped spots a ped outside of the id range and can investigate suspicious peds.
NATIVE PROC SET_PED_ID_RANGE(PED_INDEX PedIndex, FLOAT IdRange) = "0xd9c790c4ce748354"

//INFO:
//PARAM NOTES:
//PURPOSE: This command will make the ped more perceptive in the peripheral areas. This will increase the peds FOV and give
// an extended peripheral range
NATIVE PROC SET_PED_HIGHLY_PERCEPTIVE(PED_INDEX PedIndex, BOOL bHighlyPerceptive) = "0x25d0f99524b26091"

//INFO:
//PARAM NOTES:	If an angle or distance param is overridden, that value will be used instead of the ped's default value.
//				The angles should be given in degrees.
//PURPOSE: To check if a target ped is within a given ped's perception area (defined by an angle and distance)
NATIVE FUNC BOOL IS_TARGET_PED_IN_PERCEPTION_AREA(PED_INDEX PedIndex, PED_INDEX TargetPedIndex, FLOAT fFocusAngle = -1.0, FLOAT fFocusDistance = -1.0, FLOAT fPeripheralAngle = -1.0, FLOAT fPeripheralDistance = -1.0) = "0x3fff32ad6436ad9f"


// VISUAL_FIELD commands
// Please refer to "Perception" on the wiki: https://devstar.rockstargames.com/wiki/index.php/Perception

//PURPOSE: Sets the MIN/MAX horizontal field of view for the ped.
NATIVE PROC SET_PED_VISUAL_FIELD_MIN_ANGLE(PED_INDEX PedIndex, FLOAT fAngle) = "0xa4e1b9926df4a312"
NATIVE PROC SET_PED_VISUAL_FIELD_MAX_ANGLE(PED_INDEX PedIndex, FLOAT fAngle) = "0xfcc8ae1090ba5929"

//PURPOSE: Sets the MIN/MAX vertical field of view for the ped.
NATIVE PROC SET_PED_VISUAL_FIELD_MIN_ELEVATION_ANGLE(PED_INDEX PedIndex, FLOAT fAngle) = "0x3adf13534ad69560"
NATIVE PROC SET_PED_VISUAL_FIELD_MAX_ELEVATION_ANGLE(PED_INDEX PedIndex, FLOAT fAngle) = "0xbf15d9e4f14faa97"

//PURPOSE: Sets how far the perhiperal vision extends
NATIVE PROC SET_PED_VISUAL_FIELD_PERIPHERAL_RANGE(PED_INDEX PedIndex, FLOAT fDistance) = "0x52ea1154d214bfb6"

//PURPOSE: Defines the central angle
NATIVE PROC SET_PED_VISUAL_FIELD_CENTER_ANGLE(PED_INDEX PedIndex, FLOAT fAngle) = "0xed676e22a51c1922"

//PURPOSE: Retrieves the MIN/MAX horizontal field of view for the ped.
NATIVE FUNC FLOAT GET_PED_VISUAL_FIELD_MIN_ANGLE(PED_INDEX PedIndex) = "0x5b716d955c95d1b7"
NATIVE FUNC FLOAT GET_PED_VISUAL_FIELD_MAX_ANGLE(PED_INDEX PedIndex) = "0xca772418d64e1dec"

//PURPOSE: Retrieves the MIN/MAX vertical field of view for the ped.
NATIVE FUNC FLOAT GET_PED_VISUAL_FIELD_MIN_ELEVATION_ANGLE(PED_INDEX PedIndex) = "0x256a13f02de38068"
NATIVE FUNC FLOAT GET_PED_VISUAL_FIELD_MAX_ELEVATION_ANGLE(PED_INDEX PedIndex) = "0xf9f29f128bef1a03"

//PURPOSE: Retrieves how far the perhiperal vision extends
NATIVE FUNC FLOAT GET_PED_VISUAL_FIELD_PERIPHERAL_RANGE(PED_INDEX PedIndex) = "0x2cc53e28af6b7801"

//PURPOSE: Retrieves the central angle
NATIVE FUNC FLOAT GET_PED_VISUAL_FIELD_CENTER_ANGLE(PED_INDEX PedIndex) = "0xcdf7d279e6f9a247"

//INFO:
//PARAM NOTES:	fSeeingRange: how far away a ped can identify the ped (default on foot: 60.0f, in car/boat: 90.0f, heli: 150.0f).
//				fSeeingRangePeripheral: how far the perhiperal vision extends (doesn't affect rendered cone blip).
//				fHearingRange: how far a ped can hear (default on foot: 60.0f, in car/boat: 90.0f, heli: 150.0f) (doesn't affect rendered cone blip).
//				fMinAzimuthAngle: MIN horizontal field of view for the ped (doesn't affect rendered cone blip).
//				fMaxAzimuthAngle: MAX horizontal field of view for the ped (doesn't affect rendered cone blip).
//				fCentreOfGazeMaxAngle: Defines the central angle.
//				fRearViewSeeingRangeOverride: Override rear view mirror perception range (when in vehicle). Will use default range (fSeeingRange) if set to -1.0f.
//				More info on all of these params in the wiki.
//PURPOSE:	Allows script to override the cop perception parameters. This affects all code-spawned, non-mission cops. Parameters will not be overridden if left at their default values (these are the standard values already used by cops).
//			NOTE: This command must be called every frame!
NATIVE PROC SET_COP_PERCEPTION_OVERRIDES(FLOAT fSeeingRange = 60.0, FLOAT fSeeingRangePeripheral = 5.0, FLOAT fHearingRange = 60.0, FLOAT fMinAzimuthAngle = -90.0, FLOAT fMaxAzimuthAngle = 90.0, FLOAT fCentreOfGazeMaxAngle = 60.0, FLOAT fRearViewSeeingRangeOverride = -1.0) = "0x1b5e738a60ec68fd"


//~>            Ped: Set -> Ped -> Combat Attributes

//INFO: Use this to force the ped to use the injured on ground nm behaviour when he dies (note, a headshot will still override this currently).
//PARAM NOTES: duration : the amount of time the ped will lie injured on the ground before dying
//PURPOSE:	This command overrides the random injured on ground behavior on the provided ped. More info...	
NATIVE PROC SET_PED_INJURED_ON_GROUND_BEHAVIOUR(PED_INDEX PedIndex, FLOAT duration) = "0xb9a5ec462968ebc8"

//INFO: 
//PARAM NOTES: 
//PURPOSE:	This will suppress the automatic switch to a lower ragdoll LOD when switching to the ragdoll frame after dying
NATIVE PROC SET_SUPPRESS_LOW_RAGDOLL_LOD_SWITCH_UPON_DEATH(PED_INDEX PedIndex) = "0x6d46b580c03aa602"

//INFO: 
//PARAM NOTES:
//PURPOSE:	Removes the forced injured on ground duration added by SET_PED_INJURED_ON_GROUND_BEHAVIOUR above
NATIVE PROC CLEAR_PED_INJURED_ON_GROUND_BEHAVIOUR(PED_INDEX PedIndex) = "0x8df094b6a61fb30d"

//INFO: Use this to disable the injured on ground nm behaviour when he dies (note, a headshot will still override this currently).
//PURPOSE:	This command overrides the random injured on ground behavior on the provided ped. More info...	
NATIVE PROC DISABLE_PED_INJURED_ON_GROUND_BEHAVIOUR(PED_INDEX PedIndex) = "0x5e15b2064a26e398"

//INFO: 
//PARAM NOTES:
//PURPOSE:	Removes the forced injured on ground duration added by SET_PED_INJURED_ON_GROUND_BEHAVIOUR above
NATIVE PROC CLEAR_DISABLE_INJURED_ON_GROUND_BEHAVIOUR(PED_INDEX PedIndex) = "0x872acebf055afa1c"

//INFO: 
//PARAM NOTES:
//PURPOSE:This command sets whether the ped will use stealthy movement
NATIVE PROC SET_PED_STEALTH_MOVEMENT(PED_INDEX PedIndex, BOOL bStealth, STRING MovementModeName = NULL) = "0x42a972967c73ab48"

//INFO: 
//PARAM NOTES:
//PURPOSE:This command gets whether the ped is using stealthy movement
NATIVE FUNC BOOL GET_PED_STEALTH_MOVEMENT(PED_INDEX PedIndex) = "0x6abfd2a0b56d6940"

//INFO: 
//PARAM NOTES: NewAccuracy: Combat decision maker will override this value, call after SET_COMBAT_DM
//PURPOSE: Sets the peds shooting accuracy, between 0 to 100.  More info..
NATIVE PROC SET_PED_ACCURACY(PED_INDEX PedIndex, INT NewAccuracy) = "0x348a212511c78dbf"

//INFO: 
//PARAM NOTES:
//PURPOSE: Gets the peds shooting accuracy, between 0 to 100. Returns -1 if ped doesn't exist.
NATIVE FUNC INT GET_PED_ACCURACY(PED_INDEX PedIndex) = "0x2bdd0f473c8ec3f7"

//INFO:
//PARAM NOTES:
//PURPOSE: Sets global ambient law ped accuracy modifier (only works in MP). Need to call this every frame, otherwise it's going to rever to default value
NATIVE PROC SET_AMBIENT_LAW_PED_ACCURACY_MODIFIER(FLOAT fNewAccuracy) = "0x22fb1e5c91b2ed92"

//INFO: 
//PARAM NOTES:
//PURPOSE: Sets if a healthy character can be killed by a single bullet (e.g. head shot)
NATIVE PROC SET_PED_SUFFERS_CRITICAL_HITS(PED_INDEX PedIndex, BOOL SuffersCriticalHitsFlag) = "0x40a4fa5c4b5da318"

//INFO: 
//PARAM NOTES:
//PURPOSE: Don't allow full body damage (e.g. fall over anims).
NATIVE PROC SET_PED_UPPER_BODY_DAMAGE_ONLY(PED_INDEX PedIndex, BOOL EnableUpperBodyDamageOnly) = "0xd5bc529fc7a9f778"

//INFO: 
//PARAM NOTES:
//PURPOSE: Sets if a character can be killed while in a vehicle
NATIVE PROC SET_PED_CAN_BE_SHOT_IN_VEHICLE(PED_INDEX PedIndex, BOOL CanBeShotInVehicleFlag) = "0xf3d629af368d6be8"

//INFO: 
//PARAM NOTES:
//PURPOSE: Treats ped as ambient ped for driver lock on tests (e.g. mission peds we don't want to lock on to).
NATIVE PROC SET_TREAT_AS_AMBIENT_PED_FOR_DRIVER_LOCKON(PED_INDEX PedIndex, BOOL bTreatAsAmbientPed) = "0x1a9e4c03ab189860"

//INFO: 
//PARAM NOTES:
//PURPOSE: Sets if a ped can be targetted.
NATIVE PROC SET_PED_CAN_BE_TARGETTED(PED_INDEX PedIndex, BOOL bAllowTargetted) = "0xa7266a50941dbaea"

//INFO: 
//PARAM NOTES:
//PURPOSE: Sets if a ped can be targetted by a specific team (network game only)
NATIVE PROC SET_PED_CAN_BE_TARGETTED_BY_TEAM(PED_INDEX PedIndex, INT team, BOOL bAllowTargetted) = "0x77d9bf25dcfb8b50"

//INFO: 
//PARAM NOTES:
//PURPOSE: Sets if a ped can be targetted by a specific player (network game only)
//PARAMS
//  PedIndex - Can be the local player index or the ped index of a local owned ped.
//  PlayerIndex   - Any other player index.
NATIVE PROC SET_PED_CAN_BE_TARGETTED_BY_PLAYER(PED_INDEX PedIndex, PLAYER_INDEX PlayerIndex, BOOL bAllowTargetted) = "0x55f28eb0406b14e5"

//INFO: 
//PARAM NOTES:
//PURPOSE: Sets if a ped can be targetted.
NATIVE PROC SET_ALLOW_LOCKON_TO_PED_IF_FRIENDLY(PED_INDEX PedIndex, BOOL bLockOn) = "0x37c6bc02ba3df98b"

//INFO: 
//PARAM NOTES:
//PURPOSE: Force use camera for lock on test
NATIVE PROC SET_USE_CAMERA_HEADING_FOR_DESIRED_DIRECTION_LOCK_ON_TEST(PED_INDEX PedIndex, BOOL bUseCameraHeading) = "0x82ec99aeec5eef51"

//INFO: 
//PARAM NOTES:
//PURPOSE: Sets a peds alertness state
NATIVE PROC SET_PED_ALERTNESS(PED_INDEX PedIndex, ALERTNESS_STATE AlertState) = "0x0aebdb297e8270b8"

//INFO: 
//PARAM NOTES:
//PURPOSE: Set whether hands should be cuffed when ragdolling
NATIVE PROC SET_ENABLE_HANDCUFFS(PED_INDEX PedIndex, BOOL bEnable) = "0xa1b68dbb639cafd5"

//INFO: 
//PARAM NOTES:
//PURPOSE: Set whether ankles should be cuffed when ragdolling
NATIVE PROC SET_ENABLE_BOUND_ANKLES(PED_INDEX PedIndex, BOOL bEnable) = "0xa8921dc376420b57"

//INFO: 
//PARAM NOTES:
//PURPOSE: Set whether scuba gear is equipped to adjust swimming behavior
NATIVE PROC SET_ENABLE_SCUBA(PED_INDEX PedIndex, BOOL bEnable) = "0xa48f5a9b377b675c"

//INFO: 
//PARAM NOTES: If bChangeTargettingLockOnState is true it will set whether target lock onto friendlies is also changed by bEnable.
//				 This target lock onto friendlies state is cleared at mission clean up. 			
//PURPOSE: Allow peds to attack friendlies
NATIVE PROC SET_CAN_ATTACK_FRIENDLY(PED_INDEX PedIndex, BOOL bEnable, bool bChangeTargettingLockOnState=false) = "0x5457a5652683c8d1"

//INFO: 
//PARAM NOTES:
//PURPOSE: Set if a ped steps or dives out of the way of running peds or moving vehicles
NATIVE PROC SET_PED_CAN_EVASIVE_DIVE (PED_INDEX PedIndex, BOOL bTrue) = "0xb83d9f54c7f8c2be"

//INFO: 
//PARAM NOTES:
//PURPOSE: Returns true if the ped is evasive diving. Gets the entity index of the entity this ped is doing an evasive dive from.
NATIVE FUNC BOOL IS_PED_EVASIVE_DIVING(PED_INDEX PedIndex, ENTITY_INDEX& EntityDivingFromIndex) = "0xa39ec0e5800da66e"

//INFO: 
//PARAM NOTES:  Needs a vlid firing pattern hash, will assert with an invalid one
//PURPOSE: Sets the peds default firing pattern (some tasks will over write this due to specific behaviors like blind fire)
NATIVE PROC SET_PED_FIRING_PATTERN(PED_INDEX PedIndex, FIRING_PATTERN_HASH FiringPatternHash) = "0x8913620f26b565ce"

//INFO: 
//PARAM NOTES:  ShootRate default value = 100
//PURPOSE: ShootRate should be an integer greater than 0.  100 = Normal shoot rate, lower values will slow the rate, higher values will increase it.
NATIVE PROC SET_PED_SHOOT_RATE(PED_INDEX PedIndex, INT ShootRate) = "0xc97ba48bc273a1f3"

//INFO: This is the function that is used to set the majority of combat float attributes, like time between bursts in cover
//		or time betweek peeks, etc. See COMBAT_ATTRIBUTE_FLOATS for information on the default values of each combat float
//PARAM NOTES:	Need to pass in which combat attribute is being set and what the value you are setting it to is
//PURPOSE: To set a variety of combat attributes (floats) using one function
NATIVE PROC SET_COMBAT_FLOAT(PED_INDEX PedIndex, COMBAT_ATTRIBUTE_FLOATS combatAttribute, FLOAT fNewValue) = "0x9dc5ccc4c16546cb"

//INFO: 
//PARAM NOTES: See COMBAT_ATTRIBUTE_FLOATS for information on the default values of each combat float
//PURPOSE: This function will get the value of any of the enum driven combat float attributes
NATIVE FUNC FLOAT GET_COMBAT_FLOAT(PED_INDEX PedIndex, COMBAT_ATTRIBUTE_FLOATS combatAttribute) = "0x275aa1bc4c1cc11e"

//INFO: 
//PARAM NOTES:
//PURPOSE: Registers the passed target as a threat, this target will now be attacked when the ped is in TaskCombat
NATIVE PROC REGISTER_TARGET( PED_INDEX PedIndex, PED_INDEX TargetPedIndex ) = "0xeca3a29060f3b861"

//INFO: 
//PARAM NOTES:
//PURPOSE: Registers the all hated peds in the area as threats, these targets will now be attacked when the ped is in TaskCombat 
NATIVE PROC REGISTER_HATED_TARGETS_IN_AREA( PED_INDEX PedIndex, VECTOR VecCentreCoors, FLOAT Radius ) = "0xd9cae00f126eff8b"

//INFO: 
//PARAM NOTES:
//PURPOSE: Registers the all hated peds near the ped and within the radius as threats, these targets will now be attacked when the ped is in TaskCombat
NATIVE PROC REGISTER_HATED_TARGETS_AROUND_PED( PED_INDEX PedIndex, FLOAT Radius ) = "0xd358d1ba340ce9af"

//INFO: 
//PARAM NOTES:
//PURPOSE: Sets the ped will attack the player only is they have a wanted level.
NATIVE PROC SET_PED_WILL_ONLY_ATTACK_WANTED_PLAYER(PED_INDEX PedIndex, BOOL bTrue) = "0x19399c3895328ec3"

//INFO: 
//PARAM NOTES:
//PURPOSE: Sets an injured ped can be targetted.
NATIVE PROC SET_PED_CAN_BE_TARGETED_WHEN_INJURED (PED_INDEX PedIndex, BOOL bAllowTargetWhenInjured) = "0xb62ee77dcde22747"

//INFO:
//PARAM NOTES:
//PURPOSE: Sets the charge goal position for the next charge this ped executes
NATIVE PROC SET_CHARGE_GOAL_POS_OVERRIDE(PED_INDEX PedIndex, VECTOR OverridePosition) = "0xf1b721825737da78"

//INFO: Please use this sparingly and remember to reset it after use.
//PARAM NOTES:
//PURPOSE: Makes sure cover is loaded around them before a set action. More info.. (Warning)  More info..
NATIVE PROC SET_PED_TO_LOAD_COVER(PED_INDEX PedIndex, BOOL Force) = "0x5d204586f4633d2e"

//INFO: 
//PARAM NOTES:
//PURPOSE:  Sets the ped can peek whilst in cover
NATIVE PROC SET_PED_CAN_PEEK_IN_COVER(PED_INDEX PedIndex, BOOL bAllowPeek) = "0xe317bcb09675f3f8"

//INFO: 
//PARAM NOTES:
//PURPOSE:  Sets the ped can cower whilst in cover
NATIVE PROC SET_PED_CAN_COWER_IN_COVER(PED_INDEX PedIndex, BOOL bAllowCower) = "0x25e8a1cb4046b782"

//INFO: 
//PARAM NOTES:
//PURPOSE:  The ped can be targetted through walls
NATIVE PROC SET_PED_CAN_BE_TARGETED_WITHOUT_LOS(PED_INDEX PedIndex, BOOL bTargetWithoutLos) = "0x6361fa70098d7777"

//INFO: 
//PARAM NOTES:
//PURPOSE: Stops a peds weapon firing when dropped
NATIVE PROC STOP_PED_WEAPON_FIRING_WHEN_DROPPED(PED_INDEX PedIndex) = "0x3261b00df6170ce0"

//INFO: 
//PARAM NOTES:
//PURPOSE: Stops the ped searching for walls and ledges when in Natural motion state for dramtic falls.
NATIVE PROC STOP_PED_DOING_FALL_OFF_TESTS_WHEN_SHOT(PED_INDEX PedIndex) = "0xcfe2c6dc69bde3bc"

//INFO: 
//PARAM NOTES:
//PURPOSE:  Set if a ped can swap weapons
NATIVE PROC SET_PED_CAN_SWITCH_WEAPON(PED_INDEX PedIndex, BOOL bAllowSwitch) = "0xdea78b2c8dacfe9d"

//INFO: 
//PARAM NOTES:
//PURPOSE: Sets if a ped can be dragged out of a vehicle. 
NATIVE PROC SET_PED_CAN_BE_DRAGGED_OUT(PED_INDEX PedIndex, BOOL bAllowDrag) = "0x027bda95c9bd0667"

//INFO: 
//PARAM NOTES:
//PURPOSE: Globally allow hurt combat for mission peds or not
NATIVE PROC SET_PED_ALLOW_HURT_COMBAT_FOR_ALL_MISSION_PEDS(BOOL bEnable) = "0xa4a900de57adff59"

//~>            Ped: Bool (is) -> Ped -> Melee Combat (Attribute)

//INFO: 
//PARAM NOTES:
//PURPOSE:Checks if ped is in melee combat.
NATIVE FUNC BOOL IS_PED_IN_MELEE_COMBAT(PED_INDEX PedIndex) = "0x7a6b8c262362c722"

//INFO: 
//PARAM NOTES:
//PURPOSE: Gets a peds alertness state (returns -1 if invalid)
NATIVE FUNC ALERTNESS_STATE  GET_PED_ALERTNESS(PED_INDEX PedIndex) = "0x44c2858965e93d87"

//INFO: 
//PARAM NOTES:
//PURPOSE: Returns true if hands are intended to be cuffed when ragdolling
NATIVE FUNC BOOL GET_ENABLE_HANDCUFFS(PED_INDEX PedIndex) = "0xc9939a29a72bd813"

//INFO: 
//PARAM NOTES:
//PURPOSE: Returns true if ankles are intended to be cuffed when ragdolling
NATIVE FUNC BOOL GET_ENABLE_BOUND_ANKLES(PED_INDEX PedIndex) = "0x2d778f75373854e6"

//~><   PED COMMANDS: Ped Random 

//~>            Ped: Bool (can) -> Random Ped (create)

//INFO: 
//PARAM NOTES:
//PURPOSE: Call this before trying to create a ped with a random model, to ensure that a model is available
NATIVE FUNC BOOL CAN_CREATE_RANDOM_PED(RANDOM_PED_MODEL Ped_model) = "0xdfc6a9270fbcdbf5"

//INFO: 
//PARAM NOTES:
//PURPOSE:Checks if random cops are allowed
NATIVE FUNC BOOL CAN_CREATE_RANDOM_COPS() = "0x259839223a5768d3"

//~>            Ped: Create -> Random Ped

//INFO: 
//PARAM NOTES:
//PURPOSE: Creates a random ped on foot at the specified co-ordinate
NATIVE FUNC PED_INDEX CREATE_RANDOM_PED(VECTOR VecNewCoors) = "0x25b5b67856bac352"

//INFO: 
//PARAM NOTES:
//PURPOSE: Creates a male character on foot at the specified co-ordinate
//RETURN: PED_INDEX
NATIVE FUNC PED_INDEX CREATE_RANDOM_MALE_PED(VECTOR VecNewCoors) = "0x5dc4fa6a0ea3eb1a"

//INFO: 
//PARAM NOTES:
//PURPOSE: Creates a female character on foot at the specified co-ordinate
NATIVE FUNC PED_INDEX CREATE_RANDOM_FEMALE_PED(VECTOR VecNewCoors) = "0xd0537ac0fbc6eabd"

//INFO: 
//PARAM NOTES:
//PURPOSE: Creates a random ped as the driver of the passed in vehicle.  
NATIVE FUNC PED_INDEX  CREATE_RANDOM_PED_AS_DRIVER(VEHICLE_INDEX VehicleIndex, bool IgnoreDriverRestriction = TRUE) = "0x267eed49988c5a4d"


//INFO: 
//PARAM NOTES:
//PURPOSE: Returns true if there's an available ped model to be spawned as driver
NATIVE FUNC BOOL CAN_CREATE_RANDOM_DRIVER() = "0xa0ec17492f2dbaf9"

//INFO: 
//PARAM NOTES:
//PURPOSE: Returns true if there's an available ped model to be spawned as a bike rider (i.e. has a helmet)
NATIVE FUNC BOOL CAN_CREATE_RANDOM_BIKE_RIDER() = "0x550047660d0241e8"

//INFO: 
//PARAM NOTES:
//PURPOSE: If set to TRUE random peds will treat this ped as dead, reacting shocked.  Ped will still generate dead body events when dead if bTrue is set to false.  This command needs to be renamed.
NATIVE PROC SET_PED_GENERATES_DEAD_BODY_EVENTS(PED_INDEX PedIndex, BOOL bTrue) = "0x1b67ac3e4b05d794"

//INFO:
//PARAM NOTES:
//PURPOSE: If set to TRUE this ped will no longer generate shocking events when dead.
NATIVE PROC BLOCK_PED_FROM_GENERATING_DEAD_BODY_EVENTS_WHEN_DEAD(PED_INDEX PedIndex, BOOL bBlock) = "0xea5bfd518c713c37"


//~>            Ped: Set, Get -> Random Ped (Attributes)

//INFO: 
//PARAM NOTES:
//PURPOSE: Returns the type of the ped 
NATIVE FUNC PED_TYPE  GET_PED_TYPE(PED_INDEX PedIndex) = "0xbe07513d5933d805"

//INFO: 
//PARAM NOTES:
//PURPOSE: Will setup a ped so that they are treated as a cop
NATIVE PROC SET_PED_AS_COP(PED_INDEX PedIndex, BOOL bSetRelationshipGroup = TRUE) = "0x8601ad4e55c81412"

//INFO: *** BEING REMOVED SOON ***
//PARAM NOTES:  DensityMult default = 1.0
//PURPOSE: Set the number of peds on the entire map.
//NATIVE PROC SET_PED_DENSITY_MULTIPLIER(FLOAT DensityMult)

//INFO: *** BEING REMOVED SOON ***
//PARAM NOTES:
//PURPOSE:Set the number of scenario peds on the entire map
//NATIVE PROC SET_SCENARIO_PED_DENSITY_MULTIPLIER(FLOAT fInteriorMult, FLOAT fExteriorMult)

//INFO: 
//PARAM NOTES:  DensityMult default = 1.0
//PURPOSE: Set the number of peds on the entire map.
NATIVE PROC SET_PED_DENSITY_MULTIPLIER_THIS_FRAME(FLOAT DensityMult) = "0x39b76f783934d136"

//INFO: 
//PARAM NOTES:
//PURPOSE:Set the number of scenario peds on the entire map
NATIVE PROC SET_SCENARIO_PED_DENSITY_MULTIPLIER_THIS_FRAME(FLOAT fInteriorMult, FLOAT fExteriorMult) = "0x17f3d11fec5656c2"

//INFO: 
//PARAM NOTES:
//PURPOSE:Suppresses the aggressive off-screen cleanup of non mission peds this frame
NATIVE PROC SUPPRESS_AMBIENT_PED_AGGRESSIVE_CLEANUP_THIS_FRAME() = "0x7bdcf3a4fa45d147"

//INFO: 
//PARAM NOTES:
//PURPOSE: Sets a coord where a scripted conversation can take place.
NATIVE PROC SET_SCRIPTED_CONVERSION_COORD_THIS_FRAME(VECTOR centre) = "0x06c47617fe42768f"

//INFO: 
//PARAM NOTES:
//PURPOSE: now deprecated, use SET_SCRIPTED_CONVERSION_COORD_THIS_FRAME instead
NATIVE PROC SET_SCRIPTED_CONVERSION_COORD(VECTOR centre) = "0x49d23f85e53a927b"

//INFO: 
//PARAM NOTES:
//PURPOSE: now deprecated, use SET_SCRIPTED_CONVERSION_COORD_THIS_FRAME instead
NATIVE PROC CLEAR_SCRIPTED_CONVERSION_COORD() = "0xbd63495bd8693943"

//INFO: 
//PARAM NOTES:
//PURPOSE: Sets an area from which random peds are not removed. 
NATIVE PROC SET_PED_NON_REMOVAL_AREA(VECTOR Min, VECTOR Max) = "0xb0beec8ef4577561"

//INFO: 
//PARAM NOTES:
//PURPOSE: Clears up the area set up by SET_PED_NON_REMOVAL_AREA
NATIVE PROC CLEAR_PED_NON_REMOVAL_AREA() = "0xf8041330f7a7c66b"

//INFO: 
//PARAM NOTES:
//PURPOSE: Sets  an area where peds will not be created
NATIVE PROC SET_PED_NON_CREATION_AREA(VECTOR Min, VECTOR Max) = "0xa8aede296853bb64"

//INFO: 
//PARAM NOTES:
//PURPOSE: Clears the area allowing  peds to be created.
NATIVE PROC CLEAR_PED_NON_CREATION_AREA() = "0x2aa70f35b0b111e6"

//INFO: 
//PARAM NOTES: If CreateRandomCopsFlag is TRUE, cops can be created, if FALSE, they are blocked.
//PURPOSE: Set to stop random cops being created (applies both to cops on scenarios, and in the wandering population).
NATIVE PROC SET_CREATE_RANDOM_COPS(BOOL CreateRandomCopsFlag) = "0x3b8c20ef19a49c3e"

//INFO: 
//PARAM NOTES: If CreateRandomCops is TRUE, cops can be created, if FALSE, they are blocked.
//PURPOSE: Use to stop random cops being created, except for on scenarios. The scenario case is unaffected.
NATIVE PROC SET_CREATE_RANDOM_COPS_NOT_ON_SCENARIOS(BOOL CreateRandomCops) = "0x400c5dcf491aa8cb"

//INFO: 
//PARAM NOTES: If CreateRandomCops is TRUE, cops can be created, if FALSE, they are blocked.
//PURPOSE: Use to stop random cops being created on scenarios. The not on scenario case is unaffected.
NATIVE PROC SET_CREATE_RANDOM_COPS_ON_SCENARIOS(BOOL CreateRandomCops) = "0x3868ab3b4757b449"

//INFO: 
//PARAM NOTES:
//PURPOSE: Sets a ped model type that will not spawn if surpressed.
NATIVE PROC SET_PED_MODEL_IS_SUPPRESSED (MODEL_NAMES PedModelHashKey, BOOL bSurpressModel) = "0x269268ad5d4ca266"

//INFO: 
//PARAM NOTES:
//PURPOSE: Stops surppression of any ped models.
NATIVE PROC STOP_ANY_PED_MODEL_BEING_SUPPRESSED() = "0xbe5f02ccc204fbec"

//INFO:
//PARAM NOTES:
//PURPOSE: Sets a ped model type that is restricted to one, and only one instance
NATIVE PROC SET_PED_MODEL_IS_RESTRICTED(MODEL_NAMES PedModelHashKey, BOOL bRestrictModel) = "0xc8445e031fcac0da"

//INFO:
//PARAM NOTES:
//PURPOSE: Stops restriction of any ped models
NATIVE PROC STOP_ANY_PED_MODEL_BEING_RESTRICTED() = "0xa66c6a56131407c1"

//INFO: 
//PARAM NOTES:
//PURPOSE: Gets a ped index in the given area.
NATIVE FUNC PED_INDEX GET_RANDOM_PED_AT_COORD(VECTOR VecCentreCoors, VECTOR VecLocateDimensions, PED_TYPE ExclusionPedType = PEDTYPE_INVALID) = "0xe66e6fdcd35afafe"

//~><   Ped Anim Commands   ><~ 

// ***DEPRECATED*** 
NATIVE PROC SET_PED_ANIM_GROUP(PED_INDEX PedIndex, STRING AnimGroup ) = "0x15d9e91bda6a2187"
NATIVE PROC RESET_PED_ANIM_GROUP(PED_INDEX PedIndex) = "0x0336fbfb8ce7d29e"
NATIVE PROC FORCE_WEAPON_MOVEMENT_ANIM_GROUP(PED_INDEX PedIndex, STRING AnimGroup ) = "0xd88835d51ef9fed8"
NATIVE PROC RESET_WEAPON_MOVEMENT_ANIM_GROUP(PED_INDEX PedIndex) = "0x3eee594c7289e9a2"
NATIVE PROC SET_PED_ANIM_GROUP_TWO_HANDED(PED_INDEX PedIndex, STRING AnimGroup ) = "0x3b7db4a0597d23fd"
NATIVE PROC RESET_PED_ANIM_GROUP_TWO_HANDED(PED_INDEX PedIndex) = "0x2bfffd8196dadcdd"
NATIVE PROC SET_PED_ANIM_GROUP_STRAFE(PED_INDEX PedIndex, STRING AnimGroup ) = "0x7ca4951f41ed97a4"
NATIVE PROC RESET_PED_ANIM_GROUP_STRAFE(PED_INDEX PedIndex) = "0x8919b36df3167b75"
// ***DEPRECATED*** 

//INFO: If the given ped is currently using a scenario and using anim from the given dictionary and the given base clip
//PARAM NOTES:  
//PURPOSE:
NATIVE FUNC BOOL IS_SCRIPTED_SCENARIO_PED_USING_CONDITIONAL_ANIM(PED_INDEX PedIndex, STRING ConditionalAnimDictName, STRING ConditionalAnimClipName) = "0x1f4534a6b5a5ac67"

//INFO: Makes the ped use a different movement clipset
//      e.g for making a fat ped run faster
//      The default movement clipset is defined in peds.meta under <MovementClipSet>
//      DON'T FORGET to stream in the new clipset before calling this!!
//PARAM NOTES:  
//PURPOSE:
NATIVE PROC SET_PED_MOVEMENT_CLIPSET(PED_INDEX PedIndex, STRING ClipSet, FLOAT BlendDuration = 0.25) = "0xabfc84f5c4943d7b"

//INFO: Resets the movement clipset to the default for the ped type. 
//      The default movement clipset is defined in peds.meta under <MovementClipSet>
//      DON'T FORGET to unstream the clipset if no longer needed!!
//PARAM NOTES:  
//PURPOSE:
NATIVE PROC RESET_PED_MOVEMENT_CLIPSET(PED_INDEX PedIndex, FLOAT BlendDuration = 0.25) = "0x03dd3da99c7ed7d1"

//INFO: Makes the ped use a different movement clip set for strafe/aim movement
//      The default strafe clipset is defined in peds.meta under <StrafeClipSet>
//      DON'T FORGET to stream in the new clipset before calling this!!
//PARAM NOTES:  
//PURPOSE:
NATIVE PROC SET_PED_STRAFE_CLIPSET(PED_INDEX PedIndex, STRING ClipSet ) = "0x1678c93ea5027838"

//INFO: Resets the strafe clipset to the default for the ped type. 
//      The default strafe clipset is defined in peds.meta under <StrafeClipSet>
//      DON'T FORGET to unstream the clipset if no longer needed!!
//PARAM NOTES:  
//PURPOSE:
NATIVE PROC RESET_PED_STRAFE_CLIPSET(PED_INDEX PedIndex) = "0x9e13b6cec9d1713a"

//INFO: Makes the ped use a different movement clip set for injured strafe/aim movement
//      The default strafe clipset is defined in peds.meta under <InjuredStrafeClipSet>
//      DON'T FORGET to stream in the new clipset before calling this!!
//PARAM NOTES:  
//PURPOSE:
//NATIVE PROC SET_PED_INJURED_STRAFE_CLIPSET(PED_INDEX PedIndex, STRING ClipSet )


//INFO: Make the ped use different weapon clipset when walking around. 
//      e.g. calling this with the rifle movement clipset would cause the ped to always walk around as
//		if it were carrying a rifle, regardless of the weapon equipped. Note, this only affects the peds 
//		animation when walking around normally, not when strafing or aiming with the weapon.
//      Weapon movement clipset are defined in weapons.meta
//      DON'T FORGET to stream in the new clipset before calling this!!
//PARAM NOTES: 
//PURPOSE:
NATIVE PROC SET_PED_WEAPON_MOVEMENT_CLIPSET(PED_INDEX PedIndex, STRING ClipSet ) = "0xf31fd609b1e9f297"

//INFO: Make the ped use different driveby clipset. 
//      Be sure to clear the overide with CLEAR_PED_DRIVE_BY_CLIPSET_OVERRIDE when finished!
//      DON'T FORGET to stream in the new clipset before calling this!!
//PARAM NOTES: 
//PURPOSE:
NATIVE PROC SET_PED_DRIVE_BY_CLIPSET_OVERRIDE(PED_INDEX PedIndex, STRING ClipSet ) = "0x187c40514bcb5a8f"

//INFO: Clear this peds different driveby clipset.  Should be called after using SET_PED_DRIVE_BY_CLIPSET_OVERRIDE
//PARAM NOTES: 
//PURPOSE:
NATIVE PROC CLEAR_PED_DRIVE_BY_CLIPSET_OVERRIDE(PED_INDEX PedIndex) = "0x4e03f3499cdd3adc"

//INFO: Make the ped use different motion in cover clipset. 
//      Be sure to clear the overide with CLEAR_PED_MOTION_IN_COVER_CLIPSET_OVERRIDE when finished!
//      DON'T FORGET to stream in the new clipset before calling this!!
//PARAM NOTES: 
//PURPOSE:
NATIVE PROC SET_PED_MOTION_IN_COVER_CLIPSET_OVERRIDE(PED_INDEX PedIndex, STRING ClipSet ) = "0x76fa429844b05aeb"

//INFO: Clear this peds different motion in cover clipset.  Should be called after using SET_PED_MOTION_IN_COVER_CLIPSET_OVERRIDE
//PARAM NOTES: 
//PURPOSE:
NATIVE PROC CLEAR_PED_MOTION_IN_COVER_CLIPSET_OVERRIDE(PED_INDEX PedIndex) = "0xd902002c7693a977"

//INFO: Make the ped use different fall upperbody clipset. 
//      Be sure to clear the overide with CLEAR_PED_FALL_UPPER_BODY_CLIPSET_OVERRIDE when finished!
//      DON'T FORGET to stream in the new clipset before calling this!!
//PARAM NOTES: 
//PURPOSE:
NATIVE PROC SET_PED_FALL_UPPER_BODY_CLIPSET_OVERRIDE(PED_INDEX PedIndex, STRING ClipSet ) = "0xd49f3e8d262c582b"

//INFO: Clear this peds different fall upperbody clipset.  Should be called after using SET_PED_MOTION_IN_COVER_CLIPSET_OVERRIDE
//PARAM NOTES: 
//PURPOSE:
NATIVE PROC CLEAR_PED_FALL_UPPER_BODY_CLIPSET_OVERRIDE(PED_INDEX PedIndex) = "0xa86ecf8f6fc80b3c"

//INFO: Resets the weapon movement clipset based on the currently equipped weapon.
//      Weapon movement clipset are defined in weapons.meta
//      DON'T FORGET to unstream the clipset if no longer needed!!
//PARAM NOTES:
//PURPOSE:
NATIVE PROC RESET_PED_WEAPON_MOVEMENT_CLIPSET(PED_INDEX PedIndex) = "0x2dcd5a713355ab1b"

//INFO: Make the ped use different clipset when inside a vehicle. The appropriate clipset for the 
//		seat the ped is in will be chosen from the context name
//      The contexts are defined in vehiclelayouts.meta in the <InVehicleOverrideInfos></InVehicleOverrideInfos>
//		section e.g. MISS_ARMENIAN3_FRANKLIN_TENSE
//      DON'T FORGET to stream in the new clipset before calling this!!
//PARAM NOTES: 
//PURPOSE:
NATIVE PROC SET_PED_IN_VEHICLE_CONTEXT(PED_INDEX PedIndex, INT InVehicleContextHash ) = "0xc28ceefc530c40f4"

//INFO: Resets the in vehicle context.
//      DON'T FORGET to unstream the clipset if no longer needed!!
//PARAM NOTES:
//PURPOSE:
NATIVE PROC RESET_PED_IN_VEHICLE_CONTEXT(PED_INDEX PedIndex) = "0x3cac880816f6f3f4"


//INFO: Specifies a new walking animation to use when the ped is walking around
//PARAM NOTES:	animDictionary - the name of the dictionary the anim is in 
//				anim - the name of the anim to use 
//				blendDelta - a float value specifying how fast the anim should blend in if the ped is already walking around
//				defaults to NORMAL_BLEND_IN (see commands_task.sch)
//				looped - Whether or not the walk anim should play once and then end, or loop until CLEAR_PED_ALTERNATE_WALK_ANIM is called
//PURPOSE: Swaps the peds straight forward walking anim with the specified anim a new one.  More info..
NATIVE PROC SET_PED_ALTERNATE_WALK_ANIM(PED_INDEX PedIndex, STRING animDictionary, STRING anim, float blendDelta = 8.0, bool looped = TRUE ) = "0xd49494d2e29696de"

//INFO: Specifies a new walking animation to use when the ped is walking around
//PARAM NOTES:	blendDelta - a float value specifying how fast the anim should blend back to the normal walk
//				defaults to NORMAL_BLEND_OUT (see commands_task.sch)
//PURPOSE: MAkes the ped go back to using its original walk anim.  More info..
NATIVE PROC CLEAR_PED_ALTERNATE_WALK_ANIM(PED_INDEX PedIndex, float blendDelta = -8.0 ) = "0xba002e17c13f9dd5"

ENUM ALTERNATE_ANIM_TYPE
    AAT_IDLE,
    AAT_WALK,
    AAT_RUN,
    AAT_SPRINT
ENDENUM

//INFO: Specifies a new movement animation to use when the ped is moving around
//PARAM NOTES:	animDictionary - the name of the dictionary the anim is in 
//				anim - the name of the anim to use 
//				blendDelta - a float value specifying how fast the anim should blend in if the ped is already moving around
//				defaults to NORMAL_BLEND_IN (see commands_task.sch)
//				looped - Whether or not the movement anim should play once and then end, or loop until CLEAR_PED_ALTERNATE_MOVEMENT_ANIM is called
//PURPOSE: Swaps the peds straight forward walking anim with the specified anim a new one.  More info..
NATIVE PROC SET_PED_ALTERNATE_MOVEMENT_ANIM(PED_INDEX PedIndex, ALTERNATE_ANIM_TYPE type, STRING animDictionary, STRING anim, float blendDelta = 8.0, bool looped = TRUE) = "0x1506c7782f807090"

//INFO: Specifies a new movement animation to use when the ped is moving around
//PARAM NOTES:	blendDelta - a float value specifying how fast the anim should blend back to the normal walk
//				defaults to NORMAL_BLEND_OUT (see commands_task.sch)
//PURPOSE: MAkes the ped go back to using its original walk anim.  More info..
NATIVE PROC CLEAR_PED_ALTERNATE_MOVEMENT_ANIM(PED_INDEX PedIndex, ALTERNATE_ANIM_TYPE type, float blendDelta = -8.0) = "0xd14025fd10232a78"

//INFO: Allows the peds to run faster.  Cannot be used in Network scripts
//PARAM NOTES:
//PURPOSE: Sets the speed mulitplier  of the peds move anims.  More info..
NATIVE PROC SET_PED_MOVE_ANIM_SPEED_MULTIPLIER(PED_INDEX PedIndex, FLOAT Multiplier) = "0x46b06056043917f8"

//INFO: Cant be used on network scripts.
//PARAM NOTES:
//PURPOSE: Blends out the peds move anims  More info..
NATIVE PROC SET_PED_MOVE_ANIMS_BLEND_OUT(PED_INDEX PedIndex) = "0xa91903a0cebffd9b"

//INFO: 
//PARAM NOTES:
//PURPOSE:Sets the peds group for gesturing 
NATIVE PROC SET_PED_GESTURE_GROUP(PED_INDEX PedIndex, STRING GestureGroup ) = "0xbbb4cdefa58f8ea4"

//INFO: ***DEPRECATED*** Please remove.
//PURPOSE: ***DEPRECATED*** This command no longer does anything. Please remove it from your scripts.
NATIVE PROC BLEND_OUT_SYNCED_MOVEMENT_ANIMS ( PED_INDEX PedIndex ) = "0x6d5d7ba79cedbdf1"

//INFO: Used when playing multiple anims together using TASK_PLAY_ANIM. This function returns the position offset
//		that will be automatically applied when playing the specified anim using the anim flag AF_EXTRACT_INITIAL_OFFSET
//		from the initial position and orientation specified
//PARAM NOTES:  scenePosition - the position to be used with TASK_PLAY_ANIM_ADVANCED (in world coords)
//				sceneOrientation - The orientation to be used with TASK_PLAY_ANIM_ADVANCED (<< pitch, roll, heading >>)
//PURPOSE: Gets the authored initial offset included by the animator, if any. More info..
NATIVE FUNC VECTOR GET_ANIM_INITIAL_OFFSET_POSITION( STRING pAnimDictName, STRING pAnimName, VECTOR scenePosition, VECTOR sceneOrientation, FLOAT phase = 0.0, EULER_ROT_ORDER RotOrder = EULER_YXZ) = "0x3dbab8e11699eaee"

//INFO: Used when playing multiple anims together using TASK_PLAY_ANIM. This function returns the rotational offset
//		(pitch, roll and heading, in that order) that will be automatically applied when playing the specified anim 
//		using the anim flag AF_EXTRACT_INITIAL_OFFSET from the initial position and orientation specified
//PARAM NOTES:  scenePosition - the position to be used with TASK_PLAY_ANIM_ADVANCED (in world coords)
//				sceneOrientation - The orientation to be used with TASK_PLAY_ANIM_ADVANCED (<< pitch, roll, heading >>)
//PURPOSE: Gets the authored initial offset included by the animator, if any. More info..
NATIVE FUNC VECTOR GET_ANIM_INITIAL_OFFSET_ROTATION( STRING pAnimDictName, STRING pAnimName, VECTOR scenePosition, VECTOR sceneOrientation, FLOAT phase = 0.0, EULER_ROT_ORDER RotOrder = EULER_YXZ) = "0x34aedcea59226ccb"

//INFO: Creates a common scene origin which can be used to playback synchronised animations across multiple peds and objects
//PARAM NOTES:  scenePosition - the position of the scene root in world coordinates
//				sceneOrientation - The orientation of the scene root in world coordinates
//				returns - The id number of the new scene. Use this with the various script commands to add objects to the scene,
//						  affect the scene root or phase etc.
//
//COMMON ISSUES:	Occassionaly when using CREATE_SYNCHRONIZED_SCENE you may recieve the assert "Unable to create Synchronized scene!"
//				This can be caused by the following issues:
//				1.	Using CREATE_SYNCHRONIZED_SCENE to get a scene Id, but then never attaching a ped, object or camera to it. Scene IDs are created instantly, so
//					there's no need to create them ahead of time in your script. You should therefore only use CREATE_SYNCHRONIZED_SCENE immediately before
//					you use it for playback.
//				2.	Forgetting to clean up entities attached to the scene. The is most commonly caused by not cleaning up a camera which has been attached to the scene
//					using PLAY_SYNCHRONIZED_CAM_ANIM. Calling DESTROY_CAM on the offending camera will solve this. It will also occur when leaving a ped running TASK_SYNCHRONIZED_SCENE after the scene has finished
//					or forget to stop an anim played with PLAY_SYNCHRONIZED_ENTITY_ANIM with a STOP_SYNCHRONIZED_ENTITY_ANIM call.
//
//PURPOSE: Creates a new scene origin for playing back synchronized anims across multiple entities. Should be called immediately before starting the first anim on a scene. More info...
NATIVE FUNC INT CREATE_SYNCHRONIZED_SCENE ( VECTOR scenePosition, VECTOR sceneOrientation, EULER_ROT_ORDER RotOrder = EULER_YXZ ) = "0x8f5f4164bf5fb513"

//INFO: Creates a common scene origin which can be used to playback synchronised animations across multiple peds and objects
//PARAM NOTES:  scenePosition - the position of the scene root in world coordinates
//				sceneOrientation - The orientation of the scene root in world coordinates
//				returns - The id number of the new scene. Use this with the various script commands to add objects to the scene,
//						  affect the scene root or phase etc.
//PURPOSE: Creates a new scene at the origin of the map object
NATIVE FUNC INT CREATE_SYNCHRONIZED_SCENE_AT_MAP_OBJECT ( VECTOR scrVecNewCoors, float Radius, MODEL_NAMES ObjectModelHashKey ) = "0x5bd4525ef4255c92"


//INFO: Checks to see if the synchronized scene returned by CREATE_SYNCHRONIZED_SCENE is still running.
//PARAM NOTES:  sceneId - The scene id returned by CREATE_SYNCHRONIZED_SCENE
//PURPOSE: Checks if a synchronized scene ID is still valid. More info...
NATIVE FUNC BOOL IS_SYNCHRONIZED_SCENE_RUNNING ( INT sceneID ) = "0xce2c78e9fc0b01e3"

//INFO: Use this command to change a synchronised scene's origin after it has been created
//PARAM NOTES:  sceneID - The scene index returned by CREATE_SYNCHRONIZED_SCENE
//				scenePosition - the position of the scene root in world coordinates
//				sceneOrientation - The orientation of the scene root in world coordinates
//PURPOSE: Changes the root position and orientation of an existing synchronized scene. More info...
NATIVE PROC SET_SYNCHRONIZED_SCENE_ORIGIN ( INT sceneID, VECTOR scenePosition, VECTOR sceneOrientation, EULER_ROT_ORDER RotOrder = EULER_YXZ ) = "0x44b158699315d639"


//INFO: Use this command to change a synchronised scene's phase after it has been created. Changing the phase of a synced
//		scene will update the phases of any objects attached to it.
//PARAM NOTES:  sceneID - The scene index returned by CREATE_SYNCHRONIZED_SCENE
//				phase - The new phase of the scene
//PURPOSE: Changes the phase of an existing synchronized scene. More info...
NATIVE PROC SET_SYNCHRONIZED_SCENE_PHASE ( INT sceneID, FLOAT phase ) = "0xe0f81eaeb49d39ef"

//INFO: Returns the current phase of the provided synchronized scene
//PARAM NOTES:  sceneID - The scene index returned by CREATE_SYNCHRONIZED_SCENE
//				phase - The new phase of the scene
//PURPOSE: Gets the current phase of an existing synchronized scene. More info...
NATIVE FUNC FLOAT GET_SYNCHRONIZED_SCENE_PHASE ( INT sceneID ) = "0x54de1614490c2a83"

//INFO: Use this command to change a synchronised scene's playback rate after it has been created. Changing the rate of a synced
//		scene will update the playback speed of any objects attached to it.
//PARAM NOTES:  sceneID - The scene index returned by CREATE_SYNCHRONIZED_SCENE
//				rate - The new rate of the scene (1.0 is normal rate)
//PURPOSE: Changes the rate of an existing synchronized scene. More info...
NATIVE PROC SET_SYNCHRONIZED_SCENE_RATE ( INT sceneID, FLOAT rate ) = "0x7541cccb5b62c54d"

//INFO: Returns the current playback rate of the provided synchronized scene
//PARAM NOTES:  sceneID - The scene index returned by CREATE_SYNCHRONIZED_SCENE
//PURPOSE: Gets the current playback rate of an existing synchronized scene. More info...
NATIVE FUNC FLOAT GET_SYNCHRONIZED_SCENE_RATE ( INT sceneID ) = "0x75408ae37923c89b"

//INFO: Use this command to set the absolute mover state of a synchronised scene after it has been created.
//PARAM NOTES:  sceneID - The scene index returned by CREATE_SYNCHRONIZED_SCENE
//				loop - true to use absolute mover in the scene, false otherwise
//PURPOSE: Set the absolute mover state of a synchronized scene. More info...
NATIVE PROC SET_SYNCHRONIZED_SCENE_ABSOLUTE ( INT sceneID, bool loop ) = "0x6f106c1fa49420d0"

//INFO: Returns true if the specified scene is using the absolute mover
//PARAM NOTES:  sceneID - The scene index returned by CREATE_SYNCHRONIZED_SCENE
//PURPOSE: Returns true if the specified scene is using the absolute mover. More info...
NATIVE FUNC BOOL IS_SYNCHRONIZED_SCENE_ABSOLUTE ( INT sceneID ) = "0x6d9a34e5a8c709d4"

//INFO: Use this command to set the loopiung state of a synchronised scene after it has been created.
//PARAM NOTES:  sceneID - The scene index returned by CREATE_SYNCHRONIZED_SCENE
//				loop - true to loop the scene, false otherwise
//PURPOSE: Set the looping state of a synchronized scene. More info...
NATIVE PROC SET_SYNCHRONIZED_SCENE_LOOPED ( INT sceneID, bool loop ) = "0xfe1cd80c2f7cbcfb"

//INFO: Returns true is the specified scene is looping
//PARAM NOTES:  sceneID - The scene index returned by CREATE_SYNCHRONIZED_SCENE
//PURPOSE: Returns true if the specified scene is looping. More info...
NATIVE FUNC BOOL IS_SYNCHRONIZED_SCENE_LOOPED ( INT sceneID ) = "0x67596c52bc17fb9c"

//INFO: Use this command to set the hold last frame state of a synchronised scene after it has been created.
//PARAM NOTES:  sceneID - The scene index returned by CREATE_SYNCHRONIZED_SCENE
//				loop - true to hold the scene at the last frame, false otherwise
//PURPOSE: Set the hold last frame state of a synchronized scene. More info...
NATIVE PROC SET_SYNCHRONIZED_SCENE_HOLD_LAST_FRAME ( INT sceneID, bool holdLastFrame ) = "0x0ba4916484503b63"

//INFO: Returns true is the specified scene is set to hold last frame
//PARAM NOTES:  sceneID - The scene index returned by CREATE_SYNCHRONIZED_SCENE
//PURPOSE: Returns true if the specified scene is set to hold last frame. More info...
NATIVE FUNC BOOL IS_SYNCHRONIZED_SCENE_HOLD_LAST_FRAME ( INT sceneID ) = "0x1376a84d874169c3"

//INFO: Use this command to attach a synchronized scene to an entity. Once attached, the root of the scene will follow the
//		ped until DETACH_SYNCHRONIZED_SCENE is called. When attached, the scene's origin becomes an offset from the parent object.
//PARAM NOTES:  sceneID - The scene index returned by CREATE_SYNCHRONIZED_SCENE
//				ped - The entity to attach to
//				bone - The bone index on the entity to attach to: -1 means the entity matrix (physics capsule)
//PURPOSE: Attaches a synced scene to an entity. More info...
NATIVE PROC ATTACH_SYNCHRONIZED_SCENE_TO_ENTITY ( INT sceneID, ENTITY_INDEX entity, INT bone ) = "0x961ee84414ca42f8"

//INFO: Use this command to dettach a synchronized scene.
//PARAM NOTES:  sceneID - The scene index returned by CREATE_SYNCHRONIZED_SCENE
//PURPOSE: Detaches the synchronized scene. More info...
NATIVE PROC DETACH_SYNCHRONIZED_SCENE ( INT sceneID ) = "0x7ff9609f5d8471af"

//INFO: Use this command to assign the lifetime of a synced scene to the script this function is called from
//PARAM NOTES:  sceneID - The scene index returned by CREATE_SYNCHRONIZED_SCENE
//PURPOSE: Assigns ownership, and therefore lifetime, of this synced scene to this script.
NATIVE PROC TAKE_OWNERSHIP_OF_SYNCHRONIZED_SCENE( INT sceneID ) = "0x700b04835b2a30d1"

//~><   Ped Group Commands  ><~

//~>        Ped : Create, Delete -> Group Index  

//INFO:  Every frame, the code automatically removes any group which doesn't have any leader/members. 
//          This means that you have to set a group leader in the same frame as the group is created, as otherwise you'll get an assert about the group ID being out of range (i.e. the group doesn't exist)
//          The Player already has a group so a group doens't need to be created for them.
//PURPOSE: Creates a group.  More info..
NATIVE FUNC GROUP_INDEX CREATE_GROUP(DEFAULT_TASK_ALLOCATOR DefaultTaskType) = "0x0cc2bcb995d30ca3"

//INFO: If the its the players group it removes all the followers
//PARAM NOTES:
//PURPOSE: Removes the group. More info..
NATIVE PROC REMOVE_GROUP(GROUP_INDEX UniqueGroupID) = "0x62e720bbf19b53ad"

//~>        Ped : Get, Set -> Ped -> Group Attributes

//INFO: The player is group leader of the players gropu and cannot be set leader of another gropu 
//PARAM NOTES:
//PURPOSE: Set the ped as a group leader. More info..  More info..
NATIVE PROC SET_PED_AS_GROUP_LEADER(PED_INDEX PedIndex, GROUP_INDEX GroupUniqueID) = "0xaa1f79c4006d9ae2"

//INFO: 
//PARAM NOTES:
//PURPOSE:Sets a ped as a group member.
NATIVE PROC SET_PED_AS_GROUP_MEMBER(PED_INDEX PedIndex, GROUP_INDEX GroupUniqueID ) = "0xf23e6f5690771f71"

//INFO: 
//PARAM NOTES:
//PURPOSE:Sets a ped to teleport to the group leader if normal pathing fails.
NATIVE PROC SET_PED_CAN_TELEPORT_TO_GROUP_LEADER(PED_INDEX PedIndex, GROUP_INDEX GroupUniqueID, BOOL bEnabled) = "0x44bc3176e12d5d7c"

//INFO: 
//PARAM NOTES: MemberNumber: Member numbers start at 0 with a maximum of 7 members.
//PURPOSE: Gets the ped_index from the group member.  More info..
NATIVE FUNC PED_INDEX GET_PED_AS_GROUP_MEMBER(GROUP_INDEX UniqueGroupID, INT MemberNumber) = "0x3722e3c325acb58e"

//INFO: 
//PARAM NOTES:
//PURPOSE: Get the ped_index of the gropu leader. 
NATIVE FUNC PED_INDEX GET_PED_AS_GROUP_LEADER (GROUP_INDEX UniqueGroupID) = "0xa252a0bae3a14a8d"

//INFO: 
//PARAM NOTES:
//PURPOSE: Get the group index form the ped.
NATIVE FUNC GROUP_INDEX GET_PED_GROUP_INDEX(PED_INDEX PedIndex) = "0x188e8a7343f4234f"

//INFO: 
//PARAM NOTES:
//PURPOSE: Set the ped doens't leave the group if the leader is too far away
NATIVE PROC SET_PED_NEVER_LEAVES_GROUP(PED_INDEX PedIndex, BOOL NeverLeavesGroupFlag) = "0x508ea490c0230199"

//INFO: 
//PARAM NOTES:
//PURPOSE: Removes a ped from a group.
NATIVE PROC REMOVE_PED_FROM_GROUP(PED_INDEX PedIndex) = "0x6221a52631154ef7"

//~>        Ped: Get, Set -> Group_index -> Group Attributes

//INFO: 
//PARAM NOTES:
//PURPOSE: Sets the distance between a group member and the leader before the member leaves the group.
NATIVE PROC SET_GROUP_SEPARATION_RANGE(GROUP_INDEX UniqueGroupID, FLOAT SeparationRange) = "0x05ff7bcaaef919b8"

//INFO: 
//PARAM NOTES:
//PURPOSE: Sets the formation a group can take
NATIVE PROC SET_GROUP_FORMATION(GROUP_INDEX UniqueGroupID, PEDGROUP_FORMATION GroupFormation) = "0xb8f2b126cc78a3b5"

//PURPOSE: Sets the spacing which the group formation is currently using.
//INFO: It is only valid for one script to do this at a time!
//PARAM NOTES:
//         Spacing = space between peds
//         AdjustSpeedMinDist = distance from spacing position at which ped slows down (leave at -1.0 if not sure)
//         AdjustSpeedMaxDist = distance from spacing position at which ped speeds up (leave at -1.0 if not sure)
NATIVE PROC SET_GROUP_FORMATION_SPACING(GROUP_INDEX UniqueGroupID, FLOAT Spacing, FLOAT AdjustSpeedMinDist=-1.0, FLOAT AdjustSpeedMaxDist=-1.0) = "0x4d7356aac1800b4e"

//INFO: 
//PARAM NOTES:
//PURPOSE: Resets the spacing which the group formation is currently using, back to its default values
//		   This will also happen when the mission terminates.
NATIVE PROC RESET_GROUP_FORMATION_DEFAULT_SPACING(GROUP_INDEX UniqueGroupID) = "0xab53b02740a50682"

//INFO: 
//PARAM NOTES:
//PURPOSE: Gets the number of leaders (1 or 0) and the number of followers (in the range 0-7) that are in the relevant group. 
NATIVE PROC GET_GROUP_SIZE(GROUP_INDEX UniqueGroupID, INT &ReturnHasLeader, INT &ReturnNumberOfFollowers) = "0x7afff71021be70eb"

//~>        Ped: Bool (Does) -> Group_Index (Exist)

//INFO: 
//PARAM NOTES:
//PURPOSE: Checks that the group exists.
NATIVE FUNC BOOL DOES_GROUP_EXIST(GROUP_INDEX UniqueGroupID) = "0x3d3394023cf3b07d"

//~>        Ped: Bool (Is) -> Ped  (Group Attributes)

//INFO: 
//PARAM NOTES:
//PURPOSE: Checks that the ped is a member of a specific group.
NATIVE FUNC BOOL IS_PED_GROUP_MEMBER(PED_INDEX PedIndex, GROUP_INDEX UniqueGroupID) = "0x2f52e009bbc0afce"

//INFO: 
//PARAM NOTES:
//PURPOSE: Checks that the ped is a leader of a specific group.
NATIVE FUNC BOOL IS_PED_GROUP_LEADER(PED_INDEX PedIndex, GROUP_INDEX UniqueGroupID) = "0xb87048bca2627dbc"

//INFO: 
//PARAM NOTES:
//PURPOSE: Checks that the ped is inside a seat which keeps collision on (side of swat / rear of firetruck)
NATIVE FUNC BOOL IS_PED_HANGING_ON_TO_VEHICLE(PED_INDEX PedIndex) = "0xed99779c40aee6c4"

//INFO: 
//PARAM NOTES:
//PURPOSE: Checks the ped is in any group.
NATIVE FUNC BOOL IS_PED_IN_GROUP(PED_INDEX PedIndex) = "0x611ad675982bebcc"

//INFO: 
//PARAM NOTES:
//PURPOSE: Returns the player who is the leader of the group the ped is in. Returns -1 if the ped is not in a group or the group leader is not a player.
NATIVE FUNC PLAYER_INDEX GET_PLAYER_PED_IS_FOLLOWING(PED_INDEX PedIndex) = "0x08435d2c2687236d"

//~>                                Ped Relationship Commands                       <~

//~>        Ped: Bool (Is) -> Ped  (Relationship Attributes)

//INFO: Sets the ped's relationship group default to the one passed
//PARAM NOTES:REL_GROUP_HASH is an enum list in generic.sch
//PURPOSE: Sets a ped's default relationship group.
NATIVE PROC SET_PED_RELATIONSHIP_GROUP_DEFAULT_HASH( PED_INDEX PedIndex, REL_GROUP_HASH relGroup ) = "0x97fede97c56990c8"

//INFO: 
//PARAM NOTES: 
//PURPOSE: Gets the default relationship group stored on this ped.
NATIVE FUNC  REL_GROUP_HASH GET_PED_RELATIONSHIP_GROUP_DEFAULT_HASH(PED_INDEX PedIndex ) = "0x012a87eeead89783"

//INFO: Sets the peds relationship group to the one passed
//PARAM NOTES:REL_GROUP_HASH is an enum list in generic.sch
//PURPOSE: Sets a ped into a relationship group.  More info..
NATIVE PROC SET_PED_RELATIONSHIP_GROUP_HASH( PED_INDEX PedIndex, REL_GROUP_HASH relGroup ) = "0xff4beb6cff55a013"

//INFO: 
//PARAM NOTES: 
//PURPOSE: Gets the relationship group this ped belongs too. 
NATIVE FUNC  REL_GROUP_HASH GET_PED_RELATIONSHIP_GROUP_HASH(PED_INDEX PedIndex ) = "0x6f8fb52f5d1d0b84"

//INFO: To get 2 rel groups to hate each other, set the relationship for both grps
//PARAM NOTES: RELATIONSHIP_TYPE is am enum list in commands_ped.sch,  REL_GROUP_HASH is an enum list in generic.sch
//PURPOSE: Set the relationship between rel groups.  More info..
NATIVE PROC SET_RELATIONSHIP_BETWEEN_GROUPS(RELATIONSHIP_TYPE RelationshipType, REL_GROUP_HASH relGroup, REL_GROUP_HASH otherRelGroup) = "0x9972efada7a2a47d"

//INFO: 
//PARAM NOTES: 
//PURPOSE: Gets the relationship between two rel groups, will return None if no relationship has been  setup.
NATIVE FUNC  RELATIONSHIP_TYPE GET_RELATIONSHIP_BETWEEN_GROUPS(REL_GROUP_HASH relGroupA, REL_GROUP_HASH relGroupB) = "0x76932af783b85b6a"

//INFO: 
//PARAM NOTES: RELATIONSHIP_TYPE is am enum list in commands_ped.sch,  REL_GROUP_HASH is an enum list in generic.sch
//PURPOSE: Removes the relationship between rel groups. More info..
NATIVE PROC CLEAR_RELATIONSHIP_BETWEEN_GROUPS(RELATIONSHIP_TYPE RelationshipType, REL_GROUP_HASH relGroup, REL_GROUP_HASH otherRelGroup) = "0x33b3a4723d5dbd35"

//INFO: Adds a relationship group, returns the group as a reference, returns true if succesful
//PARAM NOTES:
//PURPOSE:
NATIVE FUNC BOOL ADD_RELATIONSHIP_GROUP(STRING sName, REL_GROUP_HASH& group) = "0xd642e010a287adfd"

//INFO: Removes a relationship group by hash value
//PARAM NOTES:
//PURPOSE:
NATIVE PROC REMOVE_RELATIONSHIP_GROUP(REL_GROUP_HASH group) = "0x8813f60f6f44c9e3"

//INFO:
//PARAM NOTES: relGroup is the hash of the relationship group you want to check.
//PURPOSE: returns true if the relationship group exists.
NATIVE FUNC BOOL DOES_RELATIONSHIP_GROUP_EXIST(REL_GROUP_HASH relGroup) = "0x5b79688a82eac2f0"

//INFO: 
//PARAM NOTES: EventType should be one of the ENUM values in event_enums.sch
//PURPOSE: Checks the ped is responding to an event of the specified type.  EVENT_INVALID can be used to test if the ped is responding to any event.
NATIVE FUNC BOOL IS_PED_RESPONDING_TO_EVENT(PED_INDEX PedIndex, EVENT_NAMES EventType) = "0x1a3b69366fd32d14"

//INFO: 
//PARAM NOTES: EventType should be one of the ENUM values in event_enums.sch
//PURPOSE: 
NATIVE FUNC INT GET_PED_INDEX_FROM_FIRED_EVENT(PED_INDEX PedIndex, EVENT_NAMES EventType) = "0x048fc51fbfc02257"

//INFO: 
//PARAM NOTES: EventType should be one of the ENUM values in event_enums.sch
//PURPOSE: 
NATIVE FUNC BOOL GET_POS_FROM_FIRED_EVENT(PED_INDEX PedIndex, EVENT_NAMES EventType, VECTOR& OutPos) = "0xae4ea19bb37a2329"

//INFO: 
//PARAM NOTES:
//PURPOSE: Gets the relationship between two peds, if they have not had one set up it will return 
NATIVE FUNC  RELATIONSHIP_TYPE GET_RELATIONSHIP_BETWEEN_PEDS(PED_INDEX PedIndex, PED_INDEX SecondPedIndex) = "0x2996a489f1c8e5ae"

//PARAM NOTES: relGroup is the hash of the relationship group you want to modify, bShouldAffectWantedLevel determines if peds of this type will influence WL
//PURPOSE: Sets whether a relationship group should influence WL, resolved at same time the per ped flag is resolved when reporting a crime
NATIVE PROC SET_RELATIONSHIP_GROUP_AFFECTS_WANTED_LEVEL(REL_GROUP_HASH relGroup, BOOL bShouldAffectWantedLevel) = "0x36b51e98abf1418a"

//PARAM NOTES: relGroup is the hash of the relationship group you want to modify, bShouldBlipPedsInRelGroup determines if peds of this relgroup will be blipped
//PURPOSE: Sets whether blips of peds in this relationship group will show up on the mini map.
NATIVE PROC SET_BLIP_PEDS_IN_RELATIONSHIP_GROUP(REL_GROUP_HASH relGroup, BOOL bShouldBlipPedsInRelGroup) = "0x072d52d37856b53c"

//INFO:
//PARAM NOTES: relGroup is the hash of the relationship group you want to have attack the (disliked) target.
//PURPOSE: Sets all peds of a relationship group in a given sphere (defined by a vector position and radius) to attack the target disliked ped.
NATIVE PROC TELL_GROUP_PEDS_IN_AREA_TO_ATTACK(PED_INDEX TargetPedIndex, VECTOR scrVectorCenterCoords, FLOAT radius, REL_GROUP_HASH relGroup) = "0xfcdf7f655a86cf02"

//~>        Ped: Get, Set -> Ped -> Relationship Attributes

//INFO: 
//PARAM NOTES:
//PURPOSE: Sets the hud item to be red but otherwise does not affect the peds behaviour
NATIVE PROC SET_PED_AS_ENEMY(PED_INDEX PedIndex, BOOL bEnemy) = "0x80476b7f23bcbb1b"

//INFO: 
//PARAM NOTES:
//PURPOSE:
NATIVE PROC SET_PED_TO_INFORM_RESPECTED_FRIENDS(PED_INDEX PedIndex, FLOAT Distance, INT MaximumNumber) = "0x78d13ff59b219912"

//INFO: 
//PARAM NOTES:
//PURPOSE: Sets the vehicle seat the gang member will occupy.
NATIVE PROC SET_PED_GROUP_MEMBER_PASSENGER_INDEX(PED_INDEX PedIndex, VEHICLE_SEAT seat  ) = "0x950d2d7ea1bff54c"

//INFO: 
//PARAM NOTES:
//PURPOSE: Allows relationships between relgroups to be changed that permenatly that arent PLAYER vs Cop and RELGROUP_MISSION1-8 vs RELGROUP_MISSION1-8
//	NATIVE PROC SET_GANG_RELATIONSHIPS_CAN_BE_CHANGED_BY_NEXT_COMMAND(BOOL bAllowChange)

//~>                                Ped Physics Command                         <~

//INFO: Not approved for use in network scripts
//PARAM NOTES:
//PURPOSE: Sets if the ped is affected by gravity.  More info..
NATIVE PROC SET_PED_GRAVITY(PED_INDEX PedIndex, BOOL isAffectedByGravity) = "0x2f3339afdd93fd01"

//INFO:
//PARAM NOTES: bSwimUnderSurface = true means the (fish only) ped should align itself just under the waves.
//PURPOSE:  Tell a ped to swim just under the waves, used for things like a shark sticking its fin out.
NATIVE PROC SET_PED_SWIMS_UNDER_SURFACE(PED_INDEX PedIndex, BOOL bSwimUnderSurface) = "0x1d5e00bda542db81"

//INFO: 
//PARAM NOTES:
//PURPOSE: Force a ped running parachute task to open their parachute
NATIVE PROC FORCE_PED_TO_OPEN_PARACHUTE(PED_INDEX PedIndex) = "0xfd4d36340bc86574"

//INFO: 
//PARAM NOTES:
//PURPOSE: Return if a ped is currently falling.
NATIVE FUNC BOOL IS_PED_FALLING(PED_INDEX PedIndex) = "0x0208598d19e7a49f"

//INFO: 
//PARAM NOTES:
//PURPOSE: Return if a ped is currently jumping.
NATIVE FUNC BOOL IS_PED_JUMPING(PED_INDEX PedIndex) = "0xab3249acbde2d8b9"

//INFO: 
//PARAM NOTES:
//PURPOSE: Return if a ped is currently landing (including rolling after landing).
NATIVE FUNC BOOL IS_PED_LANDING(PED_INDEX PedIndex) = "0xa63c3585afc99594"

//INFO: 
//PARAM NOTES:
//PURPOSE: Return if a ped is currently doing a beast jump (includes landing phase too)
NATIVE FUNC BOOL IS_PED_DOING_A_BEAST_JUMP(PED_INDEX PedIndex) = "0x5a880630516d320c"

//INFO: 
//PARAM NOTES:
//PURPOSE: Return if a ped is currently climbing.
NATIVE FUNC BOOL IS_PED_CLIMBING(PED_INDEX PedIndex) = "0x1755a0cd57c780c6"

//INFO: 
//PARAM NOTES:
//PURPOSE: Return if a ped is currently climbing or vaulting or doing a drop down.
NATIVE FUNC BOOL IS_PED_VAULTING(PED_INDEX PedIndex) = "0x5048f93429fa0da7"

//INFO: 
//PARAM NOTES:
//PURPOSE: Return if a ped is currently diving (includes jump launch/clamber phase).
NATIVE FUNC BOOL IS_PED_DIVING(PED_INDEX PedIndex) = "0x58d958e5f5b6a54c"

//INFO: 
//PARAM NOTES:
//PURPOSE: Return if a ped is currently jumping out of a vehicle.
NATIVE FUNC BOOL IS_PED_JUMPING_OUT_OF_VEHICLE(PED_INDEX PedIndex) = "0x679b82f98ef660a7"

//INFO: 
//PARAM NOTES:
//PURPOSE: Returns true if the ped is currently running the open door task
NATIVE FUNC BOOL IS_PED_OPENING_DOOR(PED_INDEX PedIndex) = "0xfe4a2839e865d693"

//INFO: 
//PARAM NOTES:
//PURPOSE: Checks if the ped is in free-fall and ready to use a parachute.
NATIVE FUNC BOOL IS_PED_IN_PARACHUTE_FREE_FALL(PED_INDEX PedIndex) = "0x90dcd1f6c0982dc1"

//INFO: 
//PARAM NOTES:
//PURPOSE: Gets the current state of the Parachuting Ped (returns PPS_INVALID if the Ped isn't Parachuting).
NATIVE FUNC PED_PARACHUTE_STATE GET_PED_PARACHUTE_STATE(PED_INDEX PedIndex) = "0x0e68d1fee34d0c80"

//INFO: 
//PARAM NOTES:
//PURPOSE: Gets the current landing type of the Parachuting Ped (returns PPLT_INVALID if the Ped isn't landing).
NATIVE FUNC PED_PARACHUTE_LANDING_TYPE GET_PED_PARACHUTE_LANDING_TYPE(PED_INDEX PedIndex) = "0xd12c319846733398"

//INFO: This function sets the tint index of the parachute for the ped
//PARAM NOTES:
//PURPOSE: Allows script to control the tint index of the parachute
NATIVE PROC SET_PED_PARACHUTE_TINT_INDEX(PED_INDEX PedIndex, INT TintIndex) = "0xeceeb40254d34d4b"

//INFO: This function gets the tint index of the parachute for the ped
//PARAM NOTES:
//PURPOSE: Allows script to control the tint index of the parachute
NATIVE PROC GET_PED_PARACHUTE_TINT_INDEX(PED_INDEX PedIndex, INT& TintIndex) = "0xe7c1c44dc8730eee"

//INFO: This function sets the tint index of the parachute pack for the ped
//PARAM NOTES:
//PURPOSE: Allows script to control the tint index of the parachute pack
NATIVE PROC SET_PED_PARACHUTE_PACK_TINT_INDEX(PED_INDEX PedIndex, INT TintIndex) = "0x4715f80a6784f3ab"

//INFO: This function gets the tint index of the reserve parachute for the ped
//PARAM NOTES:
//PURPOSE: Allows script to control the tint index of the reserve parachute
NATIVE PROC GET_PED_RESERVE_PARACHUTE_TINT_INDEX(PED_INDEX PedIndex, INT& TintIndex) = "0xd1ad2c400759dd67"

//PARAM NOTES:	pedIndex 
//				Attach - Attach to ped?
//				ClearVariation - clear existing ped variation from back at same time.
//PURPOSE: Does a parachute model switch between variation and prop.
NATIVE FUNC OBJECT_INDEX CREATE_PARACHUTE_BAG_OBJECT(PED_INDEX pedIndex, BOOL Attach, BOOL ClearVariation) = "0x9fd05a9837a2aff7"

//INFO: This function sets the tint index of the reserve parachute pack for the ped
//PARAM NOTES:
//PURPOSE: Allows script to control the tint index of the reserve parachute pack
NATIVE PROC SET_PED_RESERVE_PARACHUTE_TINT_INDEX(PED_INDEX PedIndex, INT TintIndex) = "0xe4af87effb8df783"

//INFO: This function gets the tint index of the parachute pack for the ped
//PARAM NOTES:
//PURPOSE: Allows script to control the tint index of the parachute pack
NATIVE PROC GET_PED_PARACHUTE_PACK_TINT_INDEX(PED_INDEX PedIndex, INT& TintIndex) = "0xa9b05d2e79085bc0"

//INFO: This function gives the jetpack to a ped. Note: It is not auto-equipped. Call PED_EQUIP_JETPACK.
//PARAM NOTES:
//PURPOSE:
NATIVE PROC PED_GIVE_JETPACK(PED_INDEX PedIndex) = "0x0f9077e4f806d159"

//INFO: This function removes the jetpack from the peds inventory.
//PARAM NOTES:
//PURPOSE:
NATIVE PROC PED_REMOVE_JETPACK(PED_INDEX PedIndex) = "0xe461e5445a2bfd74"

//INFO: This function tells a ped to auto-equip the jetpack (if it exists in inventory).
//PARAM NOTES:
//PURPOSE: Allows script to control the tint index of the parachute
NATIVE PROC PED_EQUIP_JETPACK(PED_INDEX PedIndex, bool bEquip) = "0xe71943fc88621d2b"

//INFO: This function returns true if the ped has the jetpack equipped.
//PARAM NOTES:
//PURPOSE:
NATIVE FUNC BOOL PED_IS_JETPACK_EQUIPPED(PED_INDEX PedIndex) = "0xd1644be3630d6bff"

//INFO: This function returns true if the ped is using the jetpack (ie hovering/flying).
//PARAM NOTES:
//PURPOSE: 
NATIVE FUNC BOOL PED_IS_USING_JETPACK(PED_INDEX PedIndex) = "0x736a1e878921880f"


//INFO: 
//PARAM NOTES: If bWorldspace is set to TRUE the result will be in world coordinates (absolute worldspace) If bWorldspace is set to FALSE the result will be in local coordinates (relative to the character) 
//PURPOSE:Gets the displacement (in meters) that will be applied to the given ped this frame. More info..
NATIVE FUNC VECTOR GET_PED_EXTRACTED_DISPLACEMENT(PED_INDEX PedIndex, BOOL bWorldspace) = "0x3afc066cc1ffd0e2"

//~>                                Ped Object Commands                             <~

//INFO: After it has been given, it can be dropped or thrown. If it is to be picked up again it must be flagged as stealable using SET_OBJECT_AS_STEALABLE. 
//PARAM NOTES: The bool UseProceduralAttach will default to false if not specified.
//                          UseProceduralAttach = false means the object will be attached to the ped either by an attachment bone, or just the offset built into the model.
//                          UseProceduralAttach = true means the code will try to work out the attachment offset based on the objects bounding box. 
//PURPOSE: Gives the ped this object using the same system as picking stuff up off the ground. More info..
NATIVE PROC GIVE_PED_PICKUP_OBJECT(PED_INDEX PedIndex, OBJECT_INDEX modelName, bool UseProceduralAttach = false) = "0x98cdf65a9523cb5b"

//INFO: 
//PARAM NOTES: minDist (=1.2) the minimum distance away we can be, maxDist (=1.5) the maximum distance away we can be.  We will always aim for the minimum distance but will expand out
// in 0.05m increments if we continue to fail to find positions. If we ever reach maxDist we start at minDist again as we continue
//PURPOSE:Gets a suitable position for creating a pickup near a ped
NATIVE FUNC VECTOR  GET_DEAD_PED_PICKUP_COORDS(PED_INDEX PedIndex, FLOAT minDist = 1.2, FLOAT maxDist = 1.5) = "0x9b2f53f9cb82f448"

//INFO: This fn is only to be used in very specific situations where the ped needs to be inside the car still but not attached
//      Only use if you've chatted to Chi-Wai or Ben L.
//PARAM NOTES: 
//PURPOSE:
NATIVE PROC SPECIAL_FUNCTION_DO_NOT_USE      (PED_INDEX PedIndex, bool bNoCollisionUntilClear=true) = "0x6e598d124998c62c"

//INFO: Overrides fDefaultHeading and fHeadingLimit originally set when attaching the ped.
//PARAM NOTES:
//PURPOSE: Lets you set the rotation of an attached ped using a rotation vector. More info
NATIVE PROC SET_ATTACHED_PED_ROTATION   (PED_INDEX PedIndex, VECTOR vecRotation, EULER_ROT_ORDER RotOrder = EULER_YXZ) = "0x7a5c5a23fc8ff225"

//INFO: Must be called each frame otherwise ped's mover capsule bound will blend back to the default orientation.
//PARAM NOTES:
//PURPOSE: Lets the ped's mover capsule bounds be re-oriented.
NATIVE PROC SET_PED_BOUNDS_ORIENTATION ( PED_INDEX PedIndex, FLOAT pitch, FLOAT heading, VECTOR vecOffset ) = "0x6f5829203cb3b0aa"

//~                             Ped Natural Motion Commands                                    <~  

//INFO:  This isn't designed to be used when a ped is currently ragdolling.  Also, this will change the bound size for all peds of this type (ex. all a_m_m_business01s).
//		 That's why this this should only be used if only one type of this ped is in the scene - like a particular player.  Always revert the bounds size back when you're finished.
//		 This isn't designed to be used in normal situations so please consult an animation or physics programmer before using this functionality.
//PARAM NOTES: A size of 0 means normal, and size of 1 means large
//PURPOSE:  Sets the human ped's bounds to either use the normal sized human bounds (male or female) or the large sized bounds
NATIVE PROC SET_PED_RAGDOLL_BOUNDS_SIZE ( PED_INDEX PedIndex, INT size) = "0x7ae4016b30cf7bc2"

//INFO: Returns a driver's racing modifier--a value between 0 and 1 that
//adjusts the lookahead when steering along a vehicle path.
//Ambient vehicles will have a value of 0 for this unless overridden by script.
//PARAM NOTES: 
NATIVE FUNC FLOAT GET_DRIVER_RACING_MODIFIER(PED_INDEX PedIndex) = "0xf1d03568df52bcef"

//INFO: Sets a driver's racing modifier--a value between 0 and 1 that
//adjusts the lookahead when steering along a vehicle path.
//Ambient vehicles will have a value of 0 for this unless overridden by script.
//PARAM NOTES: RacingModifier must be between 0 and 1 or the value will be rejected
//0 = No extra lookahead, try to get back onto the route as quick as possible
//1 = No matter how far off the path I am, use the same lookahead as if I were
//on the path.
//Increasing RacingModifier can reduce fishtailing in racing missions
NATIVE PROC SET_DRIVER_RACING_MODIFIER(PED_INDEX PedIndex, FLOAT RacingModifier) = "0x20eeeabbc2c25c15"

//INFO: Set's a driver's ability value, used to govern things like how
//often they use their lights or how well they care to park
//PARAM NOTES: Must be between 0 and 1--set to a negative value to
//reset and use the value stored in the Ped ModelInfo
NATIVE PROC SET_DRIVER_ABILITY(PED_INDEX PedIndex, FLOAT DriverAbility) = "0x7f3313f2f80dd857"

//INFO: Set's a driver's aggressiveness value, mostly used to determine
//how fast they want to drive
//PARAM NOTES: Must be between 0 and 1--set to a negative value to
//reset and use the value stored in the Ped ModelInfo
NATIVE PROC SET_DRIVER_AGGRESSIVENESS(PED_INDEX PedIndex, FLOAT DriverAggressiveness) = "0x99bb016876efec17"

//INFO: Queries the driver's ability, a float between 0 and 1.
//PARAM NOTES: If this hasn't been overridden by script, or script
//has set a negative value, the value from the Ped ModelIndex will be
//returned
NATIVE FUNC FLOAT GET_DRIVER_ABILITY(PED_INDEX PedIndex) = "0xf23065fab32fee6e"

//INFO: Queries the driver's aggressivness, a float between 0 and 1.
//PARAM NOTES: If this hasn't been overridden by script, or script
//has set a negative value, the value from the Ped ModelIndex will be
//returned
NATIVE FUNC FLOAT GET_DRIVER_AGGRESSIVENESS(PED_INDEX PedIndex) = "0xcde4e3726f4bd11d"

//INFO:  A ped will only switch to a ragdoll if it's onscreen and within range of the player. 
//PARAM NOTES:
//PURPOSE:  Determines if a ped can be set into a rag doll state.
NATIVE FUNC BOOL CAN_PED_RAGDOLL ( PED_INDEX PedIndex) = "0xeefbe22d73df1886"

//INFO:  A ped will only switch to a ragdoll if it's onscreen and within range of the player. 
//PARAM NOTES: MinTime and MaxTime sets the boundary times that the ped will ragdoll for.
//                          RAGDOLL_FALL_TYPES in nm_strings.sch, bForceScriptControl will stop the ped from becoming injured so they can complete their behaviours. 
//                          bForceScriptControl: If you require to control a ped's ragdoll even though they may take additional damage
//                          This both stops the ped from becoming injured and lowers the magnitude of any bullet impact forces. 
//PURPOSE:  Sets a ped into a rag doll state. More info..
NATIVE FUNC BOOL SET_PED_TO_RAGDOLL ( PED_INDEX PedIndex, INT MinTime, INT MaxTime, START_RAGDOLL_TASK StartTask, bool bAbortIfInjured = true, bool bAbortIfDead = true, bool bForceScriptControl = false) = "0x33021f68edb8f06e"

//INFO: 
//PARAM NOTES:  vecDirection specifies the direction the ped should stagger and fall 
//                          ground height specifies the height they're expected to fall down to
//                          grab points are optional, pass in zero to ignore grab
//PURPOSE:  this performs the same function as std SET_PED_TO_RAGDOLL, but gives them a specific task, which controls them to fall off a high place, fall down stairs etc,  More info..
NATIVE FUNC BOOL SET_PED_TO_RAGDOLL_WITH_FALL ( PED_INDEX PedIndex, INT MinTime, INT MaxTime, RAGDOLL_FALL_TYPES nFallType, VECTOR vecDirection, float fGroundHeight, VECTOR vecGrab1, VECTOR vecGrab2) = "0xfd90df0233e2f4c4"

//INFO: 
//PARAM NOTES: 
//PURPOSE:  Set the ped to ragdoll on collision with geometry
NATIVE PROC SET_PED_RAGDOLL_ON_COLLISION ( PED_INDEX PedIndex, BOOL RagdollOnCollision ) = "0x6a4535e90fc3d334"

//INFO: 
//PARAM NOTES:
//PURPOSE: Sets a ped from a ragdoll state to an animated state
NATIVE PROC SET_PED_TO_ANIMATED ( PED_INDEX PedIndex, BOOL ForceSwitch ) = "0xc0322cc73cd14c64"

//INFO: 
//PARAM NOTES:
//PURPOSE: Is ped a ragdoll.
NATIVE FUNC BOOL IS_PED_RAGDOLL ( PED_INDEX PedIndex ) = "0x32dcda1b2f8a0694"

//INFO: 
//PARAM NOTES:
//PURPOSE: Returns true if the given ped is actively running a task which manages its ragdoll.
NATIVE FUNC BOOL IS_PED_RUNNING_RAGDOLL_TASK( PED_INDEX PedIndex ) = "0x41fecc8db00381bd"

//INFO:
//PARAM NOTES:
//PURPOSE: Forces the given ragdolling ped to fall over
NATIVE PROC SET_PED_RAGDOLL_FORCE_FALL( PED_INDEX PedIndex ) = "0xab75a7231383f0c6"

//INFO:
//PARAM NOTES:
//PURPOSE: Returns true if the ped is running the melee task
NATIVE FUNC BOOL IS_PED_RUNNING_MELEE_TASK( PED_INDEX PedIndex ) = "0x22aea8376b03e2d2"

//INFO: 
//PARAM NOTES:
//PURPOSE: Returns true if the given ped is actively running a mobile phone task
NATIVE FUNC BOOL IS_PED_RUNNING_MOBILE_PHONE_TASK( PED_INDEX PedIndex ) = "0xe7b380b27e19c446"

//INFO: 
//PARAM NOTES:
//PURPOSE: Returns true if the given ped has a mobile phone to their ear
NATIVE FUNC BOOL IS_MOBILE_PHONE_TO_PED_EAR( PED_INDEX PedIndex ) = "0x8076906395af3f9d"

//INFO: 
//PARAM NOTES:
//PURPOSE: Use to reset the start time of a Natural Motion task. For specific scenarios where timeout (and return to animation) must
//         be avoided, call this every frame.
NATIVE PROC RESET_PED_RAGDOLL_TIMER( PED_INDEX PedIndex ) = "0x3ca5291882754781"

//INFO: 
//PARAM NOTES:
//PURPOSE: Sets if a ped can ragdoll. Ragdolls are swtiched on by default.
NATIVE PROC SET_PED_CAN_RAGDOLL ( PED_INDEX PedIndex, BOOL bUnlock ) = "0xc252f409bde7a700"

//INFO: 
//PARAM NOTES:	To disable ragdoll from bullets and player ped impacts, use RBF_BULLET_IMPACT | RBF_PLAYER_IMPACT
//PURPOSE: Blocks ragdoll reactions from various forms of damage, (see enum RAGDOLL_BLOCKING_FLAGS) 
NATIVE PROC SET_RAGDOLL_BLOCKING_FLAGS (PED_INDEX PedIndex, RAGDOLL_BLOCKING_FLAGS flags = RBF_BULLET_IMPACT ) = "0xd07e491bda082ced"

//INFO: 
//PARAM NOTES:	To re-enable ragdoll from bullets and player ped impacts, use RBF_BULLET_IMPACT | RBF_PLAYER_IMPACT
//PURPOSE: Re-enables ragdoll reactions from various forms of damage, (see enum RAGDOLL_BLOCKING_FLAGS) 
NATIVE PROC CLEAR_RAGDOLL_BLOCKING_FLAGS (PED_INDEX PedIndex, RAGDOLL_BLOCKING_FLAGS flags = RBF_BULLET_IMPACT ) = "0xf8a35ac94bea4275"

//DEPRICATED: Please use APPLY_PED_BLOOD_BY_ZONE() or APPLY_PED_STAB_BY_ZONE() instead.
//INFO:  you can use the widgets in  "Peds/Ped Damage/Test Blood by UV" to test u,v values for different zones, etc 
//PARAM NOTES:	pedIndex - the index of the ped to apply the blood damage to
//				zone - the zone of the ped to apply the blood damage (see PED_DECORATION_ZONE in commands_ped.sch)
//				u & v - the UV texture coords for the placement of the decal within the specified zone.
//				type - the blood damage type ( see PED_BLOOD_DAMAGE_TYPE in commands_ped.sch)
//PURPOSE: Applies new style ped blood damage on a ped by specifying a specific zone and direct UV offsets. (similar to the APPLY_PED_DECORATION()). More Info..
NATIVE PROC  APPLY_PED_BLOOD_DAMAGE_BY_ZONE(PED_INDEX PedIndex, PED_DECORATION_ZONE zone, FLOAT u, FLOAT v, PED_BLOOD_DAMAGE_TYPE type) = "0x9777c2bd7f179f2d"

//INFO:This function assumes you know what component was hit, so I can reverse transform the position into the models space.
//PARAM NOTES:	pedIndex - the index of the ped to apply the blood damage to
//				component - the ragdoll component index of the part of the ped that was hit by the damage (usually from the projectile impact) 
//				vecPos - a position in world space.
//				bloodName - the name of the blood type. this should match an entry in build\dev\common\data\effects\peddamage.xml
//PURPOSE: Applies new style ped blood damage on a ped. More Info..
NATIVE PROC  APPLY_PED_BLOOD(PED_INDEX pedIndex, INT component, VECTOR vecPos, STRING bloodName) = "0xe5bf90257c46ec94"

//INFO:  you can use the widgets in  "Peds/Ped Damage/Test Blood by UV (Interactive)" to test u,v values for different zones, etc 
//PARAM NOTES:	pedIndex - the index of the ped to apply the blood damage to
//				zone - the zone of the ped to apply the blood damage (see PED_DECORATION_ZONE in commands_ped.sch)
//				u & v - the UV texture coords for the placement of the decal within the specified zone.
//				bloodName - the name of the blood type. this should match an entry in build\dev\common\data\effects\peddamage.xml
//PURPOSE: Applies new style ped blood damage on a ped by specifying a specific zone and direct UV offsets. (similar to the APPLY_PED_DECORATION()). More Info..
NATIVE PROC  APPLY_PED_BLOOD_BY_ZONE(PED_INDEX pedIndex, INT component, FLOAT u, FLOAT v, STRING bloodName) = "0x8b65f723c8dd11a8"

//INFO:  you can use the widgets in  "Peds/Ped Damage/Test Blood by UV (Script Params)" to test u,v values for different zones, rotations, scales, etc 
//PARAM NOTES:	pedIndex - the index of the ped to apply the blood damage to
//				zone - the zone of the ped to apply the blood damage (see PED_DECORATION_ZONE in commands_ped.sch)
//				u & v - the UV texture coords for the placement of the decal within the specified zone.
//				rotation - the angle (in degrees) for the rotation
//				scale - the scale factor applied to the damage (range is 0.0 to 1.0, based on the MinSize/MaxSize tuning paramters in peddamage.xml)
//				forceFrame - Allows a spefic frame of damage to be chosen (or use -1 for the usual random frame selection)
//				preAge - the number of seconds to preAge the damage, this allows you for generate an "old wound", using 0.0 will be a usual freash wound.
//				bloodName - the name of the blood type. this should match an entry in build\dev\common\data\effects\peddamage.xml
//PURPOSE: Applies  ped blood damage on a ped by specifying a specific zone, direct UV offsets, rotation, scale, and initial Age (for animation effects). 
//         You can also force a specified frame to be used instead of a randomly chosen one. 
NATIVE PROC  APPLY_PED_BLOOD_SPECIFIC(PED_INDEX pedIndex, INT component, FLOAT u, FLOAT v, FLOAT rotation, FLOAT scale, INT forcedFrame, FLOAT preAge, STRING bloodName) = "0x2d0c965c5964fc7a"

//INFO:This function assumes you know what component was hit, so I can reverse transform the position into the models space.
//PARAM NOTES:	pedIndex - the index of the ped to apply the blood damage to
//				component - the ragdoll component index of the part of the ped that was hit by the damage (usually from the projectile impact) 
//				vecPos - a position in world space.
//				vecDir - the direction of the stab blood
//				bloodName - the name of the blood type. this should match an entry in build\dev\common\data\effects\peddamage.xml
//PURPOSE: Applies new style ped blood damage on a ped for stabs (which need direction)
NATIVE PROC  APPLY_PED_STAB(PED_INDEX pedIndex, INT component, VECTOR vecPos, VECTOR vecDir, STRING bloodName) = "0x143e6140799f127d"

//INFO:  you can use the widgets in  "Peds/Ped Damage/Test Blood by UV" to test u,v values for different zones, etc 
//PARAM NOTES:	pedIndex - the index of the ped to apply the blood damage to
//				zone - the zone of the ped to apply the blood damage (see PED_DECORATION_ZONE in commands_ped.sch)
//				u1 & v1 - the UV texture coords for the placement of the decal within the specified zone.
//				u2 & v2 - a seond set of UV coords to define the directions of the stab wound.
//				bloodName - the name of the blood type. this should match an entry in build\dev\common\data\effects\peddamage.xml
//PURPOSE: Applies new style ped blood damage on a ped by specifying a specific zone and direct UV offsets. (similar to the APPLY_PED_DECORATION()). More Info..
NATIVE PROC  APPLY_PED_STAB_BY_ZONE(PED_INDEX pedIndex, INT component, FLOAT u1, FLOAT v1, FLOAT u2, FLOAT v2, STRING bloodName) = "0x5384cc72568d34f7"


// (depricated, please use APPLY_PED_DAMAGE_DECAL() below
//INFO: you can use the widgets in "Peds/Ped Damage/Test Scars by UV" to test u,v values for different zones, etc 
//IMPORTANT: there are currently very few ped decortion buffers they should only be used on player characters
//PARAM NOTES:	pedIndex - the index of the ped to apply the decoration decal to
//				zone - the zone of the ped to apply the decorations (see PED_DECORATION_ZONE in commands_ped.sch)
//				u & v - the UV texture coords for the placement of the decal within the specified zone.
//				rotation - the rotation of the decoration blit around it's center, in degrees.
//				scale - the scale of the decoration blit.
//				scarName - the name of the scar. this should match an entry in build\dev\common\data\effects\peddamage.xml
//PURPOSE: Applies a scar to the ped, using the scars defined in the peddamage.xml tuning file
NATIVE PROC	APPLY_PED_SCAR(PED_INDEX PedIndex, PED_DECORATION_ZONE zone, FLOAT u, FLOAT v, FLOAT rotation, FLOAT scale, STRING scarName) = "0x6390bcf9a503072f"

// (depricated, please use APPLY_PED_DAMAGE_DECAL() below
//INFO: you can use the widgets in "Peds/Ped Damage/Test Dirt by UV" to test u,v values for different zones, etc 
//IMPORTANT: there are currently very few ped decortion buffers they should only be used on player characters
//PARAM NOTES:	pedIndex - the index of the ped to apply the decoration decal to
//				zone - the zone of the ped to apply the decorations (see PED_DECORATION_ZONE in commands_ped.sch)
//				u & v - the UV texture coords for the placement of the decal within the specified zone.
//				rotation - the rotation of the decoration blit around it's center, in degrees.
//				scale - the scale of the decoration blit.
// 				alpha_param - the alpha value use when applying the dirt
//				fadeIn - should the dirt fade it or just "pop" on 
//				dirtName - the name of the dirt. this should match a dirt entry in build\dev\common\data\effects\peddamage.xml
//PURPOSE: Applies a dirt splat to the ped, using the dirt damage defined in the peddamage.xml tuning file
NATIVE PROC	APPLY_PED_DIRT(PED_INDEX PedIndex, PED_DECORATION_ZONE zone, FLOAT u, FLOAT v, FLOAT rotation, FLOAT scale, FLOAT alpha_param, BOOL fadeIn, STRING dirtName) = "0xae1dc163a6cb41f8"

//INFO: you can use the widgets in "Peds/Ped Damage/Test Damage Decals by UV (Interactive)" to test u,v values for different zones, etc 
//PARAM NOTES:	pedIndex - the index of the ped to apply the decoration decal to
//				zone - the zone of the ped to apply the decorations (see PED_DECORATION_ZONE in commands_ped.sch)
//				u & v - the UV texture coords for the placement of the decal within the specified zone.
//				rotation - the rotation of the decoration blit around it's center, in degrees.
//				scale - the scale of the decoration blit. (range is 0.0 to 1.0, based on the Size tuning paramter in peddamage.xml)
// 				alpha_param - the alpha value use when applying the decal
//				forceFrame - specify a specific frame fromthe texture grid.
//				fadeIn - should the decal fade in or just "pop" on 
//				decorationName - the name of the decal. This should match a CPedDamageDecalInfo entry in build\dev\common\data\effects\peddamage.xml
//PURPOSE: Applies a ped damage decoration (decal) to the ped, using the data defined in the peddamage.xml tuning file.
//		   the decal could be a tatoo, dirt a scar, etc.
NATIVE PROC	APPLY_PED_DAMAGE_DECAL(PED_INDEX PedIndex, PED_DECORATION_ZONE zone, FLOAT u, FLOAT v, FLOAT rotation, FLOAT scale, FLOAT alpha_param, int forceFrame, BOOL fadeIn, STRING damageDecalName) = "0xff4d465afc8008ba"

//INFO: 
//PARAM NOTES:	pedIndex - the index of the ped to apply the damage pack to
//				packName - the name of the damage pack. This should match a damage pack entry in build\dev\common\data\effects\peddamage.xml
//				preAge - the amount of time to preset the "age" of the damage to (sometime we want old blood, not rfesh wounds, etc)
//				alpha_param - apply this alpha to the decorations which support alpha (usefull for say accumualting something, apply is as increasingly higher values)
//PURPOSE: Apply a ped damge pack (defined in peddamage.xml) to the specifed ped
NATIVE PROC	APPLY_PED_DAMAGE_PACK(PED_INDEX PedIndex, STRING packName, FLOAT preAge, FLOAT alpha_param) = "0x73830442223bb2dc"

//INFO: 
//PARAM NOTES:	pedIndex - the index of the ped to clear the decoration decal from
//PURPOSE:clears all the blood damage that has been applied to the specified ped.
NATIVE PROC  CLEAR_PED_BLOOD_DAMAGE(PED_INDEX pedIndex) = "0x6da9e81ab6f35ba4"

//INFO: 
//PARAM NOTES:	pedIndex - the index of the ped to clear the decoration decal from.
//		zone - the zone on the ped that needs cleared.
//PURPOSE:clears the blood damage that has been applied to the specified ped on the specified zone.
NATIVE PROC  CLEAR_PED_BLOOD_DAMAGE_BY_ZONE(PED_INDEX PedIndex, PED_DECORATION_ZONE zone) = "0xb954d6528bfadfe8"

//INFO: 
//PARAM NOTES:	pedIndex - the index of the ped to clear the decoration decal from.
//		zone - the zone on the ped that needs cleared or 'PDZ_INVALID' for all zones
//		damageDecalName - name of the decal, or 'ALL' for all Damage Decals
//PURPOSE:clears the Damage  damage that has been applied to the specified ped on the specified zone.
NATIVE PROC  CLEAR_PED_DAMAGE_DECAL_BY_ZONE(PED_INDEX PedIndex, PED_DECORATION_ZONE zone, STRING damageDecalName) = "0xa120eb1498b8bdd6"

//INFO: 
//PARAM NOTES:	pedIndex - the index of the ped to clear the decoration decal from.
//		redIntensity - 
//		alphaIntensity - 
//PURPOSE:
NATIVE PROC  SET_PED_BLOOD_DAMAGE_CLEAR_INFO(PED_INDEX PedIndex, FLOAT redIntensity, FLOAT alphaIntensity) = "0xd1f33f72bc3e68cc"

//INFO: It can be called repeatedly to hide blood in multiple zones.
//PARAM NOTES:	pedIndex - the index of the ped to hide bood on
//				zone - the zone on the ped that needs hidden. setting zone to 'PDZ_INVALID' will cause the hide/unhide to be applied to all zones on the ped.
//				enable - true if we're to hide the blood, false if we should show it again
//PURPOSE: Hides (but does not permanently remove) blood from a zone on a ped. 
NATIVE PROC  HIDE_PED_BLOOD_DAMAGE_BY_ZONE(PED_INDEX PedIndex, PED_DECORATION_ZONE zone, BOOL enable) = "0x6d68f0c1ce6b3515"

//INFO: Get the state of decorations (tattoos/decals) on a ped, if any
//PARAM NOTES:	pedIndex - the index of the ped to hide bood on
NATIVE FUNC PED_DECORATIONS_STATE GET_PED_DECORATIONS_STATE(PED_INDEX pedIndex) = "0x2eb36d96af8b2d12"

//INFO: Allows the decoration set of a ped cloned from the local player to be marked as such so that
//      tattoos/decals show up in mirrors
//	When cloning from the player ped,  this flag is automatically set up by code, but whenever decorations
//	are cleared from the clone, the flag is lost (i.e.: in those cases this commands needs to be called)
//PARAM NOTES:	pedIndex - the index of the ped to hide bood on
NATIVE PROC MARK_PED_DECORATIONS_AS_CLONED_FROM_LOCAL_PLAYER(PED_INDEX pedIndex, BOOL bWasClonedFromLocalPlayer) = "0xe0d107dcd8d58abf"

//INFO: 
//PARAM NOTES:	pedIndex - the index of the ped to clear the wet/soaked effect from
//PURPOSE: clears wet/soaked effect from a ped.
NATIVE PROC  CLEAR_PED_WETNESS(PED_INDEX pedIndex) = "0x3393d1b291d1bd1b"

//INFO: 
//PARAM NOTES:	pedIndex - the index of the ped to clear the wet/soaked effect from
//				height - the height of the water line
//PURPOSE: set the water wet/soaked effect height for a ped.
NATIVE PROC  SET_PED_WETNESS_HEIGHT(PED_INDEX pedIndex, FLOAT height) = "0x73ff058ad8630d70"

//INFO: 
//PARAM NOTES:	pedIndex - the index of the ped that is allowed to get wet this frame
//PURPOSE: enables a non-player ped to get wet this frame from systems that it otherwise wouldn't (e.g. particle effects)
NATIVE PROC  SET_PED_WETNESS_ENABLED_THIS_FRAME(PED_INDEX pedIndex) = "0xb2baf3cfc97cf90b"

//INFO: 
//PARAM NOTES:	pedIndex - the index of the ped to clear the wet/soaked effect from
//				wetLevel - wet level between 0 and 1
//PURPOSE:  Forces wetness to this entity
NATIVE PROC SET_PED_WETNESS(PED_INDEX PedIndex, FLOAT wetLevel) = "0xcfc4d66504665132"

//INFO:
//PARAM NOTES:  pedIndex - the index of the ped to clear the environment dirt effect from
//PURPOSE: Clears environment dirt effect from a ped.
NATIVE PROC  CLEAR_PED_ENV_DIRT(PED_INDEX pedIndex) = "0xb5da14da03892764"

//INFO:
//PARAM NOTES:  pedIndex - the index of the ped to clear the environment dirt effect from
//				amount   - the sweatiness to set to (0 to 1)
//PURPOSE: Sets the sweatiness of a ped by percentage.
NATIVE PROC  SET_PED_SWEAT(PED_INDEX pedIndex, FLOAT amount) = "0xffa07ccce40e3cef"

//INFO: you can use the widgets in "Peds/Ped Damage/Test Tattoo by UV" to test u,v values for different zones, etc 
//IMPORTANT: there are currently very few ped decortion buffers they should only be used on player characters
//PARAM NOTES:	pedIndex - the index of the ped to apply the decoration decal to
//				zone - the zone of the ped to apply the decorations (see PED_DECORATION_ZONE in commands_ped.sch)
//				u & v - the UV texture coords for the placement of the decal within the specified zone.
//				rotation - the rotation of the decoration blit around it's center, in degrees.
//				scale - the scale of the decoration blit.
//				pTextureDictionaryName - the name of the texture dictionary which contains the ped decoration texture.
//				pTextureName - the name of the texture in the dictionary for this decoration blit
//			    addToBumpMap - a flag to indicate the decorations's alpha channel should be interpreted ad a bump map (for scars, etc., tattoos don't need bump)
//PURPOSE: Applies a decoration the specified ped. More Info..
// NOTE: scars should be done using the APPLY_PED_SCAR function, since it manages them via the config file.
//		 this should really only be for tattoos now.
NATIVE PROC  APPLY_PED_DECORATION(PED_INDEX PedIndex, PED_DECORATION_ZONE zone, FLOAT u, FLOAT v, FLOAT rotation, FLOAT scale, STRING pTextureDictionaryName, STRING pTextureName, BOOL addToBumpMap) = "0x94548006e958bb04"

//INFO: this is the new interface to apply tattoos and other ped decorations based on predefined presets stored in different collections.
//	it is no longer necessary to specify all the data manually (e.g. position, type, zone, etc.); instead, a preset from a 
//	given collection of ped decorations is used.
//PARAM NOTES:	pedIndex - the index of the ped to apply the decoration decal to
//				pCollectionName - the name of the collection where the preset to apply is stored
//				pPresetName - the name of the preset to apply
//PURPOSE: Applies a decoration (tattoos, patches, etc.) to the specified ped.
NATIVE PROC  ADD_PED_DECORATION(PED_INDEX PedIndex, STRING pCollectionName, STRING pPresetName) = "0x3adfa9b5f9b7741f"

//INFO: this is the new interface to apply tattoos and other ped decorations based on predefined presets stored in different collections.
//	it is no longer necessary to specify all the data manually (e.g. position, type, zone, etc.); instead, a preset from a 
//	given collection of ped decorations is used.
//PARAM NOTES:	pedIndex - the index of the ped to apply the decoration decal to
//				pCollectionName - the name of the collection where the preset to apply is stored
//				pPresetName - the name of the preset to apply
//				alpha_param - the alpha value of the decoration
//PURPOSE: Applies a decoration (tattoos, patches, etc.) to the specified ped.
NATIVE PROC  ADD_PED_DECORATION_WITH_ALPHA(PED_INDEX PedIndex, STRING pCollectionName, STRING pPresetName, FLOAT alpha_param) = "0x3a45f1faa67aefff"

//INFO: Same as ADD_PED_DECORATION, but with hashes
//PARAM NOTES:	pedIndex - the index of the ped to apply the decoration decal to
//				CollectionNameHash - the hash of the name of the collection where the preset to apply is stored
//				PresetNameHash - the hash of the name of the preset to apply
//PURPOSE: Applies a decoration (tattoos, patches, etc.) to the specified ped.
NATIVE PROC  ADD_PED_DECORATION_FROM_HASHES(PED_INDEX PedIndex, INT CollectionNameHash, INT PresetNameHash) = "0x8a6b325ef96205c9"

//INFO: Same as ADD_PED_DECORATION_WITH_ALPHA, but with hashes
//PARAM NOTES:	pedIndex - the index of the ped to apply the decoration decal to
//				CollectionNameHash - the hash of the name of the collection where the preset to apply is stored
//				PresetNameHash - the hash of the name of the preset to apply
//				alpha_param - the alpha value of the decoration
//PURPOSE: Applies a decoration (tattoos, patches, etc.) to the specified ped.
NATIVE PROC  ADD_PED_DECORATION_FROM_HASHES_WITH_ALPHA(PED_INDEX PedIndex, INT CollectionNameHash, INT PresetNameHash, FLOAT alpha_param) = "0x7c2fd9f2d5d9b890"

//INFO: Same as ADD_PED_DECORATION_FROM_HASHES, but only to be used in a corona screen with non-player cloned peds
//PARAM NOTES:	pedIndex - the index of the ped to apply the decoration decal to
//				CollectionNameHash - the hash of the name of the collection where the preset to apply is stored
//				PresetNameHash - the hash of the name of the preset to apply
//PURPOSE: Applies a decoration (tattoos, patches, etc.) to the specified ped.
NATIVE PROC  ADD_PED_DECORATION_FROM_HASHES_IN_CORONA(PED_INDEX PedIndex, INT CollectionNameHash, INT PresetNameHash) = "0x46f1674c56f2edd1"

//PARAM NOTES:	pCollectionName - the name of the collection where the preset to apply is stored
//				pPresetName - the name of the preset to apply
//PURPOSE: Returns the index for a preset in a given collection, returns -1 if preset is not found
NATIVE FUNC INT GET_PED_DECORATION_INDEX(STRING pCollectionName, STRING pPresetName) = "0x4668225794aed6df"

//PARAM NOTES:	pCollectionName - the name of the collection where the preset lives
//				pPresetName - the name of the preset 
//PURPOSE: Returns the zone for a preset in a given collection, returns PDZ_INVALID if preset is not found
NATIVE FUNC PED_DECORATION_ZONE GET_PED_DECORATION_ZONE(STRING pCollectionName, STRING pPresetName) = "0x63736bd94c0f4d3f"

//PARAM NOTES:	CollectionNameHash - hash of the name of the collection where the preset lives
//				PresetNameHash - hash of the name of the preset 
//PURPOSE: Same as GET_PED_DECORATION_ZONE but with hashes
NATIVE FUNC PED_DECORATION_ZONE GET_PED_DECORATION_ZONE_FROM_HASHES(INT CollectionNameHash, INT PresetNameHash) = "0x56bbaa4009d6694c"

//PARAM NOTES:	pedIndex - the index of the ped to apply the decoration decal to
//				collectionIndex - index of the collection, can be in range [0, GET_NUM_PED_DECORATION_COLLECTIONS()]
//				pPresetName - the name of the preset to apply
//PURPOSE: Applies a decoration (tattoos, patches, etc.) to the specified ped.
NATIVE PROC  ADD_PED_DECORATION_BY_INDEX(PED_INDEX PedIndex, INT collectionIndex, STRING pPresetName) = "0x83e6ae9a0bc6762f"

//PARAM NOTES:	collectionIndex - index of the collection, can be in range [0, GET_NUM_PED_DECORATION_COLLECTIONS()]
//				pPresetName - the name of the preset to apply
//PURPOSE: Returns the index for a preset in a given collection, returns -1 if preset is not found
NATIVE FUNC INT GET_PED_DECORATION_INDEX_BY_INDEX(INT collectionIndex, STRING pPresetName) = "0x9045d4cdc31497ab"

//PARAM NOTES:	collectionIndex - index of the collection, can be in range [0, GET_NUM_PED_DECORATION_COLLECTIONS()]
//				pPresetName - the name of the preset 
//PURPOSE: Returns the zone for a preset in a given collection, returns PDZ_INVALID if preset is not found
NATIVE FUNC PED_DECORATION_ZONE GET_PED_DECORATION_ZONE_BY_INDEX(INT collectionIndex, STRING pPresetName) = "0x8fa9eadec9ad11a5"

//INFO: 
//PARAM NOTES:	pedIndex - the index of the ped to clear the decoration decals from
//PURPOSE:clears all the decorations that have been applied to the specified ped. More Info..
NATIVE PROC  CLEAR_PED_DECORATIONS(PED_INDEX PedIndex) = "0x2623685d22462f7e"

//INFO: 
//PARAM NOTES:	pedIndex - the index of the ped to clear the decorations (tattoos, logos, dirt, etc) from 
//PURPOSE:clears all the decorations that have been applied to the specified ped. Leaves scars adn bruises alone
NATIVE PROC  CLEAR_PED_DECORATIONS_LEAVE_SCARS(PED_INDEX PedIndex) = "0xa2ec5e23185c2379"

//INFO: 
//PARAM NOTES:	pedIndex - the index of the ped to clear script decorations from (leaves non-streamed decorations, scars, etc.)
//PURPOSE:clears all the decorations that have been applied to the specified ped with ADD_PED_DECORATION_FROM_HASHES()
NATIVE PROC  CLEAR_PED_SCRIPT_DECORATIONS(PED_INDEX PedIndex) = "0x67e8c96c6978e3d3"

//PURPOSE: Returns the number of decoration collections
NATIVE FUNC INT GET_NUM_PED_DECORATION_COLLECTIONS() = "0x599f9e3aadd8fc85"

//INFO: 
//PARAM NOTES:
//PURPOSE: Clears any visible damage on the ped
NATIVE PROC RESET_PED_VISIBLE_DAMAGE (PED_INDEX PedIndex) = "0x8fa4320f1f0bbd88"

//INFO: 
//PARAM NOTES:
//PURPOSE: Call this and make sure it returns TRUE before calling GET_PED_BONE_COORDS
NATIVE FUNC BOOL WAS_PED_SKELETON_UPDATED(PED_INDEX PedIndex) = "0x96ba485a3be35be8"

//INFO: Check that WAS_PED_SKELETON_UPDATED returns TRUE before calling this function
//PARAM NOTES:
//PURPOSE: Gets the coord of the peds bone
NATIVE FUNC VECTOR GET_PED_BONE_COORDS(PED_INDEX PedIndex, PED_BONETAG bone, VECTOR vecOffset) = "0x6ea486ff6d815b4b"

//INFO: 
//PARAM NOTES:
//PURPOSE: Have an NM agent look at the specified position
NATIVE FUNC VECTOR NM_HEAD_LOOK(PED_INDEX PedIndex, VECTOR vecLookPosition) = "0xd22f8cf6904bc96e"

//INFO: 
//PARAM NOTES: NM_START_PARAM and  NM_STR in nm_strings.sch
//                          The messages type are the ones in the enum list that end in _MSG. These are the message names, as opposed to the params, and are all multiples of 20 so we can identify them. 
//PURPOSE: Create a Natural motion message.  More info..
NATIVE PROC CREATE_NM_MESSAGE               (NM_START_PARAM StartParam, NM_STR MessageType) = "0xee9b674e13c9129d"

//INFO: Only meant for debugging NM usage. Shouldn't be used in-game!!
//PARAM NOTES: nPedIndex: the ped to give the task to; bDoBlendFromNM: whether to blend back to animation or not.
//
//PURPOSE: Used for debugging the transition between bind pose in NM and pure animation.
NATIVE PROC TOGGLE_NM_BINDPOSE_TASK (PED_INDEX nPedIndex, BOOL bDoBlendFromNM) = "0xfab1d98f88be6fca"

//INFO:   http://10.11.23.14/wiki/index.php?title=NATURAL_MOTION_SCRIPTER_WALKTHROUGH
//PARAM NOTES:
//PURPOSE: Sends the previously allocated NM message to a ped  More info..
NATIVE PROC GIVE_PED_NM_MESSAGE                 (PED_INDEX PedIndex) = "0xe95ee348fd0fc5fe"

//INFO: 
//PARAM NOTES:
//PURPOSE: Sets a float value in a previously created message. 
NATIVE PROC SET_NM_MESSAGE_FLOAT            (NM_STR MessageParam, FLOAT fValue) = "0x28426b0b7fd09ff7"

//INFO: 
//PARAM NOTES:
//PURPOSE: Sets an int value in a previously created message. 
NATIVE PROC SET_NM_MESSAGE_INT              (NM_STR MessageParam, INT nValue) = "0xcd52d68c49645c23"

//INFO: 
//PARAM NOTES:
//PURPOSE: Sets a bool value in a previously created message. 
NATIVE PROC SET_NM_MESSAGE_BOOL             (NM_STR MessageParam, BOOL bValue) = "0x6208b806da45f36e"

//INFO: 
//PARAM NOTES:
//PURPOSE:  Sets a vector value in a previously created message. 
NATIVE PROC SET_NM_MESSAGE_VEC3             (NM_STR MessageParam, VECTOR vValue) = "0x56928b1a14d0a2f5"

//INFO: 
//PARAM NOTES:
//PURPOSE:
NATIVE PROC SET_NM_MESSAGE_INSTANCE_INDEX   (NM_STR MessageParam, PED_INDEX PedIndex, VEHICLE_INDEX VehicleIndex, OBJECT_INDEX ObjectIndex) = "0xf1dad29fdfd242cc"

//INFO: 
//PARAM NOTES:
//PURPOSE:
NATIVE PROC SET_NM_MESSAGE_STRING           (NM_STR MessageParam, STRING sValue) = "0xcebea0716d5b499b"

//INFO: 
//PARAM NOTES:
//PURPOSE: Sets a pose that the natural motion will drive too
NATIVE PROC SET_PED_NM_ANIM_POSE                (PED_INDEX PedIndex, STRING pAnimDictName, STRING pAnimName, float fPhase) = "0x22f60ad831e2d9f6"

//INFO: 
//PARAM NOTES:
//PURPOSE:
NATIVE FUNC BOOL GET_PED_NM_FEEDBACK            (PED_INDEX PedIndex, NM_STR MessageFeedback, NM_FEEDBACK_TYPES FeedbackType) = "0x5f67cdeeb8429588"

//INFO: 
//PARAM NOTES:
//PURPOSE: Sets if the ped will ragdoll if the player collides with then.
NATIVE PROC SET_PED_CAN_RAGDOLL_FROM_PLAYER_IMPACT(PED_INDEX PedIndex, BOOL bAllow) = "0x3f990964e4a5669a"


//INFO: 
//PARAM NOTES: 
//PURPOSE: Sets the friction of corpse ragdolls
NATIVE PROC SET_CORPSE_RAGDOLL_FRICTION(PED_INDEX PedIndex, FLOAT friction) = "0x006c6a83fa52591f"

//INFO: Should call this function when a ped dies and has begun the dead task
//PARAM NOTES: Default vals for corpses on flat ground are velTolerance of 0.01 and internalVelTolerance of 0.4.  So maybe double or triple those values for non-stable situations.
//PURPOSE: Sets the sleep tolerances of corpse ragdolls
NATIVE PROC SET_CORPSE_SLEEP_TOLERANCES(PED_INDEX PedIndex, FLOAT velTolerance, FLOAT internalVelTolerance) = "0x2e92957b9e4a0784"

//INFO: Should call this function when a ped dies
//PARAM NOTES: 
//PURPOSE: Toggles whether a corpse needs the objects in it's island to sleep with the corpse.  Set to true if you want a corpse
//         to freeze and attach to an active boat or plane, for example.
NATIVE PROC SET_CORPSE_SLEEPS_ALONE(PED_INDEX PedIndex, BOOL sleepsAlone) = "0x44f13e14d41ea3c9"

// INFO: 
// PARAM NOTES: iSlot is an index into an array of config data for a particular vehicle max of 3 slots (0-2), iFlags is a bitset see enum VEHICLE_ENTRY_CONFIG_FLAGS
// PURPOSE: Force a ped to use front or rear seats for a particular vehicle, if no vehicle is specified, it is assumed this is to be applied for any vehicle
// this has the potential to cause conflicts with other slots, if wanting to apply a setting for all vehicles, script should call CLEAR_ALL_PED_VEHICLE_FORCED_SEAT_USAGE
// beforehand
NATIVE PROC SET_PED_VEHICLE_FORCED_SEAT_USAGE(PED_INDEX iPedIndex, VEHICLE_INDEX iVehicleIndex, INT iSlot, INT iFlags, VEHICLE_SEAT seat = VS_ANY_PASSENGER) = "0x3c77f1ec499d217f"

// INFO: 
// PARAM NOTES: 
// PURPOSE: Clear out cached cover point on the ped
NATIVE PROC CLEAR_COVER_POINT_FOR_PED(PED_INDEX iPedIndex) = "0x619b6eff5ae09b17"

// INFO: 
// PARAM NOTES:
// PURPOSE: Clear out any forced seat usage for the ped
NATIVE PROC CLEAR_ALL_PED_VEHICLE_FORCED_SEAT_USAGE(PED_INDEX iPedIndex) = "0x3f284a8014906af7"

// INFO: 
// PARAM NOTES:
// PURPOSE: Query forced seat usage settings
NATIVE FUNC VEHICLE_INDEX GET_VEHICLE_AND_FLAGS_FOR_PEDS_FORCED_SEAT_USAGE(PED_INDEX iPedIndex, INT iSlot, INT& iFlags) = "0xf9cd14464039897c"

// INFO: This function will make sure that if any of these flags -> PRF_ForcePedToUseFrontSeats/PRF_ForcePedToUseRearSeats <- is set
// the ped will only get into the front/rear of the specified vehicle (assuming bForcePedToUseSeats is set to true). If bForcePedToUseSeats 
// is false the player will enforce the the rule for ANY vehicle if the flags are set.
// PARAM NOTES:
// PURPOSE: To make sure that the ped only gets in the front or back of a specified vehicle.
NATIVE PROC FORCE_PED_TO_USE_SPECIFIED_SEATS(PED_INDEX iPedIndex, VEHICLE_INDEX iVehicleIndex, BOOL bForcePedToUseSeats) = "0xa4885bc60a517ba5"

//INFO: 
//PARAM NOTES: VEHICLE_KNOCKOFF in commands_ped.sch
//PURPOSE: Sets that a ped can be knocked off. More info..
NATIVE PROC SET_PED_CAN_BE_KNOCKED_OFF_VEHICLE(PED_INDEX PedIndex, VEHICLE_KNOCKOFF CanBeKnockedOffFlag) = "0xb11c0cf5ccdfe10a"

//INFO: 
//PARAM NOTES:
//PURPOSE: Determines if a ped can be knocked off their vehicle (returns false if the ped is not on an open vehicle, if the ped is set to not be 
//knocked off the vehicle or if the ped cannot go into ragdoll from falling off their vehicle)
NATIVE FUNC BOOL CAN_KNOCK_PED_OFF_VEHICLE(PED_INDEX PedIndex) = "0x15b724566dc371c1"

//INFO: 
//PARAM NOTES:
//PURPOSE: Knocks a ped off an open vehicle.
NATIVE PROC KNOCK_PED_OFF_VEHICLE(PED_INDEX PedIndex) = "0x5aff9de62c9eb9a4"

//~>                                    Ped Bike Commands                                   <~

//INFO: 
//PARAM NOTES:
//PURPOSE: Checks if a ped is on a bike.
NATIVE FUNC BOOL IS_PED_ON_ANY_BIKE(PED_INDEX PedIndex) = "0x45052a4871a67255"


/////////////////////// !!! DEPRECATED - Use knock off vehicle commands above !!! /////////////////////
//INFO: 
//PARAM NOTES: BIKE_KNOCKOFF in commands_ped.sch
//PURPOSE: Sets that a ped can be knocked off. More info..
NATIVE PROC SET_PED_CAN_BE_KNOCKED_OFF_BIKE(PED_INDEX PedIndex, BIKE_KNOCKOFF CanBeKnockedOffFlag) = "0x86862a0e9a1b98ba"

/////////////////////// !!! DEPRECATED - Use knock off vehicle commands above !!! /////////////////////
//INFO: 
//PARAM NOTES:
//PURPOSE: Determines if a ped can be knocked off their bike (returns false if the ped is not on a bike, if the ped is set to not be 
//knocked off the bike or if the ped cannot go into ragdoll from falling off a bike)
NATIVE FUNC BOOL CAN_KNOCK_PED_OFF_BIKE(PED_INDEX PedIndex) = "0x22dfba04555d690c"

/////////////////////// !!! DEPRECATED - Use knock off vehicle commands above !!! /////////////////////
//INFO: 
//PARAM NOTES:
//PURPOSE: Knocks a ped off the bike.
NATIVE PROC KNOCK_PED_OFF_BIKE(PED_INDEX PedIndex) = "0x8c7b7c91763215af"

//INFO: 
//PARAM NOTES:
//PURPOSE: Give the ped a helmet
NATIVE PROC GIVE_PED_HELMET(PED_INDEX PedIndex, BOOL DontTakeOffHelmet = TRUE, PED_COMP_FLAGS HelmetPropFlag = PV_FLAG_DEFAULT_HELMET, INT OverwriteHelmetTexId = -1 ) = "0x792d27bee2a1111b"

//INFO: 
//PARAM NOTES:
//PURPOSE: Remove a helmet from a ped
NATIVE PROC REMOVE_PED_HELMET(PED_INDEX PedIndex, BOOL ForceRemove) = "0x706235cbf64de7fa"

//INFO: 
//PARAM NOTES:
//PURPOSE: Makes ped remove its helmet
NATIVE PROC PED_TAKE_OFF_HELMET(PED_INDEX PedIndex) = "0x09556acd2918fd0d"

//INFO: 
//PARAM NOTES:
//PURPOSE: Returns true if ped is currently removing its helmet
NATIVE FUNC BOOL IS_PED_TAKING_OFF_HELMET(PED_INDEX PedIndex) = "0xd1d8370ff6457e74"

//INFO: 
//PARAM NOTES:
//PURPOSE: Sets if a ped will use a helmet
NATIVE PROC SET_PED_HELMET(PED_INDEX PedIndex, BOOL Enable) = "0xa84812d8d6ee8d32"

//INFO: 
//PARAM NOTES:
//PURPOSE: Sets the helmet flag for which tpye of prop to use
NATIVE PROC SET_PED_HELMET_FLAG(PED_INDEX PedIndex, PED_COMP_FLAGS HelmetPropFlag = PV_FLAG_DEFAULT_HELMET) = "0x9ace35042165329f"

//INFO: 
//PARAM NOTES: In MP this is can only be used for the bike/quad helmets bought in a shop.
//PURPOSE: Sets the helmet prop index to be used instead of default, -1 uses default. This can't be set if the ped has a helmet on already.
NATIVE PROC SET_PED_HELMET_PROP_INDEX(PED_INDEX PedIndex, INT OverwriteHelmetPropIndex = -1, BOOL bIncludeBicycles = TRUE) = "0x18d5b5a3b3d122e3"

//INFO: 
//PARAM NOTES:
//PURPOSE: Sets up prop ID for helmet versions with visor up and down, and sets if current equipped version has visor up or down
NATIVE PROC SET_PED_HELMET_VISOR_PROP_INDICES(PED_INDEX PedIndex, BOOL bVisorUp = FALSE, INT HelmetVisorUpPropId = -1, INT HelmetVisorDownPropId = -1) = "0x1c031d6376af8dce"

//INFO: 
//PARAM NOTES:
//PURPOSE: Returns true if ped helmet visor is up
NATIVE FUNC BOOL IS_PED_HELMET_VISOR_UP(PED_INDEX PedIndex) = "0xb5619e4e154aa4e9"

//INFO: 
//PARAM NOTES: In MP this is can only be used for the bike/quad helmets bought in a shop. 
//PURPOSE: Sets the helmet texture index to be used instead of default, -1 uses default. This can't be set if the ped has a helmet on already.
NATIVE PROC SET_PED_HELMET_TEXTURE_INDEX(PED_INDEX PedIndex, INT OverwriteHelmetTexIndex = -1) = "0xbc38d693dcd5686b"

//INFO: 
//PARAM NOTES:
//PURPOSE:  Does the ped have a helmet
NATIVE FUNC BOOL IS_PED_WEARING_HELMET(PED_INDEX PedIndex) = "0x5540488889ec816a"

//INFO: 
//PARAM NOTES:
//PURPOSE:  Clears the ped's stored hat prop (cached when removing the hat when entering a vehicle, usually restored when getting out)
//			If this is called when in a vehicle, the stored hat prop will not get reapplied upon exit
NATIVE PROC CLEAR_PED_STORED_HAT_PROP(PED_INDEX PedIndex) = "0x1e35410c0af7b0b7"

//INFO: 
//PARAM NOTES:
//PURPOSE: Returns the head prop which will be restored once taking off a helmet, -1 nothing is stored
NATIVE FUNC INT GET_PED_HELMET_STORED_HAT_PROP_INDEX(PED_INDEX PedIndex) = "0x88fed828c9dfbe76"

//INFO: 
//PARAM NOTES:
//PURPOSE:  Returns the head prop texture which will be restored once taking off a helmet, -1 nothing is stored
NATIVE FUNC INT GET_PED_HELMET_STORED_HAT_TEX_INDEX(PED_INDEX PedIndex) = "0x2fb3ee2b80255afd"

//INFO: 
//PARAM NOTES:
//PURPOSE:  Returns if the current head prop has PV_FLAG_DEFAULT_HELMET  PV_FLAG_RANDOM_HELMET  PV_FLAG_SCRIPT_HELMET flag set.
NATIVE FUNC BOOL IS_CURRENT_HEAD_PROP_A_HELMET(PED_INDEX PedIndex) = "0xbd965d343583e7b0"

//INFO: 
//PARAM NOTES:
//PURPOSE: Adds to the vehicle-helmet association hashmap. Ped will select a helmet at random from the list of specified helmets that are assigned to it's current vehicle type.
//         SET_PED_HELMET_PROP_INDEX takes precedence over this. 
NATIVE PROC ADD_VEHICLE_HELMET_ASSOCIATION(MODEL_NAMES VehicleModelName, INT iHelmetPropIndex) = "0x6079c0948eaea3ed"

//INFO: 
//PARAM NOTES:
//PURPOSE:  Clear the helmet associations for a specific vehicle type.
NATIVE PROC CLEAR_VEHICLE_HELMET_ASSOCIATION(MODEL_NAMES VehicleModelName) = "0x5f65e86c449b21e6"

//INFO: 
//PARAM NOTES:
//PURPOSE:  Clears the entire vehicle-helmet association hashmap.
NATIVE PROC CLEAR_ALL_VEHICLE_HELMET_ASSOCIATIONS() = "0xec9f07181e86857b"


//~>                                Ped Kill / Die Commands                             <~ 

//INFO: 
//PARAM NOTES:
//PURPOSE: Is ped trying to enter a locked vehicle.
NATIVE FUNC BOOL IS_PED_TRYING_TO_ENTER_A_LOCKED_VEHICLE (PED_INDEX PedIndex) = "0x65afecbe42149b44"


//~>                                Ped to Ped Interaction Commands                             <~

//INFO: 
//PARAM NOTES:
//PURPOSE: Checks that the peds head is looking at the target ped.
NATIVE FUNC BOOL IS_PED_HEADTRACKING_PED  (PED_INDEX FirstPedIndex, PED_INDEX SecondPedIndex) = "0xb15ef36ad557325b"

//INFO: 
//PARAM NOTES:
//PURPOSE: Checks angle between the 2 peds.
NATIVE FUNC BOOL IS_PED_FACING_PED(PED_INDEX PedIndex1, PED_INDEX PedIndex2, FLOAT Degrees) = "0x2e7f5417d4f4dd69"

//~>                                Ped Variation Commands                              <~

//INFO: Each ped model can have several drawables for each component. Each drawable can have several textures. 
//PARAM NOTES:
//PURPOSE:  Gets the index of the current drawable (geometry) for the specified part of the ped's body (component). More infp..
NATIVE FUNC INT GET_PED_DRAWABLE_VARIATION(PED_INDEX PedIndex, PED_COMPONENT ComponentNumber) = "0x5355baa621c153cf"

//INFO: Each ped model can have several drawables for each component. Each drawable can have several textures. 
//PARAM NOTES:
//PURPOSE: Gets the total number of different drawables for the specified part of the ped's body (component).  More info..
NATIVE FUNC INT GET_NUMBER_OF_PED_DRAWABLE_VARIATIONS(PED_INDEX PedIndex, PED_COMPONENT ComponentNumber) = "0x37684f94e628d1ac"

//INFO: Each ped model can have several drawables for each component. Each drawable can have several textures. 
//PARAM NOTES:
//PURPOSE: Gets the index of the current texture variation for the specified ped component (part of the body)  More info..
NATIVE FUNC INT GET_PED_TEXTURE_VARIATION(PED_INDEX PedIndex, PED_COMPONENT ComponentNumber) = "0xf1050e548c37f4a5"

//INFO: Each ped model can have several drawables for each component. Each drawable can have several textures. 
//PARAM NOTES:
//PURPOSE: Gets the total number of different textures for the specified drawable for the component (body part) for the ped's model.  More info..
NATIVE FUNC INT GET_NUMBER_OF_PED_TEXTURE_VARIATIONS(PED_INDEX PedIndex, PED_COMPONENT ComponentNumber, INT DrawableNumber) = "0x91e7da9eaffb9499"

//PARAM NOTES:
//PURPOSE: Gets the total number of different prop drawables for the specified prop
NATIVE FUNC INT GET_NUMBER_OF_PED_PROP_DRAWABLE_VARIATIONS(PED_INDEX PedIndex, PED_PROP_POSITION PropPosition) = "0x83174885c2f9e9d2"

//PARAM NOTES:
//PURPOSE: Gets the total number of different prop texture variations for the specified prop and drawable
NATIVE FUNC INT GET_NUMBER_OF_PED_PROP_TEXTURE_VARIATIONS(PED_INDEX PedIndex, PED_PROP_POSITION PropPosition, INT PropDrawable) = "0x7827f3e641387ab3"

//INFO: 
//PARAM NOTES:The returned palette index will be between 0 and 15.
//PURPOSE: Returns the index of the current palette variation for the current drawable of the specified component.  
NATIVE FUNC INT GET_PED_PALETTE_VARIATION(PED_INDEX PedIndex, PED_COMPONENT ComponentNumber) = "0x272ab65a4e7277b4"

//INFO: You might need to call GET_PED_DRAWABLE_VARIATION first to get the ped's current DrawableNumber.
//PARAM NOTES:
//PURPOSE:Checks if palette operations are available for the specified drawable. More info..
NATIVE FUNC BOOL GET_PED_HAS_PALETTE_VARIATIONS(PED_INDEX PedIndex, PED_COMPONENT ComponentNumber, INT DrawableNumber) = "0xd0b596b57ffef115"

//INFO: 
//PARAM NOTES:
//PURPOSE: Find applyOutfitData and populate outfitData structure with data found.
NATIVE FUNC BOOL GET_MP_OUTFIT_DATA_FROM_METADATA(MP_OUTFITS_DATA &outfitData, MP_OUTFITS_DATA_REQUEST &outfitDataRequest) = "0x9e594edbc398f0b7"

//INFO: 
//PARAM NOTES:
//PURPOSE: Look up a male apparel item in the script metadata and return its index, or -1 if not found
NATIVE FUNC INT GET_FM_MALE_SHOP_PED_APPAREL_ITEM_INDEX(INT nameHash) = "0xa713d1504e921b62"

//INFO: 
//PARAM NOTES:
//PURPOSE: Look up a female apparel item in the script metadata and return its index, or -1 if not found
NATIVE FUNC INT GET_FM_FEMALE_SHOP_PED_APPAREL_ITEM_INDEX(INT nameHash) = "0x033025c1430dd8e8"

//INFO:
//PARAM NOTES:
//PURPOSE:Checks if given variation is valid.
NATIVE FUNC BOOL IS_PED_COMPONENT_VARIATION_VALID(PED_INDEX PedIndex, PED_COMPONENT ComponentNumber, INT DrawableNumber, INT TextureNumber) = "0xebce16417d73f442"

//INFO:
//PARAM NOTES:
//PURPOSE: Returns TRUE if the specified ped drawable is only available on Gen9 platforms.
// The data for this exists in titleupdate\<branch>\common\data\gen9_exclusive_assets_peds.meta
NATIVE FUNC BOOL IS_PED_DRAWABLE_GEN9_EXCLUSIVE(PED_INDEX PedIndex, PED_COMPONENT ComponentID, INT DrawableID) = "0xa322b93edf3308c0"

//INFO:  This command sets the drawable and texture for one component of the ped's model. Each ped model can have several drawables for each component. 
//          Each drawable can have several textures. You should check that the new drawable index is within range for the component (body part) for the ped's model (using GET_NUMBER_OF_CHAR_DRAWABLE_VARIATIONS.
//          The new texture index should be within range for the new drawable (can be checked using GET_NUMBER_OF_CHAR_TEXTURE_VARIATIONS). ComponentNumber is taken from PED_COMPONENT in "commands_ped.sch" 
//PARAM NOTES:
//PURPOSE: Sets the drawable, texture and palette for the specified ped component.  More info..
NATIVE PROC SET_PED_COMPONENT_VARIATION(PED_INDEX PedIndex, PED_COMPONENT ComponentNumber, INT NewDrawableNumber, INT NewTextureNumber, INT NewPaletteNumber=0) = "0xe3752b10dc995e95"

//INFO: Ensures that any skin tones which appear in different textures will be consistent for a characte
//PARAM NOTES:
//PURPOSE: Randomly sets the drawables and textures for a ped from those available.  More info..
NATIVE PROC SET_PED_RANDOM_COMPONENT_VARIATION( PED_INDEX PedIndex, PED_RACE_TYPE race = PED_RACE_UNIVERSAL) = "0x6e9c0f9eac1f29fd"

//INFO: 
//PARAM NOTES:
//PURPOSE: Randomly sets ped props
NATIVE PROC SET_PED_RANDOM_PROPS(PED_INDEX PedIndex) = "0xc9cf12827770bd57"

//INFO: his might be useful if you create a ped, delete him and then create him again later and need him to look identical to his first appearance. 
//PARAM NOTES:
//PURPOSE: Sets all drawable and texture variations on the ped to 0.  More info..
NATIVE PROC SET_PED_DEFAULT_COMPONENT_VARIATION(PED_INDEX PedIndex) = "0xdcb52c614b3660ec"

//INFO: 
//PARAM NOTES:
//PURPOSE: Creates a blend from two other peds as parents. NOTE: Do not use SET_PED_HEAD_BLEND_DATA after using this command.
NATIVE PROC SET_PED_BLEND_FROM_PARENTS(PED_INDEX TargetPedIndex, PED_INDEX ParentPed1, PED_INDEX ParentPed2, FLOAT ParentBlend, FLOAT TexBlend = -1.0) = "0x2ef65220421a8b50"

//INFO: 
//PARAM NOTES:
//PURPOSE: Updates a ped blend created with SET_PED_BLEND_FROM_PARENTS. Use if parent blends have changed.
NATIVE PROC UPDATE_PED_CHILD_BLEND(PED_INDEX PedIndex) = "0xd44ed051bd2935fe"

//INFO: 
//PARAM NOTES:
//PURPOSE: Updates the blend value on a blend created with SET_PED_BLEND_FROM_PARENTS. Use this if blend between the parents needs changing but the parents are the same.
NATIVE PROC SET_NEW_PARENT_BLEND_VALUES(PED_INDEX PedIndex, FLOAT blend, FLOAT texBlend = -1.0) = "0x3a5663c87f0197c9"

//INFO: The data set with this function auguments the ped variation, it does _not_ replace it and a variation will be required on the ped too.
//PARAM NOTES:	PedIndex - index of ped to apply the head to
//				head0 - index of head of first parent (same as you would set with a component variation)
//				head1 - index of head of second parent
//				head2 - index of head used for minor genetic variation
//				tex0 - index of texture used for first parent (same as you would set with a component variation)
//				tex1 - index of texture used for second parent
//				tex2 - index of texture used for genetic variation
//				headBlend - the amount of blend between the two parent heads. 0.0 will be fully head0, 1.0 fully head1 and 0.5 will bea 50/50 mix between them
//				texBlend - same as headBlend only for the textures
//				varBlend - the amount of genetic variation applied. 0.0 is no variation and 1.0 will completely replace the parents with the third head. very small values should be used for this.
//PURPOSE: Sets all drawables and textures needed to create a blended multiplayer ped head.  More info..
NATIVE PROC SET_PED_HEAD_BLEND_DATA(PED_INDEX PedIndex, INT head0, INT head1, INT head2, INT tex0, INT tex1, INT tex2, FLOAT headBlend, FLOAT texBlend, FLOAT varBlend, BOOL parent = FALSE) = "0x58aec6e61e9195c4"

//INFO: Gets the current blend data for a given ped, this data can be fed back into SET_PED_HEAD_BLEND_DATA
NATIVE FUNC BOOL GET_PED_HEAD_BLEND_DATA(PED_INDEX PedIndex, scrPedHeadBlendData& targetBlendData) = "0xce44afeba40e631e"

//INFO:
//PARAM NOTES:
//PURPOSE: Updates the blend values on a previously set ped head blend. This is much cheaper and faster than using SET_PED_HEAD_BLEND_DATA, which should only be used once
NATIVE PROC UPDATE_PED_HEAD_BLEND_DATA(PED_INDEX PedIndex, FLOAT headBlend, FLOAT texBlend, FLOAT varBlend) = "0xc28edf6b742b7487"

//INFO:
//PARAM NOTES:
//PURPOSE: Returns the number of eye colors available for head blends
NATIVE FUNC INT GET_NUM_EYE_COLORS() = "0xdedf8e927d94a1cf"

//INFO:
//PARAM NOTES:
//PURPOSE: Sets the specified eye color index on the given ped
NATIVE PROC SET_HEAD_BLEND_EYE_COLOR(PED_INDEX PedIndex, INT colorIndex) = "0xad6af909b76be761"

//INFO:
//PARAM NOTES:
//PURPOSE: Gets the specified eye color index on the given ped
NATIVE FUNC INT GET_HEAD_BLEND_EYE_COLOR(PED_INDEX PedIndex) = "0x60aee53eba7fb84e"

//INFO: This function sets an overlay texture on a blended head. The ped index given needs to be an MP ped with a blended head, which means
//				SET_PED_HEAD_BLEND_DATA needs to have already been called on this ped before this function is called.
//PARAM NOTES:	PedIndex - index of ped to apply the head to
//				slot - The slot to set the overlay texture on, can be any of the following: 0 weathering, 1 facial hair, 2 eyebrow, 3 aging, 4 makeup, 5 damage, 6 base detail.
//				tex - index of overlay texture. use GET_PED_HEAD_OVERLAY_NUM to get the count for the slot
//				blend - the blend strength of the overlay. 0.0 = blend not visible, 1.0 = blend fully visible
//PURPOSE: Sets an overlay texture for the blended head of the given ped. More info...
NATIVE PROC SET_PED_HEAD_OVERLAY(PED_INDEX PedIndex, HEAD_OVERLAY_SLOT slot, INT tex, FLOAT blend) = "0xeea4716bed50e70e"

//INFO: 
//PARAM NOTES:
//PURPOSE: Update the blend value for the specific overlay slot. Needs to have been set with SET_PED_HEAD_OVERLAY previously.
NATIVE PROC UPDATE_PED_HEAD_OVERLAY_BLEND(PED_INDEX PedIndex, HEAD_OVERLAY_SLOT slot, FLOAT blend) = "0x9ce884f2da5f83b4"

//INFO: 
//PARAM NOTES:
//PURPOSE: Returns the current overlay texture index used on the specified ped and slot
NATIVE FUNC INT GET_PED_HEAD_OVERLAY(PED_INDEX PedIndex, INT slot) = "0x524d86f94d41f595"

//INFO: 
//PARAM NOTES:
//PURPOSE: Returns the total number of head blend overlay textures available for the given slot
NATIVE FUNC INT GET_PED_HEAD_OVERLAY_NUM(INT slot) = "0x3d91d10f4eb20d19"

//INFO: 
//PARAM NOTES:
//PURPOSE: Sets the tint index for the specified head blend overlay slot
NATIVE PROC SET_PED_HEAD_OVERLAY_TINT(PED_INDEX PedIndex, HEAD_OVERLAY_SLOT slot, RAMP_TYPE rampType, INT tint, INT tint2 = 0) = "0x091c6c826ff1f4bf"

//INFO: 
//PARAM NOTES:
//PURPOSE: Sets the tint index for the hair on the specified ped
NATIVE PROC SET_PED_HAIR_TINT(PED_INDEX PedIndex, INT tint, INT tint2 = 0) = "0x549d1c729f88a5f3"

//INFO: 
//PARAM NOTES:
//PURPOSE: If returned true, then passes back tint indexes for the hair on the specified ped
NATIVE FUNC BOOL GET_PED_HAIR_TINT(PED_INDEX PedIndex, INT& tint, INT& tint2) = "0xa17f1e4c38feda3f"

//INFO: 
//PARAM NOTES:
//PURPOSE: Returns the total number of available hair/overlay tints
NATIVE FUNC INT GET_NUM_PED_HAIR_TINTS() = "0x5540951a450d9a99"

//INFO: 
//PARAM NOTES:
//PURPOSE: Returns the total number of available makeup overlay tints
NATIVE FUNC INT GET_NUM_PED_MAKEUP_TINTS() = "0xec5e0799c4e9eb01"

//INFO: 
//PARAM NOTES:
//PURPOSE: Returns rgb of a hair tint color
NATIVE PROC GET_PED_HAIR_TINT_COLOR(INT tint, INT& red, INT& green, INT& blue) = "0x1e12f87d8ad6a8a4"

//INFO: 
//PARAM NOTES:
//PURPOSE: Returns rgb of a makeup tint color
NATIVE PROC GET_PED_MAKEUP_TINT_COLOR(INT tint, INT& red, INT& green, INT& blue) = "0x3a98a1b237b9fe36"

//INFO: 
//PARAM NOTES:
//PURPOSE: Returns if the specified tint is available for hair in the creator
NATIVE FUNC BOOL IS_PED_HAIR_TINT_FOR_CREATOR(INT tint) = "0xee482139c611b9cc"

//INFO: 
//PARAM NOTES:
//PURPOSE: Returns the artist recommended secondary tint for a specified tint in the creator
NATIVE FUNC INT GET_DEFAULT_SECONDARY_TINT_FOR_CREATOR(INT tint) = "0x95246dc935a03da5"

//INFO: 
//PARAM NOTES:
//PURPOSE: Returns if the specified tint is available for accessories in the creator
NATIVE FUNC BOOL IS_PED_ACCS_TINT_FOR_CREATOR(INT tint) = "0xd8439398a09bd43f"

//INFO: 
//PARAM NOTES:
//PURPOSE: Returns if the specified tint is available for lipstick in the creator
NATIVE FUNC BOOL IS_PED_LIPSTICK_TINT_FOR_CREATOR(INT tint) = "0xd4011241b1f97322"

//INFO: 
//PARAM NOTES:
//PURPOSE: Returns if the specified tint is available for blusher in the creator
NATIVE FUNC BOOL IS_PED_BLUSH_TINT_FOR_CREATOR(INT tint) = "0x869c8d46ee635616"

//INFO: 
//PARAM NOTES:
//PURPOSE: Returns if the specified tint is available for hair in the barber shop
NATIVE FUNC BOOL IS_PED_HAIR_TINT_FOR_BARBER(INT tint) = "0x7c2f1e7e2ca7fc2f"

//INFO: 
//PARAM NOTES:
//PURPOSE: Returns the artist recommended secondary tint for a specified tint in the barber shop
NATIVE FUNC INT GET_DEFAULT_SECONDARY_TINT_FOR_BARBER(INT tint) = "0xe2d23ecfe5976c9b"

//INFO: 
//PARAM NOTES:
//PURPOSE: Returns if the specified tint is available for accessories in the barber shop
NATIVE FUNC BOOL IS_PED_ACCS_TINT_FOR_BARBER(INT tint) = "0xde82d711224af469"

//INFO: 
//PARAM NOTES:
//PURPOSE: Returns if the specified tint is available for lipstick in the barber shop
NATIVE FUNC BOOL IS_PED_LIPSTICK_TINT_FOR_BARBER(INT tint) = "0x07a81eb81b548019"

//INFO: 
//PARAM NOTES:
//PURPOSE: Returns if the specified tint is available for blusher in the barber shop
NATIVE FUNC BOOL IS_PED_BLUSH_TINT_FOR_BARBER(INT tint) = "0x3e23c81d86d7c3f5"

//INFO: 
//PARAM NOTES:
//PURPOSE: Returns if the specified tint is available for blusher in the barber shop
NATIVE FUNC BOOL IS_PED_BLUSH_FACEPAINT_TINT_FOR_BARBER(INT tint) = "0xe0a6a67c3ce62f06"

//INFO: 
//PARAM NOTES:
//PURPOSE: Returns if the specified hair drawable has a secondary hair tint available
NATIVE FUNC BOOL HAIR_STYLE_HAS_SECONDARY_HAIR_COLOR(MODEL_NAMES pedModelHash, INT hairDrawableId) = "0xab85ed5e039e2f71"

//INFO: 
//PARAM NOTES:
//PURPOSE: Returns if the specified hair drawable has a secondary accessory tint available
NATIVE FUNC BOOL HAIR_STYLE_HAS_SECONDARY_ACCS_COLOR(MODEL_NAMES pedModelHash, INT hairDrawableId) = "0x29b2d92c0e5d9e20"

//INFO: 
//PARAM NOTES:
//PURPOSE: Returns the tint index that best matches the specified hair texture from last gen peds
NATIVE FUNC INT GET_TINT_INDEX_FOR_LAST_GEN_HAIR_TEXTURE(MODEL_NAMES pedModelHash, INT hairDrawableId, INT hairTextureId) = "0x2e06c1a087108c70"

//INFO: 
//PARAM NOTES:
//PURPOSE: Sets a micro morph on the specified ped
NATIVE PROC SET_PED_MICRO_MORPH(PED_INDEX PedIndex, MICRO_MORPH_TYPE morphType, FLOAT blend) = "0x00a45035a743b400"

//INFO: 
//PARAM NOTES:
//PURPOSE: Returns true if no head blend processing is scheduled or in progress for this ped.
NATIVE FUNC BOOL HAS_PED_HEAD_BLEND_FINISHED(PED_INDEX PedIndex) = "0xa13a75665f7e0689"

//INFO: This function will release source assets and should be called when a ped is finished and no more changes
//		will be applied. For example, when creating a ped and the player has finished selecting everythin this
//		function should be called when no more changes can be done to the player. It also needs to be called
//		after the player has finished buying clothes or tattoos and other similar cases.
//PARAM NOTES:
//PURPOSE: Finalizes a head blend and releases source assets. Call this when a ped is finished. More...
NATIVE PROC FINALIZE_HEAD_BLEND(PED_INDEX PedIndex) = "0xad9047296f9ea375"

//INFO:
//PARAM NOTES:
//PURPOSE: Sets a custom mp ped palette color
NATIVE PROC SET_HEAD_BLEND_PALETTE_COLOR(PED_INDEX PedIndex, INT red, INT green, INT blue, INT colorIndex = 0) = "0x891b421a88aeb58d"

//INFO:
//PARAM NOTES:
//PURPOSE: Disables any previsouly set custom mp ped palette colors
NATIVE PROC DISABLE_HEAD_BLEND_PALETTE_COLOR(PED_INDEX PedIndex) = "0x3e329db5cfd8fc35"

//INFO:
//PARAM NOTES:
//PURPOSE: Returns the first index of the specified head blend head type
NATIVE FUNC INT GET_PED_HEAD_BLEND_FIRST_INDEX(HEAD_BLEND_HEAD_TYPE type) = "0x6ea7474b9396c6ff"

//INFO:
//PARAM NOTES:
//PURPOSE: Returns the number of heads available for the type specified
NATIVE FUNC INT GET_PED_HEAD_BLEND_NUM_HEADS(HEAD_BLEND_HEAD_TYPE type) = "0x4f025a52c10fead7"

//INFO: 
//PARAM NOTES:
//PURPOSE: Sets a component variation to preload into memory, without applying it on the ped
NATIVE FUNC INT SET_PED_PRELOAD_VARIATION_DATA(PED_INDEX PedIndex, PED_COMPONENT ComponentID, INT DrawableID, INT TextureID) = "0xf7438ef713cbdaac"

//INFO: 
//PARAM NOTES:
//PURPOSE: Releases a specific preloaded component
NATIVE PROC RELEASE_PED_COMPONENT_PRELOAD_VARIATION_DATA(PED_INDEX PedIndex, PED_COMPONENT ComponentID, INT DrawableID, INT TextureID) = "0xc2051e5d52180b96"

//INFO: 
//PARAM NOTES:
//PURPOSE: Returns true if the preload data set with SET_PED_PRELOAD_VARIATION_DATA is in memory.
NATIVE FUNC BOOL HAS_PED_PRELOAD_VARIATION_DATA_FINISHED(PED_INDEX PedIndex) = "0x5e34706debc06639"

//INFO: 
//PARAM NOTES:
//PURPOSE: Returns true if the preload data handle set with SET_PED_PRELOAD_VARIATION_DATA is in memory.
NATIVE FUNC BOOL HAS_PED_PRELOAD_VARIATION_DATA_HANDLE_FINISHED(PED_INDEX PedIndex, INT handle) = "0x9373bd653f0c5c63"

//INFO: Note that variation data set with SET_PED_PRELOAD_VARIATION_DATA counts towards the script memory budget.
//				For this reason it is important to use this command to release these assets as soon as you don't need them anymore.
//				In fact, you can call this command as soon as you have set the same variation with SET_PED_COMPONENT_VARIATION
//				since at that point the assets will be rendered on the ped and have references to keep them in memory.
//PARAM NOTES:
//PURPOSE: Releases the assets set with SET_PED_PRELOAD_VARIATION_DATA. More...
NATIVE PROC RELEASE_PED_PRELOAD_VARIATION_DATA(PED_INDEX PedIndex) = "0x6475234c10008e58"

//INFO:
//PARAM NOTES:
//PURPOSE: Releases the assets set with SET_PED_PRELOAD_VARIATION_DATA.
NATIVE PROC RELEASE_PED_PRELOAD_VARIATION_DATA_HANDLE(PED_INDEX PedIndex, INT handle) = "0x6b568734d4bffeeb"
        
//INFO: 
//PARAM NOTES:
//PURPOSE: Sets a ped prop to preload into memory, without applying it on the ped
NATIVE FUNC INT SET_PED_PRELOAD_PROP_DATA(PED_INDEX PedIndex, PED_PROP_POSITION Anchor, INT PropId, int TexId = 0) = "0x00b2fa06032579d8"

//INFO: 
//PARAM NOTES:
//PURPOSE: Returns true if the preload prop set with SET_PED_PRELOAD_PROP_DATA is in memory.
NATIVE FUNC BOOL HAS_PED_PRELOAD_PROP_DATA_FINISHED(PED_INDEX PedIndex) = "0x842411a372bc2b31"

//INFO: 
//PARAM NOTES:
//PURPOSE: Returns true if the preload prop handle set with SET_PED_PRELOAD_PROP_DATA is in memory.
NATIVE FUNC BOOL HAS_PED_PRELOAD_PROP_DATA_HANDLE_FINISHED(PED_INDEX PedIndex, INT handle) = "0x298d4abff6234486"

//INFO: Note that prop data set with SET_PED_PRELOAD_PROP_DATA counts towards the script memory budget.
//				For this reason it is important to use this command to release these assets as soon as you don't need them anymore.
//				In fact, you can call this command as soon as you have set the same prop with SET_PED_PROP_INDEX
//				since at that point the assets will be rendered on the ped and have references to keep them in memory.
//PARAM NOTES:
//PURPOSE: Releases the assets set with SET_PED_PRELOAD_PROP_DATA. More...
NATIVE PROC RELEASE_PED_PRELOAD_PROP_DATA(PED_INDEX PedIndex) = "0x5aa75ad81dae23c0"

//INFO:
//PARAM NOTES:
//PURPOSE: Releases the assets set with SET_PED_PRELOAD_PROP_DATA.
NATIVE PROC RELEASE_PED_PRELOAD_PROP_DATA_HANDLE(PED_INDEX PedIndex, INT handle) = "0xc9299657b1e0bc1e"

//INFO: 
//PARAM NOTES: PED_PROP_POSITION in commands_ped.sch
//PURPOSE: Get the id of the prop which has been assigned at the given position for the given ped.  More info..
NATIVE FUNC INT GET_PED_PROP_INDEX( PED_INDEX PedIndex, PED_PROP_POSITION Position) = "0xf2bc143f97765619"

//INFO: 
//PARAM NOTES: PED_PROP_POSITION in commands_ped.sch
//PURPOSE: Gets the texture index of the prop.  More info..
NATIVE FUNC INT GET_PED_PROP_TEXTURE_INDEX( PED_INDEX PedIndex, PED_PROP_POSITION Position) = "0x7252a84eced5e1d4"

//INFO: 
//PARAM NOTES: PED_PROP_POSITION in commands_ped.sch
//PURPOSE: Set the id of the prop at the given position for the given ped.   More info..
NATIVE PROC SET_PED_PROP_INDEX( PED_INDEX PedIndex, PED_PROP_POSITION Position, INT NewPropIndex, int NewTextIndex = 0, BOOL SyncWithBlend = FALSE) = "0xd9d122a54ffe62b8"

//INFO: 
//PARAM NOTES: 
//PURPOSE: knock off ped prop to the ground
NATIVE PROC KNOCK_OFF_PED_PROP( PED_INDEX PedIndex, BOOL bDamaged, BOOL bHats, BOOL bGlasses, BOOL bHelmets) = "0x45a9c303f69dd965"

//INFO: 
//PARAM NOTES: PED_PROP_POSITION in commands_ped.sch
//PURPOSE: Clear the prop slot for the given ped at the given position. More info.. 
NATIVE PROC CLEAR_PED_PROP( PED_INDEX PedIndex, PED_PROP_POSITION Position) = "0x920bb8b58bb3563a"

//INFO: 
//PARAM NOTES:
//PURPOSE: Removes all ped props
NATIVE PROC CLEAR_ALL_PED_PROPS( PED_INDEX PedIndex) = "0x9c726995fd3f93eb"

//INFO:
//PARAM NOTES:
//PURPOSE: Drops the ped's ambient prop (a coffee cup, etc.).
NATIVE PROC DROP_AMBIENT_PROP(PED_INDEX PedIndex) = "0x862c576661f1aaef"

//INFO: 
//PARAM NOTES:
//PURPOSE: Sets the parachute pack variation
NATIVE PROC SET_PED_PARACHUTE_PACK_VARIATION(PED_INDEX PedIndex) = "0x03f139aeb2b77d4a"

//INFO: 
//PARAM NOTES:
//PURPOSE: Clears the parachute pack variation
NATIVE PROC CLEAR_PED_PARACHUTE_PACK_VARIATION(PED_INDEX PedIndex) = "0x1d73428ceb1c4e64"

//INFO: 
//PARAM NOTES:
//PURPOSE: Sets the scuba gear variation
NATIVE PROC SET_PED_SCUBA_GEAR_VARIATION(PED_INDEX PedIndex) = "0x0cf7c79f71406fdc"

//INFO: 
//PARAM NOTES:
//PURPOSE: Clears the scuba gear variation
NATIVE PROC CLEAR_PED_SCUBA_GEAR_VARIATION(PED_INDEX PedIndex) = "0x950a45e233c248aa"

//INFO: 
//PARAM NOTES:
//PURPOSE: Is this ped using scuba gear variation?
NATIVE FUNC BOOL IS_USING_PED_SCUBA_GEAR_VARIATION(PED_INDEX PedIndex) = "0x873b4e9bcaf356ca"

//INFO: 
//PARAM NOTES:
//PURPOSE: Set Amount of stubble growth on a ped (0.0f is no stubbles, 1.0f is full grown. 
//		Growth will continue from the value set as time passes)
NATIVE PROC SET_PED_STUBBLE(PED_INDEX iPedIndex, FLOAT growth) = "0x1d763324abb92e4e"

//PURPOSE: fScale should be in the range 0.0f to 1.0f
NATIVE PROC SET_PED_ENVEFF_SCALE(PED_INDEX PedIndex, FLOAT fScale) = "0xebc16ef31fff5b24"

NATIVE FUNC FLOAT GET_PED_ENVEFF_SCALE(PED_INDEX PedIndex) = "0x209d59a7a05905eb"

//PURPOSE: Enable to true, before using SET_PED_ENVEFF_SCALE
NATIVE PROC SET_ENABLE_PED_ENVEFF_SCALE(PED_INDEX PedIndex, BOOL bEnable) = "0xa1f4f300bfa563e3"

NATIVE FUNC BOOL GET_ENABLE_PED_ENVEFF_SCALE(PED_INDEX PedIndex) = "0x4f021a1652208ff9"

//PURPOSE: AddCpv should be in the range 0.0f to 1.0f
NATIVE PROC SET_PED_ENVEFF_CPV_ADD(PED_INDEX PedIndex, FLOAT fCpvAdd) = "0xebff74dac1fa7525"

NATIVE FUNC FLOAT GET_PED_ENVEFF_CPV_ADD(PED_INDEX PedIndex) = "0x533fbb53a5e3f23e"


//PURPOSE: The three integer parameters should be in the range 0 to 255
NATIVE PROC SET_PED_ENVEFF_COLOR_MODULATOR(PED_INDEX PedIndex, INT Red, INT Green, INT Blue) = "0x7a0079d67714b00e"

//PURPOSE: The three float parameters should be in the range 0.0f to 1.0f
NATIVE PROC SET_PED_ENVEFF_COLOR_MODULATORF(PED_INDEX PedIndex, FLOAT Red_Float, FLOAT Green_Float, FLOAT Blue_Float) = "0x7f23f36c38af1d68"

NATIVE FUNC INT GET_PED_ENVEFF_COLOR_MODULATOR_R(PED_INDEX PedIndex) = "0x140f22200d3130d9"
NATIVE FUNC INT GET_PED_ENVEFF_COLOR_MODULATOR_G(PED_INDEX PedIndex) = "0x32237e85aedc1dac"
NATIVE FUNC INT GET_PED_ENVEFF_COLOR_MODULATOR_B(PED_INDEX PedIndex) = "0xf9b5481e28d915fb"

//PURPOSE: Sets ped emissive scale
NATIVE PROC SET_PED_EMISSIVE_SCALE(PED_INDEX PedIndex, FLOAT scale) = "0x786b3db2091c710c"
//PURPOSE: Gets ped emissive scale
NATIVE FUNC FLOAT GET_PED_EMISSIVE_SCALE(PED_INDEX PedIndex) = "0x5d0b188bde0b8a58"

//PURPOSE: Query if ped shader is ready to use
NATIVE FUNC BOOL IS_PED_SHADER_READY(PED_INDEX PedIndex) = "0x0c18153716ffbf62"


//PURPOSE: Crew Emblem control (enabled by default)
NATIVE PROC SET_PED_ENABLE_CREW_EMBLEM(PED_INDEX PedIndex, BOOL bEnable) = "0x96bd153fbb9efd5a"
//PURPOSE: Returns Crew Emblem control state: 0 (disabled), 1 (enabled), 2 (ped component not available for some reason (e.g. streaming not finished))
NATIVE FUNC INT	GET_PED_ENABLE_CREW_EMBLEM(PED_INDEX PedIndex) = "0x0ccfd47a3ccb0feb"

//INFO: 
//PARAM NOTES:
//PURPOSE: Trys to get closest random ped to a coord. 
NATIVE FUNC BOOL GET_CLOSEST_PED ( VECTOR VecCentreCoors, FLOAT Range, BOOL bScanRandomPeds, BOOL bScanMissionPeds, PED_INDEX &ClosestPedIndex, BOOL bCheckPlayerPeds = FALSE, BOOL bReturnPedsWithScriptedTasks = FALSE, PED_TYPE ExclusionPedType = PEDTYPE_INVALID) = "0x72e575062e5d1004"

//INFO: 
//PARAM NOTES: The default value for this flag is FALSE. It will be reset to FALSE automatically by both of those GET_..._PED commands once they have checked all peds.
//PURPOSE: Call this with TRUE before GET_CLOSEST_PED or GET_RANDOM_PED_AT_COORD if you want scenario peds to be checked too.   More info..
NATIVE PROC SET_SCENARIO_PEDS_TO_BE_RETURNED_BY_NEXT_COMMAND(BOOL bAllowScenarioPedsToBeGrabbed) = "0xca700bb27cecbe1c"

//INFO:
//PARAM NOTES:
//PURPOSE: Returns whether a given ped meets the given criteria to become script controlled
NATIVE FUNC BOOL GET_CAN_PED_BE_GRABBED_BY_SCRIPT(PED_INDEX PedIndex, BOOL bScanRandomPeds, BOOL bScanMissionPeds, BOOL bCheckIfThePedIsInAGroup = FALSE, BOOL bCheckIfThePedIsInAVehicle = FALSE, BOOL bCheckPlayerPeds = FALSE, BOOL bReturnDeadOrDyingPeds = FALSE, BOOL bReturnPedsWithScriptedTasks = FALSE, PED_TYPE ExclusionPedType = PEDTYPE_INVALID) = "0x0c285f0981ce9e32"

//INFO: Used primarily for cut scenes
//PARAM NOTES:
//PURPOSE: Requests the high detail model for this ped, if availible. More info.. 
NATIVE PROC REQUEST_PED_HIGH_DETAIL_MODEL (PED_INDEX ped) = "0x733ab0db2108c3eb"

//INFO: Used primarily for cut scenes
//PARAM NOTES:
//PURPOSE: Removes the peds loaded high detail model. More info.. 
NATIVE PROC REMOVE_PED_HIGH_DETAIL_MODEL (PED_INDEX ped) = "0x5a52fd251bea57a8"

//INFO: Enable better ped visibility tracking
//PARAM NOTES:
//PURPOSE: Request this ped to be tracked using hardware visibility tracking
NATIVE PROC REQUEST_PED_VISIBILITY_TRACKING (PED_INDEX ped) = "0xad3e09d1957bb0de"

//INFO: Enable better ped's vehicle during visibility tracking
//PARAM NOTES:
//PURPOSE: When set to true and a ped is in a vehicle the vehicle visibility will be tracked. This doesn't change the results returned by peds that are on foot.
NATIVE PROC REQUEST_PED_VEHICLE_VISIBILITY_TRACKING(PED_INDEX ped, BOOL trackvehicle) = "0x757e8acdd0fcb0ca"

//INFO: Enable better ped's vehicle during visibility tracking
//PARAM NOTES:
//PURPOSE: When set to true and REQUEST_PED_VEHICLE_VISIBILITY_TRACKING has been set, this will use a restricted bound instead of the full vehicle ones..
NATIVE PROC REQUEST_PED_RESTRICTED_VEHICLE_VISIBILITY_TRACKING(PED_INDEX ped, BOOL trackvehicle) = "0xe524a5d3744ad3ba"

//INFO: Enable better ped's vehicle during visibility tracking
//PARAM NOTES:
//PURPOSE: When set to true visibility tracking will use a smaller (head and shoulder only) bounding box.
NATIVE PROC REQUEST_PED_USE_SMALL_BBOX_VISIBILITY_TRACKING(PED_INDEX ped, BOOL useSmallBox) = "0x677c4c455bb319ca"

//INFO: Test for a ped visibility using hardware visibility tracking
//PARAM NOTES: the ped has to be first registered using REQUEST_PED_VISIBILITY_TRACKING
//PURPOSE: return true if the ped is visibile, false if not.
NATIVE FUNC BOOL IS_TRACKED_PED_VISIBLE (PED_INDEX ped) = "0x2cf76e57d8e46c1f"

//INFO: Test for a ped visibility using hardware visibility tracking
//PARAM NOTES: the ped has to be first registered using REQUEST_PED_VISIBILITY_TRACKING
//PURPOSE: return the number of visible pixels from a tracked ped. -1 means we have no ideas.
NATIVE FUNC INT GET_TRACKED_PED_PIXELCOUNT (PED_INDEX ped) = "0x2596d8147860a4f4"

//INFO: Checks whether a ped is being tracked
//	Should be used before calling GET_TRACKED_PED_PIXELCOUNT to make sure
//	the ped is being tracked - if the ped is not tracked, 
//	GET_TRACKED_PED_PIXELCOUNT will asert.
//PARAM NOTES:
//PURPOSE: 
NATIVE FUNC BOOL IS_PED_TRACKED (PED_INDEX ped) = "0xee1b31f257c88ef0"

//~>                                    Ped Defensive Area  Commands                                            <~                                  

//INFO: 
//PARAM NOTES: bUseCenterAsGoToPosition will have the ped go to the center position rather than closest position if the cover search fails
//			   bApplyToSecondaryDefensiveArea makes this command be used with the secondary/fallback defensive area instead of the primary one
//PURPOSE: Sets a non-axis aligned defensive area that a ped will use
NATIVE PROC SET_PED_ANGLED_DEFENSIVE_AREA ( PED_INDEX PedIndex, VECTOR Vec1,  VECTOR Vec2, FLOAT fRectangleWidth, BOOL bUseCenterAsGoToPosition = FALSE, BOOL bApplyToSecondaryDefensiveArea = FALSE ) = "0x0913ed93c4ab21cf"

//INFO: 
//PARAM NOTES: bUseCenterAsGoToPosition will have the ped go to the center position rather than closest position if the cover search fails
//			   bApplyToSecondaryDefensiveArea makes this command be used with the secondary/fallback defensive area instead of the primary one
//PURPOSE: Sets a defensive sphere that a ped will use.
NATIVE PROC SET_PED_SPHERE_DEFENSIVE_AREA( PED_INDEX PedIndex, VECTOR vCentre, FLOAT fRadius, BOOL bUseCenterAsGoToPosition = FALSE, BOOL bApplyToSecondaryDefensiveArea = FALSE ) = "0x1ee49aba6b11e9cf"

//INFO:
//PARAM NOTES: bApplyToSecondaryDefensiveArea makes this command be used with the secondary/fallback defensive area instead of the primary one
//PURPOSE: Attaches a defensive area SPHERE to a ped that other peds will stay inside.
NATIVE PROC SET_PED_DEFENSIVE_SPHERE_ATTACHED_TO_PED ( PED_INDEX PedIndex, PED_INDEX OtherPedIndex, VECTOR vCentre, FLOAT fRadius, BOOL bApplyToSecondaryDefensiveArea = FALSE ) = "0x79521de15ee9c694"

//INFO:
//PARAM NOTES: bApplyToSecondaryDefensiveArea makes this command be used with the secondary/fallback defensive area instead of the primary one
//PURPOSE: Attaches a defensive area SPHERE to a vehicle that the ped will stay inside.
NATIVE PROC SET_PED_DEFENSIVE_SPHERE_ATTACHED_TO_VEHICLE ( PED_INDEX PedIndex, VEHICLE_INDEX VehicleIndex, VECTOR vCentre, FLOAT fRadius, BOOL bApplyToSecondaryDefensiveArea = FALSE ) = "0x776d1abb5a5cc181"

//INFO:
//PARAM NOTES: bOrientateWithPed is true, the area will rotate along with the ped. 
//			   bApplyToSecondaryDefensiveArea makes this command be used with the secondary/fallback defensive area instead of the primary one
//PURPOSE: Attaches a defensive area to a ped that other peds will stay inside.  More info..
NATIVE PROC SET_PED_DEFENSIVE_AREA_ATTACHED_TO_PED ( PED_INDEX PedIndex, PED_INDEX OtherPedIndex, VECTOR Vec1,  VECTOR Vec2, FLOAT fRectangleWidth, BOOL bOrientateWithPed, BOOL bApplyToSecondaryDefensiveArea = FALSE ) = "0xa61720a36f4fba8d"

//INFO: 
//PARAM NOTES: bRemoveSecondaryDefensiveArea will remove the secondary/fallback defensive area instead of the primary one
//PURPOSE: Removes any defensive area given to the ped.
NATIVE PROC REMOVE_PED_DEFENSIVE_AREA ( PED_INDEX PedIndex, BOOL bRemoveSecondaryDefensiveArea = FALSE ) = "0x5174a997f4970ae4"

//INFO: 
//PARAM NOTES: vDefendFromPos appears to be a position rather than a direction. It's hard to tell from the code but it looks like it's the world position to aim at.
//			   bApplyToSecondaryDefensiveArea makes this command be used with the secondary/fallback defensive area instead of the primary one
//PURPOSE: Removes any defensive area given to the ped.
NATIVE PROC SET_PED_DEFENSIVE_AREA_DIRECTION( PED_INDEX PedIndex, VECTOR vDefendFromPos, BOOL bApplyToSecondaryDefensiveArea = FALSE ) = "0x6443573599f9e0da"

//INFO: Will return a zero vector if the requested defensive area does not exist
//PARAM NOTES: bApplyToSecondaryDefensiveArea if true will get you the position of the secondary area
//PURPOSE: Returns the position of the ped's defensive area
NATIVE FUNC VECTOR GET_PED_DEFENSIVE_AREA_POSITION( PED_INDEX PedIndex, BOOL bApplyToSecondaryDefensiveArea = FALSE ) = "0x4b7afb84113e9200"

//INFO: Checks if the ped's defensive area is active
//PARAM NOTES:bCheckSecondaryDefensiveArea - Setting this to true will check if they have a secondary defensive area active
//PURPOSE: 
NATIVE FUNC BOOL IS_PED_DEFENSIVE_AREA_ACTIVE (PED_INDEX PedIndex, BOOL bCheckSecondaryDefensiveArea) = "0xf38ab3e04879c43e"


//INFO: 
//PARAM NOTES:
//PURPOSE: Sets a peds preferred cover set
NATIVE PROC SET_PED_PREFERRED_COVER_SET ( PED_INDEX PedIndex, ITEMSET_INDEX ItemSetIndex ) = "0x929c816b693fe2df"

//INFO: 
//PARAM NOTES:
//PURPOSE: Removes a peds preferred cover set
NATIVE PROC REMOVE_PED_PREFERRED_COVER_SET( PED_INDEX PedIndex ) = "0xd5cc4d7c1f37624a"


//~>                                    Ped Scenario Commands                                       <~

//INFO: 
//PARAM NOTES:  bCancelActive = should this call cause peds already using points in the specified area to leave their points
//				bBlockPeds = does this area affect ped scenarios (either this or bBlockPeds must be TRUE)
//				bBlockVehicles = does this area affect vehicle scenarios
//PURPOSE: Sets an area where scenarios are blocked (This can be optionally networked to other players, for use in scripts that aren't run on all machines)
NATIVE FUNC SCENARIO_BLOCKING_INDEX ADD_SCENARIO_BLOCKING_AREA( VECTOR vMin, VECTOR vMax, BOOL bNetwork = FALSE, BOOL bCancelActive = TRUE, BOOL bBlockPeds = TRUE, BOOL bBlockVehicles = TRUE) = "0x2915d98110f23a29"

//INFO: 
//PURPOSE: Checks if an area already has scenario blocking area
NATIVE FUNC BOOL DOES_SCENARIO_BLOCKING_AREA_EXISTS( VECTOR vMin, VECTOR vMax) = "0x3c0cad62938c084b"

//INFO: 
//PARAM NOTES:
//PURPOSE: Removes any areas that are blocking screnarios
NATIVE PROC REMOVE_SCENARIO_BLOCKING_AREAS() = "0xec6d4f9c59cda6f5"

//INFO:
//PARAM NOTES:
// PURPOSE: Removes a scenario blocking area by SCENARIO_BLOCKING_INDEX (This can be optionally networked to other players, for use in scripts that aren't run on all machines)
NATIVE PROC REMOVE_SCENARIO_BLOCKING_AREA( SCENARIO_BLOCKING_INDEX ScenarioBlockingIndex, BOOL bNetwork = FALSE ) = "0x7bacbb4c6a7b18b7"

//INFO: 
//PARAM NOTES:
//PURPOSE: Sets scenarios peds spawn in an area. 
NATIVE PROC SET_SCENARIO_PEDS_SPAWN_IN_SPHERE_AREA (VECTOR vCenter, FLOAT fRadius, INT iMaxPeds) = "0x90d68b004de537b5"

//INFO: 
//PARAM NOTES: scenario strings are in
//PURPOSE: Checks that a ped is using a specific scenario.
NATIVE FUNC BOOL IS_PED_USING_SCENARIO(PED_INDEX PedIndex, STRING szScenario) = "0xfb9eb8de7a01979a"

//INFO: 
//PARAM NOTES:
//PURPOSE:  Checks that a ped is using any scenario.
NATIVE FUNC BOOL IS_PED_USING_ANY_SCENARIO(PED_INDEX PedIndex) = "0xbff766829e7783c7"

//INFO: Causes a ped to exit a scenario (via playing a panic outro if possible, otherwise normal) immediately, if possible.
//		The ped must currently be using a scenario.
//		Returns a boolean indicating whether the exit of the scenario has begun successfully.
//		Does not queue a response task to be used after the exit, that must be done separately.
//		It can be run on peds using CTaskUseScenario or CTaskCowerScenario.
//PARAM NOTES: The ped will react as if something dangerous happened at the given position.
//PURPOSE: Causes a ped to panic exit a scenario.
NATIVE FUNC BOOL SET_PED_PANIC_EXIT_SCENARIO(PED_INDEX PedIndex, VECTOR vDangerPosition) = "0xe1cec2a32b5066ca"

//INFO: 
//PARAM NOTES: bStart of true means to start cowering, bStart of false means to stop cowering.  The ped will also stop cowering if they receive a script command.
//PURPOSE:  Forces the given scenario ped to start or stop cowering in place.
NATIVE PROC TOGGLE_SCENARIO_PED_COWER_IN_PLACE(PED_INDEX PedIndex, BOOL bStart) = "0x6f84091d46f93fab"


//INFO: Causes a ped to perform a specific scenario action.  DEPRECATED EXCEPT FOR USE IN DEBUGGING!
//		DO NOT USE IN GAME SCRIPTS!
NATIVE FUNC BOOL TRIGGER_PED_SCENARIO_PANICEXITTOFLEE(PED_INDEX PedIndex, VECTOR vDangerPosition) = "0x8845cb81ec32b192"

//INFO: Causes a ped to perform specific scenario action.  DEPRECATED EXCEPT FOR USE IN DEBUGGING!
//		DO NOT USE IN GAME SCRIPTS!
NATIVE FUNC BOOL TRIGGER_PED_SCENARIO_PANICEXITTOCOMBAT(PED_INDEX PedIndex, PED_INDEX TargetIndex) = "0x8a979112b5fcaf34"

//INFO: Causes a ped to perform specific scenario action.  DEPRECATED EXCEPT FOR USE IN DEBUGGING!
//		DO NOT USE IN GAME SCRIPTS!
NATIVE FUNC BOOL TRIGGER_PED_SCENARIO_COWARDTHENRESUME(PED_INDEX PedIndex, PED_INDEX TargetIndex) = "0x05adf5d10205cb82"

//INFO: Causes a ped to perform specific scenario action.  DEPRECATED EXCEPT FOR USE IN DEBUGGING!
//		DO NOT USE IN GAME SCRIPTS!
NATIVE FUNC BOOL TRIGGER_PED_SCENARIO_COWARDTHENEXIT(PED_INDEX PedIndex, VECTOR vDangerPosition) = "0xf3e5ca8bfe0f787c"

//INFO: Causes a ped to perform specific scenario action.  DEPRECATED EXCEPT FOR USE IN DEBUGGING!
//		DO NOT USE IN GAME SCRIPTS!
NATIVE FUNC BOOL TRIGGER_PED_SCENARIO_AGGROTHENEXIT(PED_INDEX PedIndex, PED_INDEX TargetIndex) = "0x327a16cd001bf6c4"

//INFO: Causes a ped to perform specific scenario action.  DEPRECATED EXCEPT FOR USE IN DEBUGGING!
//		DO NOT USE IN GAME SCRIPTS!
NATIVE FUNC BOOL TRIGGER_PED_SCENARIO_SHOCKANIMATION(PED_INDEX PedIndex, PED_INDEX TargetIndex) = "0x7b9e55a26eb0b0db"

//INFO: Causes a ped to perform specific scenario action.  DEPRECATED EXCEPT FOR USE IN DEBUGGING!
//		DO NOT USE IN GAME SCRIPTS!
NATIVE FUNC BOOL TRIGGER_PED_SCENARIO_HEADLOOK(PED_INDEX PedIndex, VECTOR vDangerPosition) = "0x87fd0d04d53fbd99"

//INFO:  		When this ped receives its next script task, they will exit from their scenario using the normal scenario exit.
//		 		Exiting the scenario may take several frames while the ped is playing the exit animation.  Returns true if the position was successfully set.
//				If the ped is not currently using a scenario at the time of the command or 0,0,0 is specified as the reaction position,
//				then the ped will by default attempt to direct their exit forwards.
//PARAM NOTES:	PedIndex - the ped who should play a normal (unhurried) exit the next time they are given a script command.
//				vReactPosition - a position towards which the scenario ped should direct their exit.
//PURPOSE:		Control how the ped leaves their scenario when they get their next task.
NATIVE FUNC BOOL SET_PED_SHOULD_PLAY_DIRECTED_NORMAL_SCENARIO_EXIT(PED_INDEX PedIndex, VECTOR vReactPosition) = "0xde58df0125df4422"

//INFO:  		When this ped receives its next script task, they will exit from their scenario using the normal scenario exit.
//		 		Exiting the scenario may take several frames while the ped is playing the exit animation.
//PARAM NOTES:	PedIndex - the ped who should play a normal (unhurried) exit the next time they are given a script command.
//PURPOSE:		Control how the ped leaves their scenario when they get their next task.
NATIVE PROC SET_PED_SHOULD_PLAY_NORMAL_SCENARIO_EXIT(PED_INDEX PedIndex) = "0x0bf0ee0b51c31e49"

//INFO:  		When this ped receives its next script task, they will immediately blend out of their scenario.
//		 		They will quit their scenario task immediately.
//PARAM NOTES:	PedIndex - the ped who should exit immediately the next time they are given a script command.
//PURPOSE:		Control how the ped leaves their scenario when they get their next task.
NATIVE PROC SET_PED_SHOULD_PLAY_IMMEDIATE_SCENARIO_EXIT(PED_INDEX PedIndex) = "0x41fbe02637a70478"

//INFO:  		When this ped receives its next script task, they will do a flee exit from the scenario point.
//		 		It will take a few frames for the exit to be completed.  Unlike the other force exit commands, the ped must be using the scenario task
//				before this is called.  Returns true if the position was successfully set.
//PARAM NOTES:	vDangerPosition - a position that the ped will play their exit towards.
//PURPOSE:		Control how the ped leaves their scenario when they get their next task.
NATIVE FUNC BOOL SET_PED_SHOULD_PLAY_FLEE_SCENARIO_EXIT(PED_INDEX PedIndex, VECTOR vDangerPosition) = "0x63ac696ee80d33d1"

//INFO:  		When this ped needs to leave their scenario, set if they test for collision against the world when they leave.
//		 		This will prevent them from getting stuck in their point because there was nearby collision.  Use with care!
//				This command will also ignore the navmesh checks.
//PARAM NOTES:	PedIndex - the scenario ped.
//PURPOSE:		Control how the ped checks against world geometry when exiting scenarios.
NATIVE PROC SET_PED_SHOULD_IGNORE_SCENARIO_EXIT_COLLISION_CHECKS(PED_INDEX PedIndex, BOOL bIgnoreChecks) = "0x9da17163846e32fc"

//INFO:			When this ped needs to leave their scenario, set if they should test for valid navmesh when they leave.
//				This will prevent them from getting stuck in their point.  Use with care!
//PARAM NOTES:  PedIndex - the scenario ped.
//PURPOSE:		Control how the ped checks for a valid path when exiting scenarios.
NATIVE PROC SET_PED_SHOULD_IGNORE_SCENARIO_NAV_CHECKS(PED_INDEX PedIndex, BOOL bIgnoreChecks) = "0x1d30c0c13f529123"

//INFO:			When this ped is performing their scenario exit probes, all of the probes will be checked in one frame.
//				Use with caution!  This can cause performance issues if overused.
//PARAM NOTES:	PedIndex - the scenario ped
//PURPOSE:		Control how the ped probes to find a valid exit point.
NATIVE PROC SET_PED_SHOULD_PROBE_FOR_SCENARIO_EXITS_IN_ONE_FRAME(PED_INDEX PedIndex, BOOL bInOneFrame) = "0xdda920211a88c4f5"

//INFO: 
//PARAM NOTES:
//PURPOSE: Check if the ped is gesturing.
NATIVE FUNC BOOL IS_PED_GESTURING(PED_INDEX PedIndex) = "0x456470ef2d9f29c9"

//INFO: 
//PARAM NOTES:
//PURPOSE:  Sets that the ped can play gesture anims
NATIVE PROC SET_PED_CAN_PLAY_GESTURE_ANIMS(PED_INDEX PedIndex, BOOL bAllowGestureAnims) = "0xe54845b0a6c7bcd4"

//INFO: 
//PARAM NOTES:
//PURPOSE: Sets that a ped can use viseme anims
NATIVE PROC SET_PED_CAN_PLAY_VISEME_ANIMS(PED_INDEX PedIndex, BOOL bAllowVisemeAnims, PED_VISEME_FLAGS flags = PVF_NONE) = "0x902a8647c919e9db"

//INFO: 
//PARAM NOTES:
//PURPOSE: Sets that a ped is ignored by auto open door trigger volumes
NATIVE PROC SET_PED_IS_IGNORED_BY_AUTO_OPEN_DOORS(PED_INDEX PedIndex, BOOL bIgnored) = "0xec77988b5e6b57db"

//INFO: 
//PARAM NOTES:
//PURPOSE: Sets that a ped can play ambient idle anims. Even if set, ped can still play ambient base anims.
NATIVE PROC SET_PED_CAN_PLAY_AMBIENT_ANIMS(PED_INDEX PedIndex, BOOL bAlllowAmbientAnims) = "0x2378080c93821600"

//INFO: 
//PARAM NOTES:
//PURPOSE: Sets that a ped can play ambient base anims.
NATIVE PROC SET_PED_CAN_PLAY_AMBIENT_BASE_ANIMS(PED_INDEX PedIndex, BOOL bAlllowAmbientAnims) = "0xa3400358eee2b4a2"

//INFO:
//PARAM NOTES:
//PURPOSE: Tells the ped to immediately select, stream, and play an idle animation.  Ped must be running TaskAmbientClips.
NATIVE PROC TRIGGER_IDLE_ANIMATION_ON_PED(PED_INDEX PedIndex) = "0xc62d4b2ae5894d0e"

//INFO: 
//PARAM NOTES:
//PURPOSE: Enables/Disables arm ik
NATIVE PROC SET_PED_CAN_ARM_IK(PED_INDEX PedIndex, BOOL bEnableIK) = "0xf268885e0f9e2e0d"

//INFO: 
//PARAM NOTES:
//PURPOSE: Enables/Disables body recoil ik
NATIVE PROC SET_PED_CAN_BODY_RECOIL_IK(PED_INDEX PedIndex, BOOL bEnableIK) = "0xfb985a85c62ef073"

//INFO: 
//PARAM NOTES:
//PURPOSE: Enables/Disables head ik
NATIVE PROC SET_PED_CAN_HEAD_IK(PED_INDEX PedIndex, BOOL bEnableIK) = "0xd29a05000907be6b"

//INFO: 
//PARAM NOTES:
//PURPOSE: Enables/Disables leg ik
NATIVE PROC SET_PED_CAN_LEG_IK(PED_INDEX PedIndex, BOOL bEnableIK) = "0x25080da84575852b"

//INFO: 
//PARAM NOTES:
//PURPOSE: Enables/Disables torso ik
NATIVE PROC SET_PED_CAN_TORSO_IK(PED_INDEX PedIndex, BOOL bEnableIK) = "0xb0acbed00671fb07"

//INFO: 
//PARAM NOTES:
//PURPOSE: Enables/Disables torso react ik
NATIVE PROC SET_PED_CAN_TORSO_REACT_IK(PED_INDEX PedIndex, BOOL bEnableIK) = "0x6f2438ddbd108500"

//INFO: 
//PARAM NOTES:
//PURPOSE: Enables/Disables torso vehicle ik
NATIVE PROC SET_PED_CAN_TORSO_VEHICLE_IK(PED_INDEX PedIndex, BOOL bEnableIK) = "0x5d9f58d99a08750d"

//INFO: 
//PARAM NOTES:
//PURPOSE: Sets the name of the facial idle animation to use on the ped. will assert if the clip does not exist in the peds facial dictionary
NATIVE PROC SET_FACIAL_IDLE_ANIM(PED_INDEX PedIndex, STRING pClipName) = "0x0e68c20d239d68c6"

//INFO: 
//PARAM NOTES:
//PURPOSE: Resets the peds facial animation to the default
NATIVE PROC RESET_FACIAL_IDLE_ANIM(PED_INDEX PedIndex) = "0x7b80d958e9d5a3f1"

//INFO: 
//PARAM NOTES:
//PURPOSE: Plays a facial aniamtion on the ped from it's facial animation dictionary or from the specified dictionary (optional)
NATIVE PROC PLAY_FACIAL_ANIM(PED_INDEX PedIndex, STRING pClipName, STRING pClipDictName = NULL) = "0x1b7a6d8bcba5f722"

//INFO: 
//PARAM NOTES:
//PURPOSE: Changes the facial clipset on the ped
NATIVE PROC SET_FACIAL_CLIPSET(PED_INDEX PedIndex, STRING ClipSetName) = "0x48bbf48957099fcf"

//INFO: 
//PARAM NOTES:
//PURPOSE: Clears any script-specified facial clipset and reverts it back to the default
NATIVE PROC CLEAR_FACIAL_CLIPSET(PED_INDEX PedIndex) = "0xed17c23d9b3a6725"

//INFO: 
//PARAM NOTES:
//PURPOSE: Overrides any playing facial idle, to play this until cleared with .  If dictionary name is not specified then it will look in the ped's current facial clipset for it.
NATIVE PROC SET_FACIAL_IDLE_ANIM_OVERRIDE(PED_INDEX PedIndex, STRING pOverrideIdleClipName, STRING pOverrideIdleClipDictName = NULL) = "0x4ee98fb70f8a09de"

//INFO: 
//PARAM NOTES:
//PURPOSE: Clears any script-specified facial clipset and reverts it back to the default
NATIVE PROC CLEAR_FACIAL_IDLE_ANIM_OVERRIDE(PED_INDEX PedIndex) = "0x12fae55d27f5bc42"

//INFO: 
//PARAM NOTES:
//PURPOSE:Sets that a ped can do auto conversation look ats. 
NATIVE PROC SET_PED_CAN_USE_AUTO_CONVERSATION_LOOKAT (PED_INDEX PedIndex, BOOL bAllowAutoConversationLookAts) = "0x102d1a546fdb4b6d"

//INFO: 
//PARAM NOTES:
//PURPOSE: Set the primary lookat ped for the ped
NATIVE PROC SET_PED_PRIMARY_LOOKAT  (PED_INDEX FirstPedIndex, PED_INDEX SecondPedIndex) = "0xd4a45ce9770040ac"

//INFO: 
//PARAM NOTES:
//PURPOSE: Set the secondary lookat ped for the ped
NATIVE PROC SET_PED_SECONDARY_LOOKAT (PED_INDEX FirstPedIndex, PED_INDEX SecondPedIndex) = "0x4fb48af706996507"

//INFO: 
//PARAM NOTES:
//PURPOSE:	Returns true if the ped has received the event (this is similar to IS_PED_RESPONDING_TO_EVENT, 
//			but will work with blocking of non-temporary events).  EVENT_INVALID can be used to test if the ped has received any event.
NATIVE FUNC BOOL HAS_PED_RECEIVED_EVENT (PED_INDEX PedIndex, EVENT_NAMES EventType) = "0xd16a3d24df85c222"

//INFO: 
//PARAM NOTES:
//PURPOSE:	Returns true out if the ped can see the other ped (Clear LOS, withing viewing range)
//			Will only work if the ped has a hated relationship with the other ped.
//			Uses asynchronous LOS checks and detection so should be relatively cheap.
NATIVE FUNC BOOL CAN_PED_SEE_HATED_PED (PED_INDEX PedIndex, PED_INDEX OtherPedIndex) = "0x7e006f2e24f03bb4"


//~>                                        Ped Network                             <~

//INFO: This script command will assert if you try to give fake names to more than the supported number (currently 10). 
//          After calling this command on a ped, the specified name will be displayed above the peds head in the specified colour in the same style as the network player names.
//PARAM NOTES:
//PURPOSE: Gives the ped a fake network name and colour in order to simulate network players on script created peds.  More info..
NATIVE PROC GIVE_PED_FAKE_NETWORK_NAME(PED_INDEX PedIndex, STRING Name, INT Red, INT Green, INT Blue, INT alpha_param) = "0xaa03aa2359951bf3"

//INFO: This function is safe to call on a ped that does not have a fake network name given to him. 
//PARAM NOTES:
//PURPOSE: removes a fake network name (given by the GIVE_PED_FAKE_NETWORK_NAME command) from the specified ped.  More info..
NATIVE PROC REMOVE_FAKE_NETWORK_NAME_FROM_PED(PED_INDEX PedIndex) = "0x0255a3b0bbf0329a"

//~><                               General Ped Checks                              ><~

//INFO: 
//PARAM NOTES:
//PURPOSE: Checks the ped a specific modle
NATIVE FUNC BOOL IS_PED_MODEL(PED_INDEX PedIndex, MODEL_NAMES PedModelHashKey) = "0x59bbf1ca2f5cac75"

//INFO: 
//PARAM NOTES:
//PURPOSE: Checks if the ped is a male ped. Do not call this on a player ped. Use '!IS_PLAYER_FEMALE' instead.
NATIVE FUNC BOOL IS_PED_MALE(PED_INDEX PedIndex) = "0xecf091d7e67ff7f2"

//INFO: 
//PARAM NOTES:
//PURPOSE: Checks if the ped is human.
NATIVE FUNC BOOL IS_PED_HUMAN(PED_INDEX PedIndex) = "0xfd0bdfe16368a58a"


//~>                                General Ped Commands

//INFO: 
//PARAM NOTES:
//PURPOSE: Gets the age of the ped set up in pedspersonality.dat
NATIVE FUNC INT GET_PED_AGE (PED_INDEX PedIndex) = "0x466e9f5f2407358c"

//INFO: The main use of this function is to prevent peds from reacting to interrupting events when you want them to be under script control.
//          e.g. To tell a ped to run past a hated ped but ignoring the reaction to attack, set blocking to true at the start, then back to false once the task is completed. 
//PARAM NOTES: bBlockEvents = true : the ped specified will no longer react to permanent events,
//                  e.g. will not begin combat even if the decision maker specifies that seeing a hated ped should.
//                  But the ped will still respond to temporary events like walking around other peds or vehicles. 
//PURPOSE: Sets the blocking of non-temporary events.  More info..
NATIVE PROC SET_BLOCKING_OF_NON_TEMPORARY_EVENTS( PED_INDEX PedIndex, BOOL bBlockEvents ) = "0x50274a7eaca3133a"

//INFO: 
//PARAM NOTES:
//PURPOSE: Sets the peds name, can be displayed by selecting the PedName option from the debug widget->AI toggle display drop down bo
NATIVE PROC SET_PED_NAME_DEBUG ( PED_INDEX PedIndex, STRING debugName ) = "0xd8b630f464fe1d6d"

//INFO: 
//PARAM NOTES:
//PURPOSE:Sets a ped will keep thier script created task when the mission ends or MARK_CHAR_AS_NO_LONGER_NEEDED is called 
NATIVE PROC SET_PED_KEEP_TASK(PED_INDEX PedIndex, BOOL KeepTasksFlag) = "0xabc2ca6f28903308"

//INFO: 
//PARAM NOTES:
//PURPOSE:Sets a ped will react to minor events like the player crashing their car as a mission ped
NATIVE PROC SET_PED_ALLOW_MINOR_REACTIONS_AS_MISSION_PED(PED_INDEX PedIndex, BOOL AllowReactions) = "0x36dd2f43086812aa"

//INFO: Ensure you only set this for peds that you want to remain active inside a cutscene - not to be used for mission peds that are in the cutscene - the cutscene will deal with that itself. 
//PARAM NOTES:
//PURPOSE: Allows a MISSION ped to work while a cutscene is running. More info..
NATIVE PROC SET_PED_IN_CUTSCENE(PED_INDEX PedIndex, BOOL bShow) = "0x220f63ffeae8ae7e"

//INFO: 
//PARAM NOTES:
//	CanSmashGlassFlagRagdoll: If TRUE then if the ped's ragdoll bounds comes in contact with breakable glass, the glass will break. Ped does need to be in ragdoll state
//	CanSmashGlassFlagWeapon: If TRUE then if the ped's weapon bounds comes in contact with breakable glass, the glass will break. Ped does need to be in ragdoll state
//PURPOSE: Call every frame to make the ped's ragdoll or weapon bounds shatter glass when in contact
NATIVE PROC SET_PED_CAN_SMASH_GLASS(PED_INDEX PedIndex, BOOL CanSmashGlassFlagRagdoll, BOOL CanSmashGlassFlagWeapon) = "0x481a9844d115998b"

//INFO: 
//PARAM NOTES:
//PURPOSE:Sets the ped so that the police will always go after them if they drive past. 
NATIVE PROC SET_PED_GET_OUT_UPSIDE_DOWN_VEHICLE(PED_INDEX PedIndex, BOOL GetOutFlag) = "0x5d1d64e01b76705c"

//INFO: 
//PARAM NOTES:
//PURPOSE: Sets the ped will remain on the boat when the mission ends
NATIVE PROC SET_PED_CAN_REMAIN_ON_BOAT_AFTER_MISSION_ENDS(PED_INDEX PedIndex, BOOL RemainOnBoatFlag) = "0x9d645c858391b15b"

//INFO: 
//PARAM NOTES:
//PURPOSE:Sets the given ped config flag bit
NATIVE PROC SET_PED_CONFIG_FLAG(PED_INDEX PedIndex, PED_CONFIG_FLAGS ConfigFlag, BOOL bTrue) = "0xd6a76bab45a4b460"

//INFO: 
//PARAM NOTES: These flags are reset every frame
//PURPOSE:Sets the given ped reset flag bit
NATIVE PROC SET_PED_RESET_FLAG(PED_INDEX PedIndex, PED_RESET_FLAGS ResetFlag, BOOL bTrue) = "0x3e3d339bad67f6f2"

//INFO: 
//PARAM NOTES:
//PURPOSE:Gets the given ped config flag bit
NATIVE FUNC BOOL GET_PED_CONFIG_FLAG(PED_INDEX PedIndex, PED_CONFIG_FLAGS ConfigFlag, BOOL DoDeadCheck = true) = "0x98c2ae9a4c384cbf"

//INFO: 
//PARAM NOTES: These flags are reset every frame
//PURPOSE:Gets the given ped reset flag bit
NATIVE FUNC BOOL GET_PED_RESET_FLAG(PED_INDEX PedIndex, PED_RESET_FLAGS ResetFlag) = "0x77850b1d48ae14ad"

//INFO: 
//PARAM NOTES:
//PURPOSE:Set the peds will through the windscreen with high impacts
NATIVE PROC SET_PED_CAN_FLY_THROUGH_WINDSCREEN(PED_INDEX PedIndex, BOOL bTrue) = "0xe0c9483b3dd00c61"

//INFO: 
//PARAM NOTES:
//PURPOSE: Set ped playes head on horn anim when they die in a vehicle.
NATIVE PROC SET_PED_PLAYS_HEAD_ON_HORN_ANIM_WHEN_DIES_IN_VEHICLE(PED_INDEX PedIndex, BOOL AlwaysUseHeadOnHornAnim) = "0xc8882e8058542f83"

//INFO: 
//PARAM NOTES:
//PURPOSE:  Set if motion blur is on or off - used in sky diving 
NATIVE PROC SET_PED_MOTION_BLUR(PED_INDEX index, BOOL bMotionBlur) = "0xd6a9b2fae14dd809"

//INFO: 
//PARAM NOTES:
//PURPOSE: Switches a ped to and from skiing movement
NATIVE PROC SET_PED_SKIING(PED_INDEX PedIndex, BOOL bSkiing) = "0xf8ef679879412915"

//INFO: 
//PARAM NOTES:
//PURPOSE: Checks if a ped is skiing. 
NATIVE FUNC BOOL IS_PED_SKIING(PED_INDEX PedIndex) = "0xd2137cb6f2b09df6"



//INFO: 
//PARAM NOTES:
//PURPOSE: Sets whether the ped will perform low-level steering behaviour around dead bodies (on by default)
NATIVE PROC SET_PED_STEERS_AROUND_DEAD_BODIES(PED_INDEX PedIndex, BOOL bState) = "0xbdf37cc07f3d5f4a"

//INFO: 
//PARAM NOTES:
//PURPOSE: Gets whether the ped will perform low-level steering behaviour around dead bodies
NATIVE FUNC BOOL GET_PED_STEERS_AROUND_DEAD_BODIES(PED_INDEX PedIndex) = "0x25de1c2bcae4b2fc"

//INFO: 
//PARAM NOTES:
//PURPOSE: Sets whether the ped will perform low-level steering behaviour around other peds (off by default)
NATIVE PROC SET_PED_STEERS_AROUND_PEDS(PED_INDEX PedIndex, BOOL bState) = "0x2d1abdbe834c4ac4"

//INFO: 
//PARAM NOTES:
//PURPOSE: Gets whether the ped will perform low-level steering behaviour around other peds
NATIVE FUNC BOOL GET_PED_STEERS_AROUND_PEDS(PED_INDEX PedIndex) = "0xc2be33a6830ea241"

//INFO: 
//PARAM NOTES:
//PURPOSE: Sets whether the ped will perform low-level steering behaviour around objects (on by default)
NATIVE PROC SET_PED_STEERS_AROUND_OBJECTS(PED_INDEX PedIndex, BOOL bState) = "0xc3be2917fbb1a384"

//INFO: 
//PARAM NOTES:
//PURPOSE: Gets whether the ped will perform low-level steering behaviour around objects
NATIVE FUNC BOOL GET_PED_STEERS_AROUND_OBJECTS(PED_INDEX PedIndex) = "0x3a1c0f4baf8495b8"

//INFO: 
//PARAM NOTES:
//PURPOSE: Sets whether the ped will perform low-level steering behaviour around vehicles (on by default)
NATIVE PROC SET_PED_STEERS_AROUND_VEHICLES(PED_INDEX PedIndex, BOOL bState) = "0xf290300c9587ee4e"

//INFO: 
//PARAM NOTES:
//PURPOSE: Gets whether the ped will perform low-level steering behaviour around vehicles
NATIVE FUNC BOOL GET_PED_STEERS_AROUND_VEHICLES(PED_INDEX PedIndex) = "0x2fc9b4660e7f0b98"

//INFO: 
//PARAM NOTES:
//PURPOSE: Sets whether this ped will be steered around by other peds during their local avoidance (true by default)
NATIVE PROC SET_PED_IS_AVOIDED_BY_OTHERS(PED_INDEX PedIndex, BOOL bState) = "0x252a55826444c3cb"

//INFO: 
//PARAM NOTES:
//PURPOSE: Gets whether this ped will be steered around by other peds during their local avoidance
NATIVE FUNC BOOL GET_PED_IS_AVOIDED_BY_OTHERS(PED_INDEX PedIndex) = "0x3550e29ace9303be"

//INFO:
//PARAM NOTES:
//PURPOSE: Instructs other peds to give this ped a wider berth; must be called every frame
NATIVE PROC SET_PED_INCREASED_AVOIDANCE_RADIUS(PED_INDEX PedIndex) = "0x963e9ab0c31726bd"

//INFO:
//PARAM NOTES:
//PURPOSE: When this ped dies their body will block all pathfinding by others, not just wander paths
NATIVE PROC SET_PED_BLOCKS_PATHING_WHEN_DEAD(PED_INDEX PedIndex, BOOL bState) = "0x5e3ad67f25700d47"

//INFO:
//PARAM NOTES:
//PURPOSE: Removes all time delay from aiming to firing for players.  Use when forcing an aim animation outside the standard set.  
//			Must be called every frame.
NATIVE PROC SET_PED_NO_TIME_DELAY_BEFORE_SHOT(PED_INDEX PedIndex) = "0x1212e12d9c1e55d1"

//INFO: 
//PARAM NOTES:
//PURPOSE: Ignores the weapon type specified for collision contacts, e.g. electric fences
NATIVE PROC SET_PED_IGNORED_MATERIAL_COLLISION_WEAPON(WEAPON_TYPE WeaponType) = "0xe7577fdde41ceeb2"

//INFO: 
//PARAM NOTES:
//PURPOSE: Prevents peds crashing / falling over whilst skiing.
NATIVE PROC SET_PED_NEVER_FALL_OFF_SKIS(PED_INDEX PedIndex, BOOL bNeverFallOff) = "0xcf6ae3aea07a1259"

//INFO:  ***this is an expensive command - please speak to AI before using***
//PARAM NOTES: ForceAIPreCameraUpdate forces the ai update to be done before the camera update, only set to TRUE if code have told you to
//PURPOSE: Forces a late AI and animation update, to be used only when warping a character and/or
//			instantly changing animation state.
NATIVE PROC FORCE_PED_AI_AND_ANIMATION_UPDATE(PED_INDEX PedIndex, BOOL ForceAIPreCameraUpdate = FALSE, BOOL ForceZeroTimestep = FALSE) = "0xeb087b19f63ab053"

//~>                        Area commands

//INFO: 
//PARAM NOTES:
//PURPOSE: Returns true if any ped's pivot point lies within the sphere with the given radius at the given point
NATIVE FUNC BOOL IS_ANY_PED_NEAR_POINT ( VECTOR point, FLOAT radius ) = "0xac48ff26faaa8dd0"

//INFO: 
//PARAM NOTES:
//PURPOSE: Returns true if any hostile peds of the given ped within the sphere with the given radius at the given point
NATIVE FUNC BOOL IS_ANY_HOSTILE_PED_NEAR_POINT( PED_INDEX iPedIndex, VECTOR point, FLOAT radius ) = "0x3f9ca94b386e2f8c"

//INFO:
//PARAM NOTES: fOffsetDist--how far away from the ped to offset
//PURPOSE: Returns a position offset away from a ped's pelvis bone.  Good for playing animations
//that require you to be next to a ragdolled ped
NATIVE FUNC VECTOR GET_POSITION_TO_SIDE_OF_PED (PED_INDEX iPedIndex, FLOAT fOffsetDist) = "0x36c1f30b1c0529cc"

//INFO: 
//PARAM NOTES:
//PURPOSE: Returns true if the ped is heading towards the given point, within +/- of the heading tolerance.
//	   checks that the ped's current-heading AND desired-heading are both aligned with the heading to the vPoint
//	   This will not take any Z differences into account!
NATIVE FUNC BOOL IS_PED_HEADING_TOWARDS_POSITION ( PED_INDEX iPedIndex, VECTOR vPoint, FLOAT fDegreesDelta ) = "0xc9cd8c710046a3dd"

//INFO: 
//PARAM NOTES:
//PURPOSE: Returns the bone index of the given bone tag. Used for script commands such as ATTACH_ENTITY_TO_ENTITY
NATIVE FUNC INT  GET_PED_BONE_INDEX(PED_INDEX iPedIndex, PED_BONETAG boneTag) = "0xb897fcfcfa664b38"

//INFO: 
//PARAM NOTES:
//PURPOSE: Returns the bone index of the given ragdoll component. Only used for APPLY_FORCE_TO_ENTITY at the moment.
NATIVE FUNC INT GET_PED_RAGDOLL_BONE_INDEX(PED_INDEX iPedIndex, PED_RAGDOLL_COMPONENTS ragdollComponent) = "0xefccfe881e0da85b"

//INFO: Can be used to force a particular movement pose and behaviour, for example when trying to 
//		seamlessly end a canned animation, such as a cutscene or synchronized scene.
//PARAM NOTES:	state - The defined motion state to force. See the PED_MOTION_STATE enum for the list of states
//						available.
//				shouldRestart - When set to true, this will restart the state if it is already running
//PURPOSE:	Forces the peds motion state next frame to the provided known state. More info...
NATIVE FUNC BOOL FORCE_PED_MOTION_STATE(PED_INDEX PedIndex, PED_MOTION_STATE state ,  BOOL shouldRestart = FALSE, FORCE_ANIM_AI_UPDATE_STATE exitstate = FAUS_DEFAULT, BOOL ForceAIPreCameraUpdate = FALSE) = "0xa8685678dda27fc3"

//INFO: 
//PARAM NOTES:
//PURPOSE: Gets the ped's current move blend ratio (when walking normally, only the y component is used, when strafing both x and y are used)
NATIVE FUNC BOOL GET_PED_CURRENT_MOVE_BLEND_RATIO(PED_INDEX PedIndex, FLOAT& MbrXOut, FLOAT& MbrYOut) = "0x503ecec9e9e2fa90"

//INFO: 
//PARAM NOTES:
//PURPOSE: Set the max move blend ratio a ped can move at - needs to be called everyframe, or will revert to sprint
NATIVE PROC SET_PED_MAX_MOVE_BLEND_RATIO(PED_INDEX PedIndex, FLOAT MoveBlendRatio) = "0xcac4d1050f2e6899"

//INFO: 
//PARAM NOTES:
//PURPOSE: Set the min move blend ratio a ped can move at - needs to be called everyframe, or will revert to stand
NATIVE PROC SET_PED_MIN_MOVE_BLEND_RATIO(PED_INDEX PedIndex, FLOAT MoveBlendRatio) = "0x3dbd501d46e6a2be"

//INFO: 
//PARAM NOTES: MaxDesiredRate = 10.0
//PURPOSE: Set the desired move speed override of run/sprint - needs to be called everyframe, or will revert 1.0f
NATIVE PROC SET_PED_MOVE_RATE_OVERRIDE(PED_INDEX PedIndex, FLOAT DesiredRate) = "0x3df902167668dd74"

//INFO: 
//PARAM NOTES: MaxDesiredRate = 3.0 (anything above this just looks completely ridiculous)
//PURPOSE: Set the desired move speed override of swimming/diving - needs to be called everyframe, or will revert 1.0f
NATIVE PROC SET_PED_MOVE_RATE_IN_WATER_OVERRIDE(PED_INDEX PedIndex, FLOAT DesiredRate) = "0xec503ac575ac80a0"

//INFO: 
//PARAM NOTES:
//PURPOSE: Returns true if the specified sexiness flag is set on the ped, false otherwise
NATIVE FUNC BOOL PED_HAS_SEXINESS_FLAG_SET(PED_INDEX PedIndex, PED_SEXINESS_FLAG flag) = "0x0ad88be2af6bde41"


//~>                        Ped Population commands

//INFO: 
//PARAM NOTES:
//PURPOSE: Attempts to instantly populate world with the currently desired number of peds (regardless of whether in-view or not)
NATIVE PROC INSTANTLY_FILL_PED_POPULATION() = "0x6d5eda3dfaea63a7"


// Ped scanner access functions

//INFO:
//PARAM NOTES: PedIndex - ped to get nearby vehicle list from
//				array - Array to place vehicles indices in
//PURPOSE: For a ped get the list of nearby vehicles generated by their vehicle scanner. The vehicles will be in order of closeness to the ped
//RETURN: Number of vehicles added to the list
NATIVE FUNC INT GET_PED_NEARBY_VEHICLES(PED_INDEX PedIndex, VEHICLE_INDEX &array[]) = "0x9a39844d6003635c"

//INFO:
//PARAM NOTES: PedIndex - ped to get nearby vehicle list from
//				array - Array to place ped indices in
//PURPOSE: For a ped get the list of nearby peds generated by their ped scanner. The peds will be in order of closeness to the ped 
//RETURN: Number of peds added to the list
NATIVE FUNC INT GET_PED_NEARBY_PEDS(PED_INDEX PedIndex, PED_INDEX &array[], PED_TYPE ExclusionPedType = PEDTYPE_INVALID) = "0x46951d3186547c7a"

//INFO: When a new variation is set on a streamed ped this function can be called right after and returns true when all components
//		have loaded and the ped is ready for render.
//PARAM NOTES:
//PURPOSE: Returns true if all streaming requests on a ped have completed. More...
NATIVE FUNC BOOL HAVE_ALL_STREAMING_REQUESTS_COMPLETED(PED_INDEX PedIndex) = "0x6090fc735660b8f7"

//INFO: 
//PARAM NOTES:
//PURPOSE: Returns true if ped wants to go into action mode (but may be blocked from doing so).
NATIVE FUNC BOOL IS_PED_WANTING_TO_USE_ACTION_MODE(PED_INDEX PedIndex) = "0x93408490f9f2186c"

//INFO: 
//PARAM NOTES:
//PURPOSE: Returns true if ped has streamed in action mode anims and they are currently playing.
NATIVE FUNC BOOL IS_PED_USING_ACTION_MODE(PED_INDEX PedIndex) = "0x80eade020a9bb643"

//INFO: 
//PARAM NOTES:
//PURPOSE: Enables/disables the action mode, runs for the specified time, -1 runs indefinitely
NATIVE PROC SET_PED_USING_ACTION_MODE(PED_INDEX PedIndex, BOOL UsingActionMode, INT ActionModeTime = -1, STRING ActionModeName = NULL) = "0xa091c233f9d0ab04"

//INFO: 
//PARAM NOTES:
//PURPOSE: Override action mode anims if need be (e.g. for fat peds, or if we have issues with weapons clipping)
NATIVE PROC SET_MOVEMENT_MODE_OVERRIDE(PED_INDEX PedIndex, STRING ActionModeName = NULL) = "0xa6b0a6490241fec8"

//INFO: Override the ped capsule from script
//PARAM NOTES: Radius = new capsule radius
//PURPOSE: This only lasts for a frame, so you'll need to keep calling it for the desired duration of the effect
NATIVE PROC SET_PED_CAPSULE(PED_INDEX PedIndex, FLOAT Radius) = "0x54e818a233b540d4"

//INFO: 
//PARAM NOTES: 
//PURPOSE: Registers a ped to have its headshot taken
//RETURN: returns a handle that must be passed to other ped headshot functions
NATIVE FUNC PEDHEADSHOT_ID REGISTER_PEDHEADSHOT(PED_INDEX PedIndex) = "0x5ccf05d0032b9864"

//INFO: 
//PARAM NOTES: 
//PURPOSE: Registers a ped to have its headshot taken
//RETURN: returns a handle that must be passed to other ped headshot functions
NATIVE FUNC PEDHEADSHOT_ID REGISTER_PEDHEADSHOT_HIRES(PED_INDEX PedIndex) = "0x5f8d7e19cfca0e80"

//INFO: 
//PARAM NOTES: 
//PURPOSE: Registers a ped to have its headshot taken with a transparent background 
//	   There's only one slot available for transparent headshots; if it's already in use,
//	   this request will fail
//RETURN: returns a handle that must be passed to other ped headshot functions
NATIVE FUNC PEDHEADSHOT_ID REGISTER_PEDHEADSHOT_TRANSPARENT(PED_INDEX PedIndex) = "0x425aeaa424677e5f"

//INFO: 
//PARAM NOTES: 
//PURPOSE: Find an already registered headshot with transparent background.
//	   This function can be used in cases where script needs to force a request
//	   with transparent background when another headshot is already using the transparent slot.
//	   IE: he old transparent headshot can be released and the new one can be requested
//	   once the slot becomes available.
//RETURN: Returns the handle to the transparent background headshots; if there's none
//	  registered, the function returns an invalid handle
NATIVE FUNC PEDHEADSHOT_ID GET_PEDHEADSHOT_TRANSPARENT_HANDLE() = "0x81f0491d7b7ef37c"

//INFO: 
//PARAM NOTES: 
//PURPOSE: Releases headshot associated to a ped
NATIVE PROC UNREGISTER_PEDHEADSHOT(PEDHEADSHOT_ID HeadshotId) = "0x326ed9dd64134d76"

//INFO: 
//PARAM NOTES: 
//PURPOSE: returns whether the PEDHEADSHOT_ID is a valid one
NATIVE FUNC BOOL IS_PEDHEADSHOT_VALID(PEDHEADSHOT_ID HeadshotId) = "0x87af9112820eec25"

//INFO: 
//PARAM NOTES: 
//PURPOSE: returns whether the headshot texture is ready to be used
NATIVE FUNC BOOL IS_PEDHEADSHOT_READY(PEDHEADSHOT_ID HeadshotId) = "0x1b28b340344ba310"

//INFO: 
//PARAM NOTES: 
//PURPOSE: gets hash for TXD name, the texture name is the same
NATIVE FUNC INT GET_PEDHEADSHOT_TXD_HASH(PEDHEADSHOT_ID HeadshotId) = "0x7abf96207fedef17"

//INFO: 
//PARAM NOTES: 
//PURPOSE: gets string for TXD name, the texture name is the same, make sure to copy the returned string
NATIVE FUNC STRING GET_PEDHEADSHOT_TXD_STRING(PEDHEADSHOT_ID HeadshotId) = "0xe1afe5e1e834bbf0"

//INFO: 
//PARAM NOTES: 
//PURPOSE: enables custom lighting for ped headshots (this is a global setting)
NATIVE PROC SET_PEDHEADSHOT_CUSTOM_LIGHTING(BOOL Enable) = "0xd0b64552a1b13848"

//INFO: 
//PARAM NOTES:	LightIndex - Range is [0, 3]; up to four lights can be set up
//		vPos - Position of the light, headshot origin is at (0,0,0)
//
//PURPOSE: sets one of the custom lights for ped headshots, these will be used only if
//	   custom lighting is enabled (see SET_PEDHEADSHOT_CUSTOM_LIGHTING)
NATIVE PROC SET_PEDHEADSHOT_CUSTOM_LIGHT(INT LightIndex, VECTOR vPos, VECTOR vColor, FLOAT intensity, FLOAT radius) = "0x3420adf7eec16ee6"

//INFO: 
//PARAM NOTES: 
//PURPOSE: returns true if a headshot with an animation pose can be requested
NATIVE FUNC BOOL CAN_REQUEST_POSE_FOR_HEADSHOT() = "0x29202f178fe55007"

//INFO: 
//PARAM NOTES: 
//PURPOSE:  Registers a ped to have its headshot taken using an animation pose (use CAN_REQUEST_POSE_FOR_HEADSHOT first)
//	    animClipDictName and animClipName are the names for the clip dictionary and clip to be used to pose the ped, a custom
//	    camera position and angles in degrees must also be provided
//RETURN: returns a handle that must be passed to other ped headshot functions
NATIVE FUNC PEDHEADSHOT_ID REGISTER_PEDHEADSHOT_WITH_ANIM_POSE(PED_INDEX PedIndex, STRING animClipDictName, STRING animClipName, VECTOR camPos, VECTOR camAnglesDegrees) = "0xde92a99cf1b6aa7b"

//INFO: 
//PARAM NOTES:	
//
//PURPOSE: Returns the headshot state
NATIVE FUNC PEDHEADSHOTSTATE GET_PEDHEADSHOT_STATE(PEDHEADSHOT_ID HeadshotId) = "0xfd22cbd033fd06ee"

//INFO: 
//PARAM NOTES:	
//
//PURPOSE:  Upload a headshot texture to the cloud. IS_PEDHEADSHOT_IMG_UPLOAD_AVAILABLE
//	    should be called first to ensure the upload feature is not already in use,
//	    otherwise the request will fail.
//	    The user must ensure that the headshot remains active during the upload process.
//	    The upload is asynchronous so the user must query the status of the request
//	    to know whether it's failed or succeeded.
//	    The request must be explicitly released by the user by calling
//	    RELEASE_PEDHEADSHOT_IMG_UPLOAD, regardless of whether the request failed
//	    or succeeded; otherwise, no further requests will be processed.
//RETURN: returns false if the request failed
NATIVE FUNC BOOL REQUEST_PEDHEADSHOT_IMG_UPLOAD(PEDHEADSHOT_ID HeadshotId) = "0xcd92583b7ca695d6"

//INFO: 
//PARAM NOTES:	
//
//PURPOSE:  Releases an upload request; can be called at any time and must be
//	    called once the user is finished with the request (i.e.: it failed or it succeeded)
NATIVE PROC RELEASE_PEDHEADSHOT_IMG_UPLOAD(PEDHEADSHOT_ID HeadshotId) = "0x6decc60e53a8ae80"

//INFO: 
//PARAM NOTES:	
//
//PURPOSE:  Queries whether the upload request slot is free
//RETURN: returns false if the upload request slot is busy
NATIVE FUNC BOOL IS_PEDHEADSHOT_IMG_UPLOAD_AVAILABLE() = "0x18e910b44032efdc"

//INFO: 
//PARAM NOTES:	
//
//PURPOSE:  Queries whether the upload request slot has failed
//RETURN: returns true if the upload failed
NATIVE FUNC BOOL HAS_PEDHEADSHOT_IMG_UPLOAD_FAILED() = "0xa855c0f222fa2c15"

//INFO: 
//PARAM NOTES:	
//
//PURPOSE:  Queries whether the upload request slot has succeeded
//RETURN: returns true if the upload succeeded
NATIVE FUNC BOOL HAS_PEDHEADSHOT_IMG_UPLOAD_SUCCEEDED() = "0xa2ecd66b130e8c24"

//INFO: 
//PARAM NOTES: range for HeatScale is [0, 255]
//PURPOSE: Overrides current heat scale value for ped
NATIVE PROC SET_PED_HEATSCALE_OVERRIDE(PED_INDEX PedIndex, INT HeatScale) = "0x2588ae73a17d656d"

//INFO: 
//PARAM NOTES: 
//PURPOSE: Disables current heat scale override
NATIVE PROC DISABLE_PED_HEATSCALE_OVERRIDE(PED_INDEX PedIndex) = "0x79ebf0add4de0aee"

//~>                        SpawnPoints commands

//INFO:
//PARAM NOTES: vSearchOrigin, fSearchRadius and fMaxDistZ define an upright cylinder
//			   Optional 'fMinimumSpacing' specifies a minimum distance which must exist between returned points
//			   If optional 'iMaxSearchDurationMS' param is non-zero, search will enter a 'failed' state if this milliseconds duration is exceeded
//			    - if the timeout value is specified, script must check for the failure case via SPAWNPOINTS_IS_SEARCH_FAILED()
//PURPOSE: Starts an asynchronous seach for spawnpoints
//		   Only a single search may be performed at any time; there is no queueing mechanism
NATIVE PROC SPAWNPOINTS_START_SEARCH(VECTOR vSearchOrigin, FLOAT fSearchRadius, FLOAT fMaxDistZ, SPAWNPOINTS_FLAGS iFlags=SPAWNPOINTS_FLAG_DEFAULT, FLOAT fMinimumSpacing=0.0, INT iMaxSearchDurationMS=0) = "0xc9c2f7b876ee4e15"

//PURPOSE: Same as SPAWNPOINTS_START_SEARCH, except uses the angled area volume definition popular with level-design
//		   vPoint1 & vPoint2 define the start and end points of a rectangle, fWidth in size
//		   Height of the area is defined by raising one point above the other (a little height we be artificially applied in the case of a flat volume)
//			If optional 'iMaxSearchDurationMS' param is non-zero, search will enter a 'failed' state if this milliseconds duration is exceeded
//			- if the timeout value is specified, script must check for the failure case via SPAWNPOINTS_IS_SEARCH_FAILED()
NATIVE PROC SPAWNPOINTS_START_SEARCH_IN_ANGLED_AREA(VECTOR vPoint1, VECTOR vPoint2, FLOAT fWidth, SPAWNPOINTS_FLAGS iFlags=SPAWNPOINTS_FLAG_DEFAULT, FLOAT fMinimumSpacing=0.0, INT iMaxSearchDurationMS=0) = "0xc9aca2e149098784"

//INFO: 
//PARAM NOTES: 
//PURPOSE: Cancels an existing search; must be used after results are retrieved, or no longer required
NATIVE PROC SPAWNPOINTS_CANCEL_SEARCH() = "0x3d9cb48b182f9f3b"

//INFO: 
//PARAM NOTES: 
//PURPOSE: Returns TRUE if a search is active, or if it has completed.  Returns FALSE if the system is not in use, and is ready for a new search.
NATIVE FUNC BOOL SPAWNPOINTS_IS_SEARCH_ACTIVE() = "0xccd530822438fea4"

//INFO: 
//PARAM NOTES: 
//PURPOSE: Returns TRUE if a search is in the completed state.  Will assert if no search is active
NATIVE FUNC BOOL SPAWNPOINTS_IS_SEARCH_COMPLETE() = "0xf4408128c21a71b1"

//INFO: 
//PARAM NOTES: 
//PURPOSE: Returns TRUE if a search is in the failed state.  Will assert if no search is active
//		   A search may enter the failed state if its duration exceeds the option iMaxSearchDuration specified when the search begins.
NATIVE FUNC BOOL SPAWNPOINTS_IS_SEARCH_FAILED() = "0xd41858be1441f8a7"

//INFO: 
//PARAM NOTES: 
//PURPOSE: If a search has completed, returns the number of results found
NATIVE FUNC INT SPAWNPOINTS_GET_NUM_SEARCH_RESULTS() = "0x040e56a95fcfb423"

//INFO: 
//PARAM NOTES: 
//PURPOSE: Retrieve the specified search result.  Results are ordered by suitability (distance from cylinder origin)
NATIVE PROC SPAWNPOINTS_GET_SEARCH_RESULT(INT iResultIndex, FLOAT & fOut_X, FLOAT & fOut_Y, FLOAT & fOut_Z) = "0x27b82f0c405755b0"


//INFO: 
//PARAM NOTES: 
//PURPOSE: Retrieves flags associated with the specified search result.  Flags are a combination of values from the SPAWNPOINTS_RESULT_FLAGS enum
NATIVE PROC SPAWNPOINTS_GET_SEARCH_RESULT_FLAGS(INT iResultIndex, INT & iOut_Flags) = "0x4abaf316add9b9ea"


//~>                        IK

//INFO: 
//PARAM NOTES: PedIndex - Index of ped to set IK target for.
//			   IKPart - IK part of ped to set IK target for (see IK_PART type).
//			   TargetEntityIndex - Index of target entity. Set to NULL for no entity. If no entity, TargetOffset is assumed to be world coordinates.
//			   INT TargetBone - Bone tag representing target entity bone to target. Set to -1 for no target bone.
//			   VECTOR TargetOffset - If target entity is NULL, TargetOffset is assumed to be world coordinates. If target entity is not NULL, TargetOffset is an offset from the target entity. If target entity is not NULL and TargetBone is not -1, TargetOffset is an offset relative to the bone. Set to (0,0,0) for no offset.
//			   IK_TARGET_FLAGS Flags - Optional flags to set (see IK_TARGET_FLAGS type). Otherwise, set to 0.
//			   INT BlendInTimeMS - Blend in time in MS. Set to -1 for default blend in time. Set to 0 for instant blend in time.
//			   INT BlendOutTimeMS - Blend out time in MS. Set to -1 for default blend out time. Set to 0 for instant blend out time.
//PURPOSE: Sets the IK target for a given IK part belonging to the ped. The IK target will only be valid for one update, so it needs to be set for as long as it is needed (to avoid IK targets not being cleared and getting stuck enabled).
NATIVE PROC SET_IK_TARGET(PED_INDEX PedIndex, IK_PART IKPart, ENTITY_INDEX TargetEntityIndex, INT TargetBone, VECTOR TargetOffset, IK_TARGET_FLAGS Flags, INT BlendInTimeMS = -1, INT BlendOutTimeMS = -1) = "0x6c600c7a5953076d"

//INFO: 
//PARAM NOTES: PedIndex - Index of ped.
//PURPOSE: Forces an instant leg IK setup the next time the leg IK solver is run for the ped.
NATIVE PROC FORCE_INSTANT_LEG_IK_SETUP(PED_INDEX PedIndex) = "0x02deecbab9737834"

//INFO: 
//PARAM NOTES:
//PURPOSE: Checks that the peds head is looking at the target entity.
NATIVE FUNC BOOL IS_PED_HEADTRACKING_ENTITY  (PED_INDEX PedIndex, ENTITY_INDEX EntityIndex) = "0x60b3c5be23bf3368"


//INFO: Used to prevent delays for missions peds getting in action mode, forcing action mode
//PARAM NOTES:
//PURPOSE: Requests the action mode assets
NATIVE PROC REQUEST_ACTION_MODE_ASSET(STRING ActionMode) = "0xf103763065059379"

//INFO:
//PARAM NOTES:
//PURPOSE: Check to see if the anims have loaded for this action mode. More info..
NATIVE FUNC BOOL HAS_ACTION_MODE_ASSET_LOADED(STRING ActionMode) = "0xa079c1c6fa6675c2"

//INFO:
//PARAM NOTES:
//PURPOSE: Removes the reference to the action mode assets
NATIVE PROC REMOVE_ACTION_MODE_ASSET(STRING ActionMode) = "0x6cd5e12a8e5d0092"

//INFO: Used to prevent delays for missions peds getting in stealth mode, forcing stealth mode
//PARAM NOTES:
//PURPOSE: Requests the stealth mode assets
NATIVE PROC REQUEST_STEALTH_MODE_ASSET(STRING StealthMode) = "0x5a368832ae432fdf"

//INFO:
//PARAM NOTES:
//PURPOSE: Check to see if the anims have loaded for this stealth mode. More info..
NATIVE FUNC BOOL HAS_STEALTH_MODE_ASSET_LOADED(STRING StealthMode) = "0x80a1036f74ca9090"

//INFO:
//PARAM NOTES:
//PURPOSE: Removes the reference to the stealth mode assets
NATIVE PROC REMOVE_STEALTH_MODE_ASSET(STRING StealthMode) = "0x2ce67ce5cc29d977"

//INFO:
//PARAM NOTES:
//PURPOSE: Sets a lod multiplier for the given ped. Start by using low values (1.1, 1.5, etc) until the wanted result is achieved. Large values are not appropriate and will be expensive!
NATIVE PROC SET_PED_LOD_MULTIPLIER(PED_INDEX PedIndex, FLOAT multiplier) = "0x9d4d63eb83a103ad"

//INFO:
//PARAM NOTES:
//PURPOSE: Can be used to stop the ped from losing his (glasses/hats) or helmet when receiving damage.
NATIVE PROC SET_PED_CAN_LOSE_PROPS_ON_DAMAGE(PED_INDEX PedIndex, BOOL value, PROP_DAMAGE_FLAGS flag = PF_CAN_LOSE_PROPS_ON_DAMAGE) = "0x9b78b16ac295162f"

//INFO:
//PARAM NOTES:
//PURPOSE: Disable rendering of AO blobs on peds feet
NATIVE PROC IS_PED_AO_BLOB_RENDERING_ENALBED(PED_INDEX PedIndex) = "0x4790f1cadb600e61"

//INFO:
//PARAM NOTES:
//PURPOSE: Enable rendering of AO blobs on peds feet
NATIVE PROC SET_PED_AO_BLOB_RENDERING(PED_INDEX PedIndex, BOOL val) = "0x450e7898d3f6649d"

//INFO:
//PARAM NOTES:
//PURPOSE: Queries if a ped is currently sheltered (from rain/snow etc)
NATIVE FUNC BOOL IS_PED_SHELTERED(PED_INDEX PedIndex) = "0xbaecaaa18de8809e"

//INFO:
//PARAM NOTES:
//PURPOSE: Enable or disable in-car idle animations
NATIVE PROC SET_PED_CAN_PLAY_IN_CAR_IDLES(PED_INDEX PedIndex, BOOL val) = "0xf1ee2e7dd05f08dc"

//INFO:
//PARAM NOTES:
//PURPOSE: force the footstep system update for the given ped.
NATIVE PROC SET_FORCE_FOOTSTEP_UPDATE(PED_INDEX PedIndex, BOOL val) = "0x66136f80d9c9251e"

//INFO:
//PARAM NOTES:
//PURPOSE: force the step type ( soft, walk, run...) and the detection values to use 
NATIVE PROC SET_FORCE_STEP_TYPE(PED_INDEX PedIndex, BOOL force, INT stepType, INT detectionValuesIdx) = "0x2bc29bbcb216ba16"

//INFO:
//PARAM NOTES:
//PURPOSE: Set cloth attached to ped in prone state (on/off)
NATIVE PROC SET_PED_CLOTH_PRONE(PED_INDEX PedIndex, BOOL val) = "0x083b98c1349d122d"

//INFO:
//PARAM NOTES:
//PURPOSE: Set custom cloth pose on the ped
NATIVE PROC SET_PED_CLOTH_POSE(PED_INDEX PedIndex, INT poseIndex) = "0xcda3e03d21666dcc"

//INFO:
//PARAM NOTES:
//PURPOSE: Queue custom cloth pose on the ped
NATIVE PROC QUEUE_PED_CLOTH_POSE(PED_INDEX PedIndex, INT poseIndex) = "0x7300453f520980fd"

//INFO:
//PARAM NOTES:
//PURPOSE: Set cloth package index on the ped
NATIVE PROC SET_PED_CLOTH_PACKAGE_INDEX(PED_INDEX PedIndex, INT packageIndex) = "0xa8264afa40ddcb5e"

//INFO:
//PARAM NOTES:
//PURPOSE: Set custom cloth pose on the ped
NATIVE PROC SET_PED_CLOTH_PIN_FRAMES(PED_INDEX PedIndex, INT pinFrames) = "0xd3f21cf0ab2ea898"

//INFO:
//PARAM NOTES:
//PURPOSE: Set the population center to use the given sphere (center and radius) for ped and vehicle population
NATIVE PROC SET_POP_CONTROL_SPHERE_THIS_FRAME(VECTOR center, FLOAT pedRadius, FLOAT vehRadius) = "0x940745265434eb5f"

//INFO:
//PARAM NOTES:
//PURPOSE: Clears the custom pop control sphere
NATIVE PROC CLEAR_POP_CONTROL_SPHERE() = "0x74551ccd0732f68e"

//INFO: Returns whether a ped exists with the specified decorator
//PARAM NOTES: decorator label to check
//PURPOSE: Used to check for the existance of a ped with the specified decorator
NATIVE FUNC PED_INDEX DOES_PED_EXIST_WITH_DECORATOR(STRING DecoratorLabel) = "0x2fb967a06b4c6b19"

//INFO: This function sets the palette index of a ped's phone.
//PARAM NOTES:
//PURPOSE: Allows script to control the color of the phone
NATIVE PROC SET_PED_PHONE_PALETTE_IDX(PED_INDEX PedIndex, INT Index) = "0x3ae8c8ace275db8a"

//INFO:
//PARAM NOTES:
//PURPOSE: Sets the ped to have zero mass when colliding with anything. This value is reset at the end of each frame
NATIVE PROC FORCE_ZERO_MASS_IN_COLLISIONS(PED_INDEX PedIndex) = "0xf993e519fbd2cce5"

//INFO:
//PARAM NOTES:
//PURPOSE: Sets the ped to not be instantly killed when falling from above 10m
NATIVE PROC SET_DISABLE_HIGH_FALL_DEATH(PED_INDEX PedIndex, BOOL DisableFallDeath ) = "0xc360b1054ef12239"

//INFO: This function returns the palette index of a ped's phone.
//PARAM NOTES:
//PURPOSE: Allows script to know the color of the phone
NATIVE FUNC INT GET_PED_PHONE_PALETTE_IDX(PED_INDEX PedIndex) = "0xd17d07956683ad32"

//INFO: The steer bias value gets added to the players control input. 
//          The bias is in the range -1.0f (hard right) to 1.0f (hard left). Ie If you set the bias to 0.1 the ped will pull to the left a little bit. 
//          By modifying the value from frame to frame you can emulate buggered controls or somebody fighting over control of the ped. 
//PARAM NOTES:
//PURPOSE: Sets a ped control bias -1.0f (hard right) to 1.0f (hard left). More info..
NATIVE PROC SET_PED_STEER_BIAS(PED_INDEX PedIndex, FLOAT Bias) = "0x75f04b33f318bee9"

//INFO:
//PARAM NOTES:
//PURPOSE: Check if a ped is switching weapon
NATIVE FUNC BOOL IS_PED_SWITCHING_WEAPON(PED_INDEX PedIndex) = "0x01c84186537abb55"

//INFO:
//PARAM NOTES:
//PURPOSE: Get the DLC hash for the location of the given ped component
NATIVE FUNC INT GET_DLC_PACK_HASH_FOR_COMPONENT(PED_INDEX PedIndex, INT componentType, INT drawableIndex) = "0xa99a911f1e10dbbc"

//INFO:
//PARAM NOTES:
//PURPOSE: Get the DLC hash for the location of the given ped prop
NATIVE FUNC INT GET_DLC_PACK_HASH_FOR_PROP(PED_INDEX PedIndex, PED_PROP_POSITION PropPosition, INT propIndex) = "0xbed95ec44fb30a72"

//INFO:
//PARAM NOTES:
//PURPOSE: This sets the ped to be treated as if it was in a friendly relationship with everyone.
//Stops the ped from being damaged, targeted, locked on or being shot at. Can't be set on players, only peds.
NATIVE PROC SET_PED_TREATED_AS_FRIENDLY(PED_INDEX PedIndex, BOOL enable, BOOL bLocalOnly = FALSE) = "0xe57c0a41f2dd0d21"

//INFO:
//PARAM NOTES:
//PURPOSE: Disables collision between the ped and the map
NATIVE PROC SET_DISABLE_PED_MAP_COLLISION(PED_INDEX PedIndex) = "0xabfefe3c20be7aad"

//INFO:
//PARAM NOTES:
//PURPOSE: Enables/Disables MP ped light
NATIVE PROC ENABLE_MP_LIGHT(PED_INDEX PedIndex, BOOL bEnable) = "0xc5fca9a6790497d0"

//INFO:
//PARAM NOTES:
//PURPOSE: Gets status of MP ped light
NATIVE FUNC BOOL GET_MP_LIGHT_ENABLED(PED_INDEX PedIndex) = "0xc6c09f0963b44ae5"

//INFO:
//PARAM NOTES:
//PURPOSE: Enables/Disables ped foot light
NATIVE PROC ENABLE_FOOT_LIGHT(PED_INDEX PedIndex, BOOL bEnable) = "0x8b753f845c13e999"

//INFO:
//PARAM NOTES:
//PURPOSE: Gets status of ped foot light
NATIVE FUNC BOOL GET_FOOT_LIGHT_ENABLED(PED_INDEX PedIndex) = "0x94a3e2d79730ae5c"

//INFO:
//PARAM NOTES:
//PURPOSE: Sets bool on player info to allow stunt jumps in vehicles that have it disabled
NATIVE PROC SET_ALLOW_STUNT_JUMP_CAMERA(PED_INDEX PedIndex, BOOL bEnable) = "0x5c3ba1efa5ef174d"

