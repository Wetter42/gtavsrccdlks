USING "buildtype.sch"
USING "hud_colours.sch"
USING "types.sch"
USING "script_hud_enums.sch"
USING "model_enums.sch"
USING "weapon_enums.sch"
USING "stats_enums.sch"
USING "Frontend_enums.sch"

/// PURPOSE: For passing Weaponwheel contents to code
///    DO NOT MODIFY THE ORDER WITHOUT ALSO TOUCHING CODE
STRUCT WEAPON_INFO
	WEAPON_TYPE		eWeaponType
	INT				iAmmoCount
	INT				iModsAsBitfield
	INT				iTint
	INT				iCamo
ENDSTRUCT

//
// this enum must be kept in sync with CODE *and* ACTIONSCRIPT
//
ENUM FRONTEND_MENU_SCREEN
// EVERYTHING BELOW IS AUTOMATICALLY GENERATED BY REBUILDALLENUMS! EDIT AT YOUR OWN RISK
	MENU_UNIQUE_ID_INVALID = -1
,	MENU_UNIQUE_ID_MAP = 0
,	MENU_UNIQUE_ID_START = 0
,	MENU_UNIQUE_ID_INFO = 1
,	MENU_UNIQUE_ID_FRIENDS = 2
,	MENU_UNIQUE_ID_GALLERY = 3
,	MENU_UNIQUE_ID_SOCIALCLUB = 4
,	MENU_UNIQUE_ID_GAME = 5
,	MENU_UNIQUE_ID_SETTINGS = 6
,	MENU_UNIQUE_ID_PLAYERS = 7
,	MENU_UNIQUE_ID_WEAPONS = 8
,	MENU_UNIQUE_ID_MEDALS = 9
,	MENU_UNIQUE_ID_STATS = 10
,	MENU_UNIQUE_ID_AVAILABLE = 11
,	MENU_UNIQUE_ID_VAGOS = 12
,	MENU_UNIQUE_ID_COPS = 13
,	MENU_UNIQUE_ID_LOST = 14
,	MENU_UNIQUE_ID_HOME_MISSION = 15
,	MENU_UNIQUE_ID_CORONA_SETTINGS = 16
,	MENU_UNIQUE_ID_CORONA_INVITE = 17
,	MENU_UNIQUE_ID_STORE = 18
,	MENU_UNIQUE_ID_HOME_HELP = 19
// EVERYTHING HERE IS AUTOMATICALLY GENERATED! EDIT AT YOUR OWN RISK
,	MENU_UNIQUE_ID_HOME_BRIEF = 20
,	MENU_UNIQUE_ID_HOME_FEED = 21
,	MENU_UNIQUE_ID_SETTINGS_AUDIO = 22
,	MENU_UNIQUE_ID_SETTINGS_DISPLAY = 23
,	MENU_UNIQUE_ID_SETTINGS_CONTROLS = 24
,	MENU_UNIQUE_ID_NEW_GAME = 25
,	MENU_UNIQUE_ID_LOAD_GAME = 26
,	MENU_UNIQUE_ID_SAVE_GAME = 27
,	MENU_UNIQUE_ID_HEADER = 28
,	MENU_UNIQUE_ID_HEADER_SAVE_GAME = 29
,	MENU_UNIQUE_ID_HOME = 30
,	MENU_UNIQUE_ID_CREWS = 31
,	MENU_UNIQUE_ID_SETTINGS_SAVEGAME = 32
,	MENU_UNIQUE_ID_GALLERY_ITEM = 33
,	MENU_UNIQUE_ID_FREEMODE = 34
,	MENU_UNIQUE_ID_MP_CHAR_1 = 35
,	MENU_UNIQUE_ID_MP_CHAR_2 = 36
,	MENU_UNIQUE_ID_MP_CHAR_3 = 37
,	MENU_UNIQUE_ID_MP_CHAR_4 = 38
,	MENU_UNIQUE_ID_MP_CHAR_5 = 39
// EVERYTHING HERE IS AUTOMATICALLY GENERATED! EDIT AT YOUR OWN RISK
,	MENU_UNIQUE_ID_HEADER_MULTIPLAYER = 40
,	MENU_UNIQUE_ID_HEADER_MY_MP = 41
,	MENU_UNIQUE_ID_MISSION_CREATOR = 42
,	MENU_UNIQUE_ID_GAME_MP = 43
,	MENU_UNIQUE_ID_LEAVE_GAME = 44
,	MENU_UNIQUE_ID_HEADER_PRE_LOBBY = 45
,	MENU_UNIQUE_ID_HEADER_LOBBY = 46
,	MENU_UNIQUE_ID_PARTY = 47
,	MENU_UNIQUE_ID_LOBBY = 48
,	MENU_UNIQUE_ID_PLACEHOLDER = 49
,	MENU_UNIQUE_ID_STATS_CATEGORY = 50
,	MENU_UNIQUE_ID_SETTINGS_LIST = 51
,	MENU_UNIQUE_ID_SAVE_GAME_LIST = 52
,	MENU_UNIQUE_ID_MAP_LEGEND = 53
,	MENU_UNIQUE_ID_CREWS_CATEGORY = 54
,	MENU_UNIQUE_ID_CREWS_FILTER = 55
,	MENU_UNIQUE_ID_CREWS_CARD = 56
,	MENU_UNIQUE_ID_SPECTATOR = 57
,	MENU_UNIQUE_ID_STATS_LISTITEM = 58
,	MENU_UNIQUE_ID_CREW_MINE = 59
// EVERYTHING HERE IS AUTOMATICALLY GENERATED! EDIT AT YOUR OWN RISK
,	MENU_UNIQUE_ID_CREW_ROCKSTAR = 60
,	MENU_UNIQUE_ID_CREW_FRIENDS = 61
,	MENU_UNIQUE_ID_CREW_INVITES = 62
,	MENU_UNIQUE_ID_CREW_LIST = 63
,	MENU_UNIQUE_ID_MISSION_CREATOR_CATEGORY = 64
,	MENU_UNIQUE_ID_MISSION_CREATOR_LISTITEM = 65
,	MENU_UNIQUE_ID_MISSION_CREATOR_STAT = 66
,	MENU_UNIQUE_ID_FRIENDS_LIST = 67
,	MENU_UNIQUE_ID_FRIENDS_OPTIONS = 68
,	MENU_UNIQUE_ID_HEADER_MP_CHARACTER_SELECT = 69
,	MENU_UNIQUE_ID_HEADER_MP_CHARACTER_CREATION = 70
,	MENU_UNIQUE_ID_CREATION_HERITAGE = 71
,	MENU_UNIQUE_ID_CREATION_LIFESTYLE = 72
,	MENU_UNIQUE_ID_CREATION_YOU = 73
,	MENU_UNIQUE_ID_PARTY_LIST = 74
,	MENU_UNIQUE_ID_REPLAY_MISSION = 75
,	MENU_UNIQUE_ID_REPLAY_MISSION_LIST = 76
,	MENU_UNIQUE_ID_REPLAY_MISSION_ACTIVITY = 77
,	MENU_UNIQUE_ID_CREW = 78
,	MENU_UNIQUE_ID_CREATION_HERITAGE_LIST = 79
// EVERYTHING HERE IS AUTOMATICALLY GENERATED! EDIT AT YOUR OWN RISK
,	MENU_UNIQUE_ID_CREATION_LIFESTYLE_LIST = 80
,	MENU_UNIQUE_ID_PLAYERS_LIST = 81
,	MENU_UNIQUE_ID_PLAYERS_OPTIONS = 82
,	MENU_UNIQUE_ID_PLAYERS_OPTIONS_LIST = 83
,	MENU_UNIQUE_ID_PARTY_OPTIONS = 84
,	MENU_UNIQUE_ID_PARTY_OPTIONS_LIST = 85
,	MENU_UNIQUE_ID_CREW_OPTIONS = 86
,	MENU_UNIQUE_ID_CREW_OPTIONS_LIST = 87
,	MENU_UNIQUE_ID_FRIENDS_OPTIONS_LIST = 88
,	MENU_UNIQUE_ID_FRIENDS_MP = 89
,	MENU_UNIQUE_ID_TEAM_SELECT = 90
,	MENU_UNIQUE_ID_HOME_DIALOG = 91
,	MENU_UNIQUE_ID_HEADER_EMPTY = 92
,	MENU_UNIQUE_ID_SETTINGS_FEED = 93
,	MENU_UNIQUE_ID_GALLERY_OPTIONS = 94
,	MENU_UNIQUE_ID_GALLERY_OPTIONS_LIST = 95
,	MENU_UNIQUE_ID_BRIGHTNESS_CALIBRATION = 96
,	MENU_UNIQUE_ID_HEADER_TEXT_SELECTION = 97
,	MENU_UNIQUE_ID_LOBBY_LIST = 98
,	MENU_UNIQUE_ID_LOBBY_LIST_ITEM = 99
// EVERYTHING HERE IS AUTOMATICALLY GENERATED! EDIT AT YOUR OWN RISK
,	MENU_UNIQUE_ID_HEADER_CORONA = 100
,	MENU_UNIQUE_ID_HEADER_CORONA_LOBBY = 101
,	MENU_UNIQUE_ID_HEADER_CORONA_JOINED_PLAYERS = 102
,	MENU_UNIQUE_ID_HEADER_CORONA_INVITE_PLAYERS = 103
,	MENU_UNIQUE_ID_HEADER_CORONA_INVITE_FRIENDS = 104
,	MENU_UNIQUE_ID_HEADER_CORONA_INVITE_CREWS = 105
,	MENU_UNIQUE_ID_CORONA_JOINED_PLAYERS = 106
,	MENU_UNIQUE_ID_CORONA_INVITE_PLAYERS = 107
,	MENU_UNIQUE_ID_CORONA_INVITE_FRIENDS = 108
,	MENU_UNIQUE_ID_CORONA_INVITE_CREWS = 109
,	MENU_UNIQUE_ID_SETTINGS_FACEBOOK = 110
,	MENU_UNIQUE_ID_HEADER_JOINING_SCREEN = 111
,	MENU_UNIQUE_ID_CORONA_SETTINGS_LIST = 112
,	MENU_UNIQUE_ID_CORONA_DETAILS_LIST = 113
,	MENU_UNIQUE_ID_CORONA_INVITE_LIST = 114
,	MENU_UNIQUE_ID_CORONA_JOINED_LIST = 115
,	MENU_UNIQUE_ID_HEADER_CORONA_INVITE_MATCHED_PLAYERS = 116
,	MENU_UNIQUE_ID_HEADER_CORONA_INVITE_LAST_JOB_PLAYERS = 117
,	MENU_UNIQUE_ID_CORONA_INVITE_MATCHED_PLAYERS = 118
,	MENU_UNIQUE_ID_CORONA_INVITE_LAST_JOB_PLAYERS = 119
// EVERYTHING HERE IS AUTOMATICALLY GENERATED! EDIT AT YOUR OWN RISK
,	MENU_UNIQUE_ID_CREW_LEADERBOARDS = 120
,	MENU_UNIQUE_ID_HOME_OPEN_JOBS = 121
,	MENU_UNIQUE_ID_CREW_REQUEST = 122
,	MENU_UNIQUE_ID_HEADER_RACE = 123
,	MENU_UNIQUE_ID_RACE_INFO = 124
,	MENU_UNIQUE_ID_RACE_INFOLIST = 125
,	MENU_UNIQUE_ID_RACE_LOBBYLIST = 126
,	MENU_UNIQUE_ID_HEADER_BETTING = 127
,	MENU_UNIQUE_ID_BETTING = 128
,	MENU_UNIQUE_ID_BETTING_INFOLIST = 129
,	MENU_UNIQUE_ID_BETTING_LOBBYLIST = 130
,	MENU_UNIQUE_ID_INCEPT_TRIGGER = 131
,	MENU_UNIQUE_ID_SETTINGS_SIXAXIS = 132
,	MENU_UNIQUE_ID_REPLAY_RANDOM = 133
,	MENU_UNIQUE_ID_CUTSCENE_EMPTY = 134
,	MENU_UNIQUE_ID_HOME_NEWSWIRE = 135
,	MENU_UNIQUE_ID_SETTINGS_CAMERA = 136
,	MENU_UNIQUE_ID_SETTINGS_GRAPHICS = 137
,	MENU_UNIQUE_ID_SETTINGS_ADVANCED_GFX = 138
,	MENU_UNIQUE_ID_SETTINGS_VOICE_CHAT = 139
,	MENU_UNIQUE_ID_SETTINGS_MISC_CONTROLS = 140
,	MENU_UNIQUE_ID_HELP = 141
,	MENU_UNIQUE_ID_MOVIE_EDITOR = 142
,	MENU_UNIQUE_ID_EXIT_TO_WINDOWS = 143
,	MENU_UNIQUE_ID_HEADER_LANDING_PAGE = 144
,	MENU_UNIQUE_ID_SHOW_ACCOUNT_PICKER = 145
,	MENU_UNIQUE_ID_SETTINGS_REPLAY = 146
,	MENU_UNIQUE_ID_REPLAY_EDITOR = 147
,	MENU_UNIQUE_ID_KEYMAP = 148
,	MENU_UNIQUE_ID_KEYMAP_LIST = 149
,	MENU_UNIQUE_ID_KEYMAP_LISTITEM = 150
,	MENU_UNIQUE_ID_SETTINGS_FIRST_PERSON = 151
,	MENU_UNIQUE_ID_HEADER_LANDING_KEYMAPPING = 152
,	MENU_UNIQUE_ID_PROCESS_SAVEGAME = 153
,	MENU_UNIQUE_ID_PROCESS_SAVEGAME_LIST = 154
,	MENU_UNIQUE_ID_IMPORT_SAVEGAME = 155
,	MENU_UNIQUE_ID_EXIT_TO_MAIN_MENU = 156
,	MENU_UNIQUE_ID_CREDITS = 157 
,	MENU_UNIQUE_ID_LEGAL = 158 
,	MENU_UNIQUE_ID_CREDITS_LEGAL = 159 

ENDENUM


DEBUGONLY FUNC STRING GET_XML_SCREEN_STRING_VALUE(FRONTEND_MENU_SCREEN screen)
	SWITCH screen
		CASE MENU_UNIQUE_ID_INVALID                                  RETURN "MENU_UNIQUE_ID_INVALID"
		CASE MENU_UNIQUE_ID_MAP                                      RETURN "MENU_UNIQUE_ID_MAP"
		CASE MENU_UNIQUE_ID_INFO                                     RETURN "MENU_UNIQUE_ID_INFO"
		CASE MENU_UNIQUE_ID_FRIENDS                                  RETURN "MENU_UNIQUE_ID_FRIENDS"
		CASE MENU_UNIQUE_ID_GALLERY                                  RETURN "MENU_UNIQUE_ID_GALLERY"
		CASE MENU_UNIQUE_ID_SOCIALCLUB                               RETURN "MENU_UNIQUE_ID_SOCIALCLUB"
		CASE MENU_UNIQUE_ID_GAME                                     RETURN "MENU_UNIQUE_ID_GAME"
		CASE MENU_UNIQUE_ID_SETTINGS                                 RETURN "MENU_UNIQUE_ID_SETTINGS"
		CASE MENU_UNIQUE_ID_PLAYERS                                  RETURN "MENU_UNIQUE_ID_PLAYERS"
		CASE MENU_UNIQUE_ID_WEAPONS                                  RETURN "MENU_UNIQUE_ID_WEAPONS"
		CASE MENU_UNIQUE_ID_MEDALS                                   RETURN "MENU_UNIQUE_ID_MEDALS"
		CASE MENU_UNIQUE_ID_STATS                                    RETURN "MENU_UNIQUE_ID_STATS"
		CASE MENU_UNIQUE_ID_AVAILABLE                                RETURN "MENU_UNIQUE_ID_AVAILABLE"
		CASE MENU_UNIQUE_ID_VAGOS                                    RETURN "MENU_UNIQUE_ID_VAGOS"
		CASE MENU_UNIQUE_ID_COPS                                     RETURN "MENU_UNIQUE_ID_COPS"
		CASE MENU_UNIQUE_ID_LOST                                     RETURN "MENU_UNIQUE_ID_LOST"
		CASE MENU_UNIQUE_ID_HOME_MISSION                             RETURN "MENU_UNIQUE_ID_HOME_MISSION"
		CASE MENU_UNIQUE_ID_CORONA_SETTINGS                          RETURN "MENU_UNIQUE_ID_CORONA_SETTINGS"
		CASE MENU_UNIQUE_ID_CORONA_INVITE                            RETURN "MENU_UNIQUE_ID_CORONA_INVITE"
		CASE MENU_UNIQUE_ID_STORE                                    RETURN "MENU_UNIQUE_ID_STORE"
		CASE MENU_UNIQUE_ID_HOME_HELP                                RETURN "MENU_UNIQUE_ID_HOME_HELP"
// EVERYTHING HERE IS AUTOMATICALLY GENERATED! EDIT AT YOUR OWN RISK
		CASE MENU_UNIQUE_ID_HOME_BRIEF                               RETURN "MENU_UNIQUE_ID_HOME_BRIEF"
		CASE MENU_UNIQUE_ID_HOME_FEED                                RETURN "MENU_UNIQUE_ID_HOME_FEED"
		CASE MENU_UNIQUE_ID_SETTINGS_AUDIO                           RETURN "MENU_UNIQUE_ID_SETTINGS_AUDIO"
		CASE MENU_UNIQUE_ID_SETTINGS_DISPLAY                         RETURN "MENU_UNIQUE_ID_SETTINGS_DISPLAY"
		CASE MENU_UNIQUE_ID_SETTINGS_CONTROLS                        RETURN "MENU_UNIQUE_ID_SETTINGS_CONTROLS"
		CASE MENU_UNIQUE_ID_NEW_GAME                                 RETURN "MENU_UNIQUE_ID_NEW_GAME"
		CASE MENU_UNIQUE_ID_LOAD_GAME                                RETURN "MENU_UNIQUE_ID_LOAD_GAME"
		CASE MENU_UNIQUE_ID_SAVE_GAME                                RETURN "MENU_UNIQUE_ID_SAVE_GAME"
		CASE MENU_UNIQUE_ID_HEADER                                   RETURN "MENU_UNIQUE_ID_HEADER"
		CASE MENU_UNIQUE_ID_HEADER_SAVE_GAME                         RETURN "MENU_UNIQUE_ID_HEADER_SAVE_GAME"
		CASE MENU_UNIQUE_ID_HOME                                     RETURN "MENU_UNIQUE_ID_HOME"
		CASE MENU_UNIQUE_ID_CREWS                                    RETURN "MENU_UNIQUE_ID_CREWS"
		CASE MENU_UNIQUE_ID_SETTINGS_SAVEGAME                        RETURN "MENU_UNIQUE_ID_SETTINGS_SAVEGAME"
		CASE MENU_UNIQUE_ID_GALLERY_ITEM                             RETURN "MENU_UNIQUE_ID_GALLERY_ITEM"
		CASE MENU_UNIQUE_ID_FREEMODE                                 RETURN "MENU_UNIQUE_ID_FREEMODE"
		CASE MENU_UNIQUE_ID_MP_CHAR_1                                RETURN "MENU_UNIQUE_ID_MP_CHAR_1"
		CASE MENU_UNIQUE_ID_MP_CHAR_2                                RETURN "MENU_UNIQUE_ID_MP_CHAR_2"
		CASE MENU_UNIQUE_ID_MP_CHAR_3                                RETURN "MENU_UNIQUE_ID_MP_CHAR_3"
		CASE MENU_UNIQUE_ID_MP_CHAR_4                                RETURN "MENU_UNIQUE_ID_MP_CHAR_4"
		CASE MENU_UNIQUE_ID_MP_CHAR_5                                RETURN "MENU_UNIQUE_ID_MP_CHAR_5"
// EVERYTHING HERE IS AUTOMATICALLY GENERATED! EDIT AT YOUR OWN RISK
		CASE MENU_UNIQUE_ID_HEADER_MULTIPLAYER                       RETURN "MENU_UNIQUE_ID_HEADER_MULTIPLAYER"
		CASE MENU_UNIQUE_ID_HEADER_MY_MP                             RETURN "MENU_UNIQUE_ID_HEADER_MY_MP"
		CASE MENU_UNIQUE_ID_MISSION_CREATOR                          RETURN "MENU_UNIQUE_ID_MISSION_CREATOR"
		CASE MENU_UNIQUE_ID_GAME_MP                                  RETURN "MENU_UNIQUE_ID_GAME_MP"
		CASE MENU_UNIQUE_ID_LEAVE_GAME                               RETURN "MENU_UNIQUE_ID_LEAVE_GAME"
		CASE MENU_UNIQUE_ID_HEADER_PRE_LOBBY                         RETURN "MENU_UNIQUE_ID_HEADER_PRE_LOBBY"
		CASE MENU_UNIQUE_ID_HEADER_LOBBY                             RETURN "MENU_UNIQUE_ID_HEADER_LOBBY"
		CASE MENU_UNIQUE_ID_PARTY                                    RETURN "MENU_UNIQUE_ID_PARTY"
		CASE MENU_UNIQUE_ID_LOBBY                                    RETURN "MENU_UNIQUE_ID_LOBBY"
		CASE MENU_UNIQUE_ID_PLACEHOLDER                              RETURN "MENU_UNIQUE_ID_PLACEHOLDER"
		CASE MENU_UNIQUE_ID_STATS_CATEGORY                           RETURN "MENU_UNIQUE_ID_STATS_CATEGORY"
		CASE MENU_UNIQUE_ID_SETTINGS_LIST                            RETURN "MENU_UNIQUE_ID_SETTINGS_LIST"
		CASE MENU_UNIQUE_ID_SAVE_GAME_LIST                           RETURN "MENU_UNIQUE_ID_SAVE_GAME_LIST"
		CASE MENU_UNIQUE_ID_MAP_LEGEND                               RETURN "MENU_UNIQUE_ID_MAP_LEGEND"
		CASE MENU_UNIQUE_ID_CREWS_CATEGORY                           RETURN "MENU_UNIQUE_ID_CREWS_CATEGORY"
		CASE MENU_UNIQUE_ID_CREWS_FILTER                             RETURN "MENU_UNIQUE_ID_CREWS_FILTER"
		CASE MENU_UNIQUE_ID_CREWS_CARD                               RETURN "MENU_UNIQUE_ID_CREWS_CARD"
		CASE MENU_UNIQUE_ID_SPECTATOR                                RETURN "MENU_UNIQUE_ID_SPECTATOR"
		CASE MENU_UNIQUE_ID_STATS_LISTITEM                           RETURN "MENU_UNIQUE_ID_STATS_LISTITEM"
		CASE MENU_UNIQUE_ID_CREW_MINE                                RETURN "MENU_UNIQUE_ID_CREW_MINE"
// EVERYTHING HERE IS AUTOMATICALLY GENERATED! EDIT AT YOUR OWN RISK
		CASE MENU_UNIQUE_ID_CREW_ROCKSTAR                            RETURN "MENU_UNIQUE_ID_CREW_ROCKSTAR"
		CASE MENU_UNIQUE_ID_CREW_FRIENDS                             RETURN "MENU_UNIQUE_ID_CREW_FRIENDS"
		CASE MENU_UNIQUE_ID_CREW_INVITES                             RETURN "MENU_UNIQUE_ID_CREW_INVITES"
		CASE MENU_UNIQUE_ID_CREW_LIST                                RETURN "MENU_UNIQUE_ID_CREW_LIST"
		CASE MENU_UNIQUE_ID_MISSION_CREATOR_CATEGORY                 RETURN "MENU_UNIQUE_ID_MISSION_CREATOR_CATEGORY"
		CASE MENU_UNIQUE_ID_MISSION_CREATOR_LISTITEM                 RETURN "MENU_UNIQUE_ID_MISSION_CREATOR_LISTITEM"
		CASE MENU_UNIQUE_ID_MISSION_CREATOR_STAT                     RETURN "MENU_UNIQUE_ID_MISSION_CREATOR_STAT"
		CASE MENU_UNIQUE_ID_FRIENDS_LIST                             RETURN "MENU_UNIQUE_ID_FRIENDS_LIST"
		CASE MENU_UNIQUE_ID_FRIENDS_OPTIONS                          RETURN "MENU_UNIQUE_ID_FRIENDS_OPTIONS"
		CASE MENU_UNIQUE_ID_HEADER_MP_CHARACTER_SELECT               RETURN "MENU_UNIQUE_ID_HEADER_MP_CHARACTER_SELECT"
		CASE MENU_UNIQUE_ID_HEADER_MP_CHARACTER_CREATION             RETURN "MENU_UNIQUE_ID_HEADER_MP_CHARACTER_CREATION"
		CASE MENU_UNIQUE_ID_CREATION_HERITAGE                        RETURN "MENU_UNIQUE_ID_CREATION_HERITAGE"
		CASE MENU_UNIQUE_ID_CREATION_LIFESTYLE                       RETURN "MENU_UNIQUE_ID_CREATION_LIFESTYLE"
		CASE MENU_UNIQUE_ID_CREATION_YOU                             RETURN "MENU_UNIQUE_ID_CREATION_YOU"
		CASE MENU_UNIQUE_ID_PARTY_LIST                               RETURN "MENU_UNIQUE_ID_PARTY_LIST"
		CASE MENU_UNIQUE_ID_REPLAY_MISSION                           RETURN "MENU_UNIQUE_ID_REPLAY_MISSION"
		CASE MENU_UNIQUE_ID_REPLAY_MISSION_LIST                      RETURN "MENU_UNIQUE_ID_REPLAY_MISSION_LIST"
		CASE MENU_UNIQUE_ID_REPLAY_MISSION_ACTIVITY                  RETURN "MENU_UNIQUE_ID_REPLAY_MISSION_ACTIVITY"
		CASE MENU_UNIQUE_ID_CREW                                     RETURN "MENU_UNIQUE_ID_CREW"
		CASE MENU_UNIQUE_ID_CREATION_HERITAGE_LIST                   RETURN "MENU_UNIQUE_ID_CREATION_HERITAGE_LIST"
// EVERYTHING HERE IS AUTOMATICALLY GENERATED! EDIT AT YOUR OWN RISK
		CASE MENU_UNIQUE_ID_CREATION_LIFESTYLE_LIST                  RETURN "MENU_UNIQUE_ID_CREATION_LIFESTYLE_LIST"
		CASE MENU_UNIQUE_ID_PLAYERS_LIST                             RETURN "MENU_UNIQUE_ID_PLAYERS_LIST"
		CASE MENU_UNIQUE_ID_PLAYERS_OPTIONS                          RETURN "MENU_UNIQUE_ID_PLAYERS_OPTIONS"
		CASE MENU_UNIQUE_ID_PLAYERS_OPTIONS_LIST                     RETURN "MENU_UNIQUE_ID_PLAYERS_OPTIONS_LIST"
		CASE MENU_UNIQUE_ID_PARTY_OPTIONS                            RETURN "MENU_UNIQUE_ID_PARTY_OPTIONS"
		CASE MENU_UNIQUE_ID_PARTY_OPTIONS_LIST                       RETURN "MENU_UNIQUE_ID_PARTY_OPTIONS_LIST"
		CASE MENU_UNIQUE_ID_CREW_OPTIONS                             RETURN "MENU_UNIQUE_ID_CREW_OPTIONS"
		CASE MENU_UNIQUE_ID_CREW_OPTIONS_LIST                        RETURN "MENU_UNIQUE_ID_CREW_OPTIONS_LIST"
		CASE MENU_UNIQUE_ID_FRIENDS_OPTIONS_LIST                     RETURN "MENU_UNIQUE_ID_FRIENDS_OPTIONS_LIST"
		CASE MENU_UNIQUE_ID_FRIENDS_MP                               RETURN "MENU_UNIQUE_ID_FRIENDS_MP"
		CASE MENU_UNIQUE_ID_TEAM_SELECT                              RETURN "MENU_UNIQUE_ID_TEAM_SELECT"
		CASE MENU_UNIQUE_ID_HOME_DIALOG                              RETURN "MENU_UNIQUE_ID_HOME_DIALOG"
		CASE MENU_UNIQUE_ID_HEADER_EMPTY                             RETURN "MENU_UNIQUE_ID_HEADER_EMPTY"
		CASE MENU_UNIQUE_ID_SETTINGS_FEED                            RETURN "MENU_UNIQUE_ID_SETTINGS_FEED"
		CASE MENU_UNIQUE_ID_GALLERY_OPTIONS                          RETURN "MENU_UNIQUE_ID_GALLERY_OPTIONS"
		CASE MENU_UNIQUE_ID_GALLERY_OPTIONS_LIST                     RETURN "MENU_UNIQUE_ID_GALLERY_OPTIONS_LIST"
		CASE MENU_UNIQUE_ID_BRIGHTNESS_CALIBRATION                   RETURN "MENU_UNIQUE_ID_BRIGHTNESS_CALIBRATION"
		CASE MENU_UNIQUE_ID_HEADER_TEXT_SELECTION                    RETURN "MENU_UNIQUE_ID_HEADER_TEXT_SELECTION"
		CASE MENU_UNIQUE_ID_LOBBY_LIST                               RETURN "MENU_UNIQUE_ID_LOBBY_LIST"
		CASE MENU_UNIQUE_ID_LOBBY_LIST_ITEM                          RETURN "MENU_UNIQUE_ID_LOBBY_LIST_ITEM"
// EVERYTHING HERE IS AUTOMATICALLY GENERATED! EDIT AT YOUR OWN RISK
		CASE MENU_UNIQUE_ID_HEADER_CORONA                            RETURN "MENU_UNIQUE_ID_HEADER_CORONA"
		CASE MENU_UNIQUE_ID_HEADER_CORONA_LOBBY                      RETURN "MENU_UNIQUE_ID_HEADER_CORONA_LOBBY"
		CASE MENU_UNIQUE_ID_HEADER_CORONA_JOINED_PLAYERS             RETURN "MENU_UNIQUE_ID_HEADER_CORONA_JOINED_PLAYERS"
		CASE MENU_UNIQUE_ID_HEADER_CORONA_INVITE_PLAYERS             RETURN "MENU_UNIQUE_ID_HEADER_CORONA_INVITE_PLAYERS"
		CASE MENU_UNIQUE_ID_HEADER_CORONA_INVITE_FRIENDS             RETURN "MENU_UNIQUE_ID_HEADER_CORONA_INVITE_FRIENDS"
		CASE MENU_UNIQUE_ID_HEADER_CORONA_INVITE_CREWS               RETURN "MENU_UNIQUE_ID_HEADER_CORONA_INVITE_CREWS"
		CASE MENU_UNIQUE_ID_CORONA_JOINED_PLAYERS                    RETURN "MENU_UNIQUE_ID_CORONA_JOINED_PLAYERS"
		CASE MENU_UNIQUE_ID_CORONA_INVITE_PLAYERS                    RETURN "MENU_UNIQUE_ID_CORONA_INVITE_PLAYERS"
		CASE MENU_UNIQUE_ID_CORONA_INVITE_FRIENDS                    RETURN "MENU_UNIQUE_ID_CORONA_INVITE_FRIENDS"
		CASE MENU_UNIQUE_ID_CORONA_INVITE_CREWS                      RETURN "MENU_UNIQUE_ID_CORONA_INVITE_CREWS"
		CASE MENU_UNIQUE_ID_SETTINGS_FACEBOOK                        RETURN "MENU_UNIQUE_ID_SETTINGS_FACEBOOK"
		CASE MENU_UNIQUE_ID_HEADER_JOINING_SCREEN                    RETURN "MENU_UNIQUE_ID_HEADER_JOINING_SCREEN"
		CASE MENU_UNIQUE_ID_CORONA_SETTINGS_LIST                     RETURN "MENU_UNIQUE_ID_CORONA_SETTINGS_LIST"
		CASE MENU_UNIQUE_ID_CORONA_DETAILS_LIST                      RETURN "MENU_UNIQUE_ID_CORONA_DETAILS_LIST"
		CASE MENU_UNIQUE_ID_CORONA_INVITE_LIST                       RETURN "MENU_UNIQUE_ID_CORONA_INVITE_LIST"
		CASE MENU_UNIQUE_ID_CORONA_JOINED_LIST                       RETURN "MENU_UNIQUE_ID_CORONA_JOINED_LIST"
		CASE MENU_UNIQUE_ID_HEADER_CORONA_INVITE_MATCHED_PLAYERS     RETURN "MENU_UNIQUE_ID_HEADER_CORONA_INVITE_MATCHED_PLAYERS"
		CASE MENU_UNIQUE_ID_HEADER_CORONA_INVITE_LAST_JOB_PLAYERS    RETURN "MENU_UNIQUE_ID_HEADER_CORONA_INVITE_LAST_JOB_PLAYERS"
		CASE MENU_UNIQUE_ID_CORONA_INVITE_MATCHED_PLAYERS            RETURN "MENU_UNIQUE_ID_CORONA_INVITE_MATCHED_PLAYERS"
		CASE MENU_UNIQUE_ID_CORONA_INVITE_LAST_JOB_PLAYERS           RETURN "MENU_UNIQUE_ID_CORONA_INVITE_LAST_JOB_PLAYERS"
// EVERYTHING HERE IS AUTOMATICALLY GENERATED! EDIT AT YOUR OWN RISK
		CASE MENU_UNIQUE_ID_CREW_LEADERBOARDS                        RETURN "MENU_UNIQUE_ID_CREW_LEADERBOARDS"
		CASE MENU_UNIQUE_ID_HOME_OPEN_JOBS                           RETURN "MENU_UNIQUE_ID_HOME_OPEN_JOBS"
		CASE MENU_UNIQUE_ID_CREW_REQUEST                             RETURN "MENU_UNIQUE_ID_CREW_REQUEST"
		CASE MENU_UNIQUE_ID_HEADER_RACE                              RETURN "MENU_UNIQUE_ID_HEADER_RACE"
		CASE MENU_UNIQUE_ID_RACE_INFO                                RETURN "MENU_UNIQUE_ID_RACE_INFO"
		CASE MENU_UNIQUE_ID_RACE_INFOLIST                            RETURN "MENU_UNIQUE_ID_RACE_INFOLIST"
		CASE MENU_UNIQUE_ID_RACE_LOBBYLIST                           RETURN "MENU_UNIQUE_ID_RACE_LOBBYLIST"
		CASE MENU_UNIQUE_ID_HEADER_BETTING                           RETURN "MENU_UNIQUE_ID_HEADER_BETTING"
		CASE MENU_UNIQUE_ID_BETTING                                  RETURN "MENU_UNIQUE_ID_BETTING"
		CASE MENU_UNIQUE_ID_BETTING_INFOLIST                         RETURN "MENU_UNIQUE_ID_BETTING_INFOLIST"
		CASE MENU_UNIQUE_ID_BETTING_LOBBYLIST                        RETURN "MENU_UNIQUE_ID_BETTING_LOBBYLIST"
		CASE MENU_UNIQUE_ID_INCEPT_TRIGGER                           RETURN "MENU_UNIQUE_ID_INCEPT_TRIGGER"
		CASE MENU_UNIQUE_ID_SETTINGS_SIXAXIS                         RETURN "MENU_UNIQUE_ID_SETTINGS_SIXAXIS"
		CASE MENU_UNIQUE_ID_REPLAY_RANDOM                            RETURN "MENU_UNIQUE_ID_REPLAY_RANDOM"
		CASE MENU_UNIQUE_ID_CUTSCENE_EMPTY                           RETURN "MENU_UNIQUE_ID_CUTSCENE_EMPTY"
		CASE MENU_UNIQUE_ID_HOME_NEWSWIRE                            RETURN "MENU_UNIQUE_ID_HOME_NEWSWIRE"
		CASE MENU_UNIQUE_ID_SETTINGS_CAMERA                          RETURN "MENU_UNIQUE_ID_SETTINGS_CAMERA"
		CASE MENU_UNIQUE_ID_SETTINGS_GRAPHICS                        RETURN "MENU_UNIQUE_ID_SETTINGS_GRAPHICS"
		CASE MENU_UNIQUE_ID_SETTINGS_ADVANCED_GFX                    RETURN "MENU_UNIQUE_ID_SETTINGS_ADVANCED_GFX"
		CASE MENU_UNIQUE_ID_SETTINGS_VOICE_CHAT                      RETURN "MENU_UNIQUE_ID_SETTINGS_VOICE_CHAT"
		CASE MENU_UNIQUE_ID_SETTINGS_MISC_CONTROLS                   RETURN "MENU_UNIQUE_ID_SETTINGS_MISC_CONTROLS"
		CASE MENU_UNIQUE_ID_HELP                                     RETURN "MENU_UNIQUE_ID_HELP"
		CASE MENU_UNIQUE_ID_MOVIE_EDITOR                             RETURN "MENU_UNIQUE_ID_MOVIE_EDITOR"
		CASE MENU_UNIQUE_ID_EXIT_TO_WINDOWS                          RETURN "MENU_UNIQUE_ID_EXIT_TO_WINDOWS"
		CASE MENU_UNIQUE_ID_HEADER_LANDING_PAGE                      RETURN "MENU_UNIQUE_ID_HEADER_LANDING_PAGE"
		CASE MENU_UNIQUE_ID_SHOW_ACCOUNT_PICKER                      RETURN "MENU_UNIQUE_ID_SHOW_ACCOUNT_PICKER"
		CASE MENU_UNIQUE_ID_SETTINGS_REPLAY                          RETURN "MENU_UNIQUE_ID_SETTINGS_REPLAY"
		CASE MENU_UNIQUE_ID_REPLAY_EDITOR                            RETURN "MENU_UNIQUE_ID_REPLAY_EDITOR"
		CASE MENU_UNIQUE_ID_KEYMAP                                   RETURN "MENU_UNIQUE_ID_KEYMAP"
		CASE MENU_UNIQUE_ID_KEYMAP_LIST                              RETURN "MENU_UNIQUE_ID_KEYMAP_LIST"
		CASE MENU_UNIQUE_ID_KEYMAP_LISTITEM                          RETURN "MENU_UNIQUE_ID_KEYMAP_LISTITEM"
		CASE MENU_UNIQUE_ID_SETTINGS_FIRST_PERSON                    RETURN "MENU_UNIQUE_ID_SETTINGS_FIRST_PERSON"
		CASE MENU_UNIQUE_ID_HEADER_LANDING_KEYMAPPING                RETURN "MENU_UNIQUE_ID_HEADER_LANDING_KEYMAPPING"
		CASE MENU_UNIQUE_ID_PROCESS_SAVEGAME                         RETURN "MENU_UNIQUE_ID_PROCESS_SAVEGAME"
		CASE MENU_UNIQUE_ID_PROCESS_SAVEGAME_LIST                    RETURN "MENU_UNIQUE_ID_PROCESS_SAVEGAME_LIST"
		CASE MENU_UNIQUE_ID_IMPORT_SAVEGAME                          RETURN "MENU_UNIQUE_ID_IMPORT_SAVEGAME"
		CASE MENU_UNIQUE_ID_EXIT_TO_MAIN_MENU                        RETURN "MENU_UNIQUE_ID_EXIT_TO_MAIN_MENU"
		CASE MENU_UNIQUE_ID_CREDITS 								 RETURN "MENU_UNIQUE_ID_CREDITS"
		CASE MENU_UNIQUE_ID_LEGAL 									 RETURN "MENU_UNIQUE_ID_LEGAL"
		CASE MENU_UNIQUE_ID_CREDITS_LEGAL							 RETURN "MENU_UNIQUE_ID_CREDITS_LEGAL"
		
	ENDSWITCH

	RETURN "NONE"
// EVERYTHING ABOVE IS AUTOMATICALLY GENERATED! EDIT AT YOUR OWN RISK
ENDFUNC

//
// BLIP NAMES - These should start at whatever BLIP_SCRIPT_BLIPS_START (minimap.h) is set to in code (currently 15) (DerekP code)
//              They also need to be synced up with Gareth's ActionScript
//
ENUM BLIP_SPRITE

    //
    // invalid radar trace:
    //
	
    RADAR_TRACE_INVALID = -1,
    
    //
    // code & script share the traces below:
    //
    
    RADAR_TRACE_POLICE_HELI_SPIN = 15,
    RADAR_TRACE_POLICE_PLANE_MOVE,
    RADAR_TRACE_NUMBERED_1,
    RADAR_TRACE_NUMBERED_2,
    RADAR_TRACE_NUMBERED_3,
    RADAR_TRACE_NUMBERED_4,
    RADAR_TRACE_NUMBERED_5,
    RADAR_TRACE_NUMBERED_6,
    RADAR_TRACE_NUMBERED_7,
    RADAR_TRACE_NUMBERED_8,
    RADAR_TRACE_NUMBERED_9,
    RADAR_TRACE_NUMBERED_10,
	
    RADAR_TRACE_PLACEHOLDER_1,
    RADAR_TRACE_PLACEHOLDER_2,
    RADAR_TRACE_PLACEHOLDER_3,
    RADAR_TRACE_PLACEHOLDER_4,
    RADAR_TRACE_PLACEHOLDER_5,
    
    //
    // script only traces:
    //
    
    RADAR_TRACE_OBJECTIVE,
    RADAR_TRACE_JIMMY,
    RADAR_TRACE_SKI_LIFT,
    RADAR_TRACE_STATION,
    RADAR_TRACE_CABLE_CAR,
    RADAR_TRACE_ACTIVITIES,
    RADAR_TRACE_RACEFLAG,
    RADAR_TRACE_FIRE,
    RADAR_TRACE_SAFEHOUSE,
    RADAR_TRACE_POLICE,
    RADAR_TRACE_POLICE_CHASE,
    RADAR_TRACE_POLICE_HELI,
    RADAR_TRACE_BOMB_A,
    RADAR_TRACE_BOMB_B,
    RADAR_TRACE_BOMB_C,
    RADAR_TRACE_SNITCH,
    RADAR_TRACE_PLANNING_LOCATIONS,
    RADAR_TRACE_CRIM_ARREST,
    RADAR_TRACE_CRIM_CARSTEAL,
    RADAR_TRACE_CRIM_DRUGS,
    RADAR_TRACE_CRIM_HOLDUPS,
    RADAR_TRACE_CRIM_PIMPING,
    RADAR_TRACE_CRIM_PLAYER,
    RADAR_TRACE_FENCE,
    RADAR_TRACE_COP_PATROL,
    RADAR_TRACE_COP_PLAYER,
    RADAR_TRACE_CRIM_WANTED,
    RADAR_TRACE_HEIST,
    RADAR_TRACE_POLICE_STATION,
    RADAR_TRACE_HOSPITAL,    
    RADAR_TRACE_ASSASSINS_MARK,
    RADAR_TRACE_ELEVATOR,
    RADAR_TRACE_HELICOPTER,
    RADAR_TRACE_JOYRIDERS,
    RADAR_TRACE_RANDOM_CHARACTER,
    RADAR_TRACE_SECURITY_VAN,
    RADAR_TRACE_TOW_TRUCK,
    RADAR_TRACE_DRIVE_THRU,
    RADAR_TRACE_ILLEGAL_PARKING,    
    RADAR_TRACE_BARBER,
    RADAR_TRACE_CAR_MOD_SHOP,
    RADAR_TRACE_CLOTHES_STORE,
    RADAR_TRACE_GYM,
    RADAR_TRACE_TATTOO,    
    RADAR_TRACE_ARMENIAN_FAMILY,
    RADAR_TRACE_LESTER_FAMILY,
    RADAR_TRACE_MICHAEL_FAMILY,
    RADAR_TRACE_TREVOR_FAMILY,
    RADAR_TRACE_JEWELRY_HEIST,    
    RADAR_TRACE_DRAG_RACE,
    RADAR_TRACE_DRAG_RACE_FINISH,
    RADAR_TRACE_CAR_CARRIER,
    RADAR_TRACE_RAMPAGE,    
    RADAR_TRACE_VINEWOOD_TOURS,
    RADAR_TRACE_LAMAR_FAMILY,
    RADAR_TRACE_TACO_VAN,
    RADAR_TRACE_FRANKLIN_FAMILY,    
    RADAR_TRACE_CHINESE_STRAND,
    RADAR_TRACE_FLIGHT_SCHOOL,
    RADAR_TRACE_EYE_SKY,    
    RADAR_TRACE_AIR_HOCKEY,
    RADAR_TRACE_BAR,
    RADAR_TRACE_BASE_JUMP,
    RADAR_TRACE_BASKETBALL,
    RADAR_TRACE_BIOLAB_HEIST,
    RADAR_TRACE_BOWLING,
    RADAR_TRACE_BURGER_SHOT,
    RADAR_TRACE_CABERET_CLUB,
    RADAR_TRACE_CAR_WASH,
    RADAR_TRACE_CLUCKIN_BELL,
    RADAR_TRACE_COMEDY_CLUB,
    RADAR_TRACE_DARTS,
    RADAR_TRACE_DOCKS_HEIST,
    RADAR_TRACE_FBI_HEIST,
    RADAR_TRACE_FBI_OFFICERS_STRAND,
    RADAR_TRACE_FINALE_BANK_HEIST,
    RADAR_TRACE_FINANCIER_STRAND,
    RADAR_TRACE_GOLF,
    RADAR_TRACE_GUN_SHOP,
    RADAR_TRACE_INTERNET_CAFE,
    RADAR_TRACE_MICHAEL_FAMILY_EXILE,
    RADAR_TRACE_NICE_HOUSE_HEIST,
    RADAR_TRACE_RANDOM_FEMALE,
    RADAR_TRACE_RANDOM_MALE,
    RADAR_TRACE_REPO,
    RADAR_TRACE_RESTAURANT,
    RADAR_TRACE_RURAL_BANK_HEIST,
    RADAR_TRACE_SHOOTING_RANGE,
    RADAR_TRACE_SOLOMON_STRAND,
    RADAR_TRACE_STRIP_CLUB,
    RADAR_TRACE_TENNIS,
    RADAR_TRACE_TREVOR_FAMILY_EXILE,
    RADAR_TRACE_MICHAEL_TREVOR_FAMILY,
    RADAR_TRACE_VEHICLE_SPAWN,
    RADAR_TRACE_TRIATHLON,
    RADAR_TRACE_OFF_ROAD_RACING,
    RADAR_TRACE_GANG_COPS,
    RADAR_TRACE_GANG_MEXICANS,
    RADAR_TRACE_GANG_BIKERS,
    RADAR_TRACE_GANG_FAMILIES,
    RADAR_TRACE_GANG_PROFESSIONALS,
    RADAR_TRACE_SNITCH_RED,
    RADAR_TRACE_CRIM_CUFF_KEYS,
    RADAR_TRACE_CINEMA,
    RADAR_TRACE_MUSIC_VENUE,
    RADAR_TRACE_POLICE_STATION_BLUE,
    RADAR_TRACE_AIRPORT,
    RADAR_TRACE_CRIM_SAVED_VEHICLE,
	RADAR_TRACE_WEED_STASH,
	RADAR_TRACE_HUNTING,
	RADAR_TRACE_POOL,
	RADAR_TRACE_OBJECTIVE_BLUE,
	RADAR_TRACE_OBJECTIVE_GREEN,
	RADAR_TRACE_OBJECTIVE_RED,
	RADAR_TRACE_OBJECTIVE_YELLOW,
	RADAR_TRACE_ARMS_DEALING,
	RADAR_TRACE_MP_FRIEND,
	RADAR_TRACE_CELEBRITY_THEFT,
	RADAR_TRACE_WEAPON_ASSAULT_RIFLE,
	RADAR_TRACE_WEAPON_BAT,
	RADAR_TRACE_WEAPON_GRENADE,
	RADAR_TRACE_WEAPON_HEALTH,
	RADAR_TRACE_WEAPON_KNIFE,
	RADAR_TRACE_WEAPON_MOLOTOV,
	RADAR_TRACE_WEAPON_PISTOL,
	RADAR_TRACE_WEAPON_ROCKET,
	RADAR_TRACE_WEAPON_SHOTGUN,
	RADAR_TRACE_WEAPON_SMG,
	RADAR_TRACE_WEAPON_SNIPER,
	RADAR_TRACE_MP_NOISE,
	RADAR_TRACE_POI,
	RADAR_TRACE_PASSIVE,
	RADAR_TRACE_USINGMENU,
	RADAR_TRACE_FRIEND_FRANKLIN_P,
	RADAR_TRACE_FRIEND_FRANKLIN_X,
	RADAR_TRACE_FRIEND_MICHAEL_P,
	RADAR_TRACE_FRIEND_MICHAEL_X,
	RADAR_TRACE_FRIEND_TREVOR_P,
	RADAR_TRACE_FRIEND_TREVOR_X,
	RADAR_TRACE_GANG_COPS_PARTNER,
	RADAR_TRACE_FRIEND_LAMAR,
	RADAR_TRACE_WEAPON_MINIGUN,
	RADAR_TRACE_WEAPON_GRENADELAUNCHER,
	RADAR_TRACE_WEAPON_ARMOUR,
	RADAR_TRACE_PROPERTY_TAKEOVER,	
	RADAR_TRACE_GANG_MEXICANS_HIGHLIGHT,	
	RADAR_TRACE_GANG_BIKERS_HIGHLIGHT,
	RADAR_TRACE_TRIATHLON_CYCLING,
	RADAR_TRACE_TRIATHLON_SWIMMING,
	RADAR_TRACE_PROPERTY_TAKEOVER_BIKERS,
	RADAR_TRACE_PROPERTY_TAKEOVER_COPS,
	RADAR_TRACE_PROPERTY_TAKEOVER_VAGOS,
	RADAR_TRACE_CAMERA,
	RADAR_TRACE_CENTRE_RED,
	RADAR_TRACE_HANDCUFF_KEYS_BIKERS,
	RADAR_TRACE_HANDCUFF_KEYS_VAGOS,
	RADAR_TRACE_HANDCUFFS_CLOSED_BIKERS,
	RADAR_TRACE_HANDCUFFS_CLOSED_VAGOS,
	RADAR_TRACE_HANDCUFFS_OPEN_BIKERS,
	RADAR_TRACE_HANDCUFFS_OPEN_VAGOS,
	RADAR_TRACE_CAMERA_BADGER,
	RADAR_TRACE_CAMERA_FACADE,
	RADAR_TRACE_CAMERA_IFRUIT,
	RADAR_CRIM_ARREST_BIKERS,
	RADAR_CRIM_ARREST_VAGOS,
	RADAR_TRACE_YOGA,
	RADAR_TRACE_TAXI,
	RADAR_TRACE_NUMBERED_11,
	RADAR_TRACE_NUMBERED_12,
	RADAR_TRACE_NUMBERED_13,
	RADAR_TRACE_NUMBERED_14,
	RADAR_TRACE_NUMBERED_15,
	RADAR_TRACE_NUMBERED_16,
	RADAR_TRACE_SHRINK,
	RADAR_TRACE_EPSILON,
	RADAR_TRACE_FINANCIER_STRAND_GREY,
	RADAR_TRACE_TREVOR_FAMILY_GREY,
	RADAR_TRACE_TREVOR_FAMILY_RED,
	RADAR_TRACE_FRANKLIN_FAMILY_GREY,
	RADAR_TRACE_FRANKLIN_FAMILY_BLUE,
	RADAR_TRACE_FRANKLIN_A,
	RADAR_TRACE_FRANKLIN_B,
	RADAR_TRACE_FRANKLIN_C,
	RADAR_TRACE_NUMBERED_RED_1,
	RADAR_TRACE_NUMBERED_RED_2,
	RADAR_TRACE_NUMBERED_RED_3,
	RADAR_TRACE_NUMBERED_RED_4,
	RADAR_TRACE_NUMBERED_RED_5,
	RADAR_TRACE_NUMBERED_RED_6,
	RADAR_TRACE_NUMBERED_RED_7,
	RADAR_TRACE_NUMBERED_RED_8,
	RADAR_TRACE_NUMBERED_RED_9,
	RADAR_TRACE_NUMBERED_RED_10,
	RADAR_TRACE_GANG_VEHICLE,
	RADAR_TRACE_GANG_VEHICLE_BIKERS,
	RADAR_TRACE_GANG_VEHICLE_COPS,
	RADAR_TRACE_GANG_VEHICLE_VAGOS,
	RADAR_TRACE_RADAR_GUNCAR,
	RADAR_TRACE_DRIVING_BIKERS,
	RADAR_TRACE_DRIVING_COPS,
	RADAR_TRACE_DRIVING_VAGOS,
	RADAR_TRACE_GANG_COPS_HIGHLIGHT,
	RADAR_TRACE_SHIELD_BIKERS,
	RADAR_TRACE_SHIELD_COPS,
	RADAR_TRACE_SHIELD_VAGOS,
	RADAR_TRACE_CUSTODY_BIKERS,
	RADAR_TRACE_CUSTODY_VAGOS,
	RADAR_TRACE_GANG_WANTED_BIKERS,
	RADAR_TRACE_GANG_WANTED_BIKERS_1,
	RADAR_TRACE_GANG_WANTED_BIKERS_2,
	RADAR_TRACE_GANG_WANTED_BIKERS_3,
	RADAR_TRACE_GANG_WANTED_BIKERS_4,
	RADAR_TRACE_GANG_WANTED_BIKERS_5,
	RADAR_TRACE_GANG_WANTED_VAGOS,
	RADAR_TRACE_GANG_WANTED_VAGOS_1,
	RADAR_TRACE_GANG_WANTED_VAGOS_2,
	RADAR_TRACE_GANG_WANTED_VAGOS_3,
	RADAR_TRACE_GANG_WANTED_VAGOS_4,
	RADAR_TRACE_GANG_WANTED_VAGOS_5,
	RADAR_TRACE_ARMS_DEALING_AIR,
	RADAR_TRACE_PLAYERSTATE_ARRESTED,
	RADAR_TRACE_PLAYERSTATE_CUSTODY,
	RADAR_TRACE_PLAYERSTATE_DRIVING,
	RADAR_TRACE_PLAYERSTATE_KEYHOLDER,
	RADAR_TRACE_PLAYERSTATE_PARTNER,
	RADAR_TRACE_GANG_WANTED_1,
	RADAR_TRACE_GANG_WANTED_2,
	RADAR_TRACE_GANG_WANTED_3,
	RADAR_TRACE_GANG_WANTED_4,
	RADAR_TRACE_GANG_WANTED_5,
	RADAR_TRACE_ZTYPE,
	RADAR_TRACE_STINGER,
	RADAR_TRACE_PACKER,
	RADAR_TRACE_MONROE,
	RADAR_TRACE_FAIRGROUND,
	RADAR_TRACE_PROPERTY,
	RADAR_TRACE_GANG_HIGHLIGHT,
	RADAR_TRACE_ALTRUIST,
	RADAR_TRACE_AI,
	RADAR_TRACE_ON_MISSION,
	RADAR_TRACE_CASH_PICKUP,
	RADAR_TRACE_CHOP,
	RADAR_TRACE_DEAD,
	RADAR_TRACE_TERRITORY_LOCKED,
	RADAR_TRACE_CASH_LOST,
	RADAR_TRACE_CASH_VAGOS,
	RADAR_TRACE_CASH_COPS,
	RADAR_TRACE_HOOKER,
	RADAR_TRACE_FRIEND,
	RADAR_TRACE_MISSION_2TO4,
	RADAR_TRACE_MISSION_2TO8,
	RADAR_TRACE_MISSION_2TO12,
	RADAR_TRACE_MISSION_2TO16,
	RADAR_TRACE_CUSTODY_DROPOFF,
	RADAR_TRACE_ONMISSION_COPS,
	RADAR_TRACE_ONMISSION_LOST,
	RADAR_TRACE_ONMISSION_VAGOS,
	RADAR_TRACE_CRIM_CARSTEAL_COPS,
	RADAR_TRACE_CRIM_CARSTEAL_BIKERS,
	RADAR_TRACE_CRIM_CARSTEAL_VAGOS,
	RADAR_TRACE_BAND_STRAND,
	RADAR_TRACE_SIMEON_FAMILY,
	RADAR_TRACE_MISSION_1,
	RADAR_TRACE_MISSION_2,
	RADAR_TRACE_FRIEND_DARTS,
	RADAR_TRACE_FRIEND_COMEDYCLUB,
	RADAR_TRACE_FRIEND_CINEMA,
	RADAR_TRACE_FRIEND_TENNIS,
	RADAR_TRACE_FRIEND_STRIPCLUB,
	RADAR_TRACE_FRIEND_LIVEMUSIC,
	RADAR_TRACE_FRIEND_GOLF,
	RADAR_TRACE_BOUNTY_HIT,
	RADAR_TRACE_UGC_MISSION,
	RADAR_TRACE_HORDE,
	RADAR_TRACE_CRATEDROP,
	RADAR_TRACE_PLANE_DROP,
	RADAR_TRACE_SUB,
	RADAR_TRACE_RACE,
	RADAR_TRACE_DEATHMATCH,
	RADAR_TRACE_ARM_WRESTLING,
	RADAR_TRACE_MISSION_1TO2,
	RADAR_TRACE_SHOOTINGRANGE_GUNSHOP,
	RADAR_TRACE_RACE_AIR,
	RADAR_TRACE_RACE_LAND,
	RADAR_TRACE_RACE_SEA,
	RADAR_TRACE_TOW,
	RADAR_TRACE_GARBAGE,
	RADAR_TRACE_DRILL,
	RADAR_TRACE_SPIKES,
	RADAR_TRACE_FIRETRUCK,
	RADAR_TRACE_MINIGUN2,
	RADAR_TRACE_BUGSTAR,
	RADAR_TRACE_SUBMARINE,
	RADAR_TRACE_CHINOOK,
	RADAR_TRACE_GETAWAY_CAR,
	RADAR_TRACE_MISSION_BIKERS_1,
	RADAR_TRACE_MISSION_BIKERS_1TO2,
	RADAR_TRACE_MISSION_BIKERS_2,
	RADAR_TRACE_MISSION_BIKERS_2TO4,
	RADAR_TRACE_MISSION_BIKERS_2TO8,
	RADAR_TRACE_MISSION_BIKERS_2TO12,
	RADAR_TRACE_MISSION_BIKERS_2TO16,
	RADAR_TRACE_MISSION_COPS_1,
	RADAR_TRACE_MISSION_COPS_1TO2,
	RADAR_TRACE_MISSION_COPS_2,
	RADAR_TRACE_MISSION_COPS_2TO4,
	RADAR_TRACE_MISSION_COPS_2TO8,
	RADAR_TRACE_MISSION_COPS_2TO12,
	RADAR_TRACE_MISSION_COPS_2TO16,
	RADAR_TRACE_MISSION_VAGOS_1,
	RADAR_TRACE_MISSION_VAGOS_1TO2,
	RADAR_TRACE_MISSION_VAGOS_2,
	RADAR_TRACE_MISSION_VAGOS_2TO4,
	RADAR_TRACE_MISSION_VAGOS_2TO8,
	RADAR_TRACE_MISSION_VAGOS_2TO12,
	RADAR_TRACE_MISSION_VAGOS_2TO16,
	RADAR_TRACE_GANG_BIKE,
	RADAR_TRACE_GAS_GRENADE,
	RADAR_TRACE_PROPERTY_FOR_SALE,
	RADAR_TRACE_GANG_ATTACK_PACKAGE,
	RADAR_TRACE_MARTIN_MADRAZZO,
	RADAR_TRACE_ENEMY_HELI_SPIN,
	RADAR_TRACE_BOOST,
	RADAR_TRACE_DEVIN,
	RADAR_TRACE_DOCK,
	RADAR_TRACE_GARAGE,
	RADAR_TRACE_GOLF_FLAG,
	RADAR_TRACE_HANGAR,
	RADAR_TRACE_HELIPAD,
	RADAR_TRACE_JERRY_CAN,
	RADAR_TRACE_MASK,
	RADAR_TRACE_HEIST_PREP,
	RADAR_TRACE_INCAPACITATED,
	RADAR_TRACE_SPAWN_POINT_PICKUP,
	RADAR_TRACE_BOILERSUIT,
	RADAR_TRACE_COMPLETED,
	RADAR_TRACE_ROCKETS,
	RADAR_TRACE_GARAGE_FOR_SALE,
	RADAR_TRACE_HELIPAD_FOR_SALE,
	RADAR_TRACE_DOCK_FOR_SALE,
	RADAR_TRACE_HANGAR_FOR_SALE,
	RADAR_TRACE_PLACEHOLDER_6,
	RADAR_TRACE_BUSINESS,
	RADAR_TRACE_BUSINESS_FOR_SALE,
	RADAR_TRACE_RACE_BIKE,
	RADAR_TRACE_PARACHUTE,
	RADAR_TRACE_TEAM_DEATHMATCH,
	RADAR_TRACE_RACE_FOOT,
	RADAR_TRACE_VEHICLE_DEATHMATCH,
	RADAR_TRACE_BARRY,
	RADAR_TRACE_DOM,
	RADAR_TRACE_MARYANN,
	RADAR_TRACE_CLETUS,
	RADAR_TRACE_JOSH,
	RADAR_TRACE_MINUTE,
	RADAR_TRACE_OMEGA,
	RADAR_TRACE_TONYA,
	RADAR_TRACE_PAPARAZZO,
	RADAR_TRACE_AIM,
	RADAR_TRACE_CRATEDROP_BACKGROUND,
	RADAR_TRACE_GREEN_AND_NET_PLAYER1,
	RADAR_TRACE_GREEN_AND_NET_PLAYER2,
	RADAR_TRACE_GREEN_AND_NET_PLAYER3,
	RADAR_TRACE_GREEN_AND_FRIENDLY,
	RADAR_TRACE_NET_PLAYER1_AND_NET_PLAYER2,
	RADAR_TRACE_NET_PLAYER1_AND_NET_PLAYER3,
	RADAR_TRACE_CREATOR,
	RADAR_TRACE_CREATOR_DIRECTION,
	RADAR_TRACE_ABIGAIL,
	RADAR_TRACE_BLIMP,
	RADAR_TRACE_REPAIR,
	RADAR_TRACE_TESTOSTERONE,
	RADAR_TRACE_DINGHY,
	RADAR_TRACE_FANATIC,
	RADAR_TRACE_INVISIBLE,
	RADAR_TRACE_INFO_ICON,
	RADAR_TRACE_CAPTURE_THE_FLAG,
	RADAR_TRACE_LAST_TEAM_STANDING,
	RADAR_TRACE_BOAT,
	RADAR_TRACE_CAPTURE_THE_FLAG_BASE,
	RADAR_TRACE_MP_CREW, // script must not use this! it's for code only!
	RADAR_TRACE_CAPTURE_THE_FLAG_OUTLINE, // script must not use this! it's for code only!
	RADAR_TRACE_CAPTURE_THE_FLAG_BASE_NOBAG,
	RADAR_TRACE_WEAPON_JERRYCAN,
	RADAR_TRACE_RP,
	RADAR_TRACE_LEVEL_INSIDE,
	RADAR_TRACE_BOUNTY_HIT_INSIDE,
	RADAR_TRACE_CAPTURE_THE_USAFLAG, 
	RADAR_TRACE_CAPTURE_THE_USAFLAG_OUTLINE, // script must not use this! it's for code only! 
	RADAR_TRACE_TANK,
	RADAR_TRACE_PLAYER_HELI,
	RADAR_TRACE_PLAYER_PLANE,
	RADAR_TRACE_PLAYER_JET,
	RADAR_TRACE_CENTRE_STROKE,
	RADAR_TRACE_PLAYER_GUNCAR,
	RADAR_TRACE_PLAYER_BOAT,
	RADAR_TRACE_MP_HEIST,
	RADAR_TRACE_TEMP_1,
	RADAR_TRACE_TEMP_2,
	RADAR_TRACE_TEMP_3,
	RADAR_TRACE_TEMP_4,
	RADAR_TRACE_TEMP_5,
	RADAR_TRACE_TEMP_6,
	RADAR_TRACE_RACE_STUNT,
	RADAR_TRACE_HOT_PROPERTY,
	RADAR_TRACE_URBANWARFARE_VERSUS,
	RADAR_TRACE_KING_OF_THE_CASTLE,
	RADAR_TRACE_PLAYER_KING,
	RADAR_TRACE_DEAD_DROP,
	RADAR_TRACE_PENNED_IN,
	RADAR_TRACE_BEAST,
	RADAR_TRACE_EDGE_POINTER, 
	RADAR_TRACE_EDGE_CROSSTHELINE,
	RADAR_TRACE_MP_LAMAR,
	RADAR_TRACE_BENNYS,
	RADAR_TRACE_CORNER_NUMBER_1,
	RADAR_TRACE_CORNER_NUMBER_2,
	RADAR_TRACE_CORNER_NUMBER_3,
	RADAR_TRACE_CORNER_NUMBER_4,
	RADAR_TRACE_CORNER_NUMBER_5,
	RADAR_TRACE_CORNER_NUMBER_6,
	RADAR_TRACE_CORNER_NUMBER_7,
	RADAR_TRACE_CORNER_NUMBER_8,
	RADAR_TRACE_YACHT,
	RADAR_TRACE_FINDERS_KEEPERS,
	RADAR_TRACE_ASSAULT_PACKAGE,
	RADAR_TRACE_HUNT_THE_BOSS,
	RADAR_TRACE_SIGHTSEER,
	RADAR_TRACE_TURRETED_LIMO,
	RADAR_TRACE_BELLY_OF_THE_BEAST,
	RADAR_TRACE_YACHT_LOCATION,
	RADAR_TRACE_PICKUP_BEAST,
	RADAR_TRACE_PICKUP_ZONED,
	RADAR_TRACE_PICKUP_RANDOM,
	RADAR_TRACE_PICKUP_SLOW_TIME,
	RADAR_TRACE_PICKUP_SWAP,
	RADAR_TRACE_PICKUP_THERMAL,
	RADAR_TRACE_PICKUP_WEED,
	RADAR_TRACE_WEAPON_RAILGUN,
	RADAR_TRACE_SEASHARK,
	RADAR_TRACE_PICKUP_HIDDEN,
	RADAR_TRACE_WAREHOUSE, 
	RADAR_TRACE_WAREHOUSE_FOR_SALE, 
	RADAR_TRACE_OFFICE, 
	RADAR_TRACE_OFFICE_FOR_SALE, 
	RADAR_TRACE_TRUCK, 
	RADAR_TRACE_CONTRABAND,
	RADAR_TRACE_TRAILER,
	RADAR_TRACE_VIP,
	RADAR_TRACE_CARGOBOB,
	RADAR_TRACE_AREA_OUTLINE_BLIP,
	RADAR_TRACE_PICKUP_ACCELERATOR,
	RADAR_TRACE_PICKUP_GHOST,
	RADAR_TRACE_PICKUP_DETONATOR,
	RADAR_TRACE_PICKUP_BOMB,
	RADAR_TRACE_PICKUP_ARMOURED,
	RADAR_TRACE_STUNT,
	RADAR_TRACE_WEAPON_LIVES,
	RADAR_TRACE_STUNT_PREMIUM,
	RADAR_TRACE_ADVERSARY,
	RADAR_TRACE_BIKER_CLUBHOUSE,
	RADAR_TRACE_BIKER_CAGED_IN,
	RADAR_TRACE_BIKER_TURF_WAR, 
	RADAR_TRACE_BIKER_JOUST, 
	RADAR_TRACE_PRODUCTION_WEED,
	RADAR_TRACE_PRODUCTION_CRACK,
	RADAR_TRACE_PRODUCTION_FAKE_ID,
	RADAR_TRACE_PRODUCTION_METH,
	RADAR_TRACE_PRODUCTION_MONEY,
	RADAR_TRACE_PACKAGE,
	RADAR_TRACE_CAPTURE_1,
	RADAR_TRACE_CAPTURE_2,
	RADAR_TRACE_CAPTURE_3,
	RADAR_TRACE_CAPTURE_4,
	RADAR_TRACE_CAPTURE_5,
	RADAR_TRACE_CAPTURE_6,
	RADAR_TRACE_CAPTURE_7,
	RADAR_TRACE_CAPTURE_8,
	RADAR_TRACE_CAPTURE_9,
	RADAR_TRACE_CAPTURE_10,
	RADAR_TRACE_QUAD,
	RADAR_TRACE_BUS,
	RADAR_TRACE_DRUGS_PACKAGE,
	RADAR_TRACE_PICKUP_JUMP,
	RADAR_TRACE_ADVERSARY_4,
	RADAR_TRACE_ADVERSARY_8,
	RADAR_TRACE_ADVERSARY_10,
	RADAR_TRACE_ADVERSARY_12,
	RADAR_TRACE_ADVERSARY_16,
	RADAR_TRACE_LAPTOP,
	RADAR_TRACE_PICKUP_DEADLINE,
	RADAR_TRACE_SPORTS_CAR,
	RADAR_TRACE_WAREHOUSE_VEHICLE,
	RADAR_TRACE_REG_PAPERS,
	RADAR_TRACE_POLICE_STATION_DROPOFF,
	RADAR_TRACE_JUNKYARD,
	RADAR_TRACE_EX_VECH_1,
	RADAR_TRACE_EX_VECH_2,
	RADAR_TRACE_EX_VECH_3,
	RADAR_TRACE_EX_VECH_4,
	RADAR_TRACE_EX_VECH_5,
	RADAR_TRACE_EX_VECH_6,
	RADAR_TRACE_EX_VECH_7,
	RADAR_TRACE_TARGET_A,
	RADAR_TRACE_TARGET_B,
	RADAR_TRACE_TARGET_C,
	RADAR_TRACE_TARGET_D,
	RADAR_TRACE_TARGET_E,
	RADAR_TRACE_TARGET_F,
	RADAR_TRACE_TARGET_G,
	RADAR_TRACE_TARGET_H,
	RADAR_TRACE_JUGG,
	RADAR_TRACE_PICKUP_REPAIR,
	RADAR_TRACE_STEERINGWHEEL,
	RADAR_TRACE_TROPHY,
	RADAR_TRACE_PICKUP_ROCKET_BOOST,
	RADAR_TRACE_PICKUP_HOMING_ROCKET,
	RADAR_TRACE_PICKUP_MACHINEGUN,
	RADAR_TRACE_PICKUP_PARACHUTE,
	RADAR_TRACE_PICKUP_TIME_5,
	RADAR_TRACE_PICKUP_TIME_10,
	RADAR_TRACE_PICKUP_TIME_15,
	RADAR_TRACE_PICKUP_TIME_20,
	RADAR_TRACE_PICKUP_TIME_30,
	RADAR_TRACE_SUPPLIES,
	RADAR_TRACE_PROPERTY_BUNKER,
	RADAR_TRACE_GR_WVM_1,
	RADAR_TRACE_GR_WVM_2,
	RADAR_TRACE_GR_WVM_3,
	RADAR_TRACE_GR_WVM_4,
	RADAR_TRACE_GR_WVM_5,
	RADAR_TRACE_GR_WVM_6,
	RADAR_TRACE_GR_COVERT_OPS,
	RADAR_TRACE_ADVERSARY_BUNKER,
	RADAR_TRACE_GR_MOC_UPGRADE,
	RADAR_TRACE_GR_W_UPGRADE,
	RADAR_TRACE_SM_CARGO,
	RADAR_TRACE_SM_HANGAR,
	RADAR_TRACE_TF_CHECKPOINT,
	RADAR_TRACE_RACE_TF,
	RADAR_TRACE_SM_WP1,
	RADAR_TRACE_SM_WP2,
	RADAR_TRACE_SM_WP3,
	RADAR_TRACE_SM_WP4,
	RADAR_TRACE_SM_WP5,
	RADAR_TRACE_SM_WP6,
	RADAR_TRACE_SM_WP7,
	RADAR_TRACE_SM_WP8,
	RADAR_TRACE_SM_WP9,
	RADAR_TRACE_SM_WP10,
	RADAR_TRACE_SM_WP11,
	RADAR_TRACE_SM_WP12,
	RADAR_TRACE_SM_WP13,
	RADAR_TRACE_SM_WP14,
	RADAR_TRACE_NHP_BAG,
	RADAR_TRACE_NHP_CHEST,
	RADAR_TRACE_NHP_ORBIT,
	RADAR_TRACE_NHP_VEH1,
	RADAR_TRACE_NHP_BASE,
	RADAR_TRACE_NHP_OVERLAY,
	RADAR_TRACE_NHP_TURRET,
	RADAR_TRACE_NHP_MG_FIREWALL,
	RADAR_TRACE_NHP_MG_NODE,
	RADAR_TRACE_NHP_WP1,
	RADAR_TRACE_NHP_WP2,
	RADAR_TRACE_NHP_WP3,
	RADAR_TRACE_NHP_WP4,
	RADAR_TRACE_NHP_WP5,
	RADAR_TRACE_NHP_WP6,
	RADAR_TRACE_NHP_WP7,
	RADAR_TRACE_NHP_WP8,
	RADAR_TRACE_NHP_WP9,
	RADAR_TRACE_NHP_CCTV,
	RADAR_TRACE_NHP_STARTERPACK,
	RADAR_TRACE_NHP_TURRET_CONSOLE,
	RADAR_TRACE_NHP_MG_MIR_ROTATE,
	RADAR_TRACE_NHP_MG_MIR_STATIC,
	RADAR_TRACE_NHP_MG_PROXY,
	RADAR_TRACE_ACSR_RACE_TARGET,
	RADAR_TRACE_ACSR_RACE_HOTRING,
	RADAR_TRACE_ACSR_WP1,
	RADAR_TRACE_ACSR_WP2,
	RADAR_TRACE_BAT_CLUB_PROPERTY,
	RADAR_TRACE_BAT_CARGO,
	RADAR_TRACE_BAT_TRUCK,
	RADAR_TRACE_BAT_HACK_JEWEL,
	RADAR_TRACE_BAT_HACK_GOLD,
	RADAR_TRACE_BAT_KEYPAD,
	RADAR_TRACE_BAT_HACK_TARGET,
	RADAR_TRACE_PICKUP_DTB_HEALTH,
	RADAR_TRACE_PICKUP_DTB_BLAST_INCREASE,
	RADAR_TRACE_PICKUP_DTB_BLAST_DECREASE,
	RADAR_TRACE_PICKUP_DTB_BOMB_INCREASE,
	RADAR_TRACE_PICKUP_DTB_BOMB_DECREASE,
	RADAR_TRACE_BAT_RIVAL_CLUB,
	RADAR_TRACE_BAT_DRONE,
	RADAR_TRACE_BAT_CASH_REG,
	RADAR_TRACE_CCTV,
	RADAR_TRACE_BAT_ASSASSINATE,
	RADAR_TRACE_BAT_PBUS,
	RADAR_TRACE_BAT_WP1,
	RADAR_TRACE_BAT_WP2,
	RADAR_TRACE_BAT_WP3,
	RADAR_TRACE_BAT_WP4,
	RADAR_TRACE_BAT_WP5,
	RADAR_TRACE_BAT_WP6,
	RADAR_TRACE_BLIMP_2,
	RADAR_TRACE_OPPRESSOR_2,
	RADAR_TRACE_BAT_WP7,
	RADAR_TRACE_ARENA_SERIES,
	RADAR_TRACE_ARENA_PREMIUM,
	RADAR_TRACE_ARENA_WORKSHOP,
	RADAR_TRACE_RACE_WARS,
	RADAR_TRACE_ARENA_TURRET,
	RADAR_TRACE_ARENA_RC_CAR,
	RADAR_TRACE_ARENA_RC_WORKSHOP,
	RADAR_TRACE_ARENA_TRAP_FIRE,
	RADAR_TRACE_ARENA_TRAP_FLIP,
	RADAR_TRACE_ARENA_TRAP_SEA,
	RADAR_TRACE_ARENA_TRAP_TURN,
	RADAR_TRACE_ARENA_TRAP_PIT,
	RADAR_TRACE_ARENA_TRAP_MINE,
	RADAR_TRACE_ARENA_TRAP_BOMB,
	RADAR_TRACE_ARENA_TRAP_WALL,
	RADAR_TRACE_ARENA_TRAP_BRD,
	RADAR_TRACE_ARENA_TRAP_SBRD,
	RADAR_TRACE_ARENA_BRUISER,
	RADAR_TRACE_ARENA_BRUTUS,
	RADAR_TRACE_ARENA_CERBERUS,
	RADAR_TRACE_ARENA_DEATHBIKE,
	RADAR_TRACE_ARENA_DOMINATOR,
	RADAR_TRACE_ARENA_IMPALER,
	RADAR_TRACE_ARENA_IMPERATOR,
	RADAR_TRACE_ARENA_ISSI,
	RADAR_TRACE_ARENA_SASQUATCH,
	RADAR_TRACE_ARENA_SCARAB,
	RADAR_TRACE_ARENA_SLAMVAN,
	RADAR_TRACE_ARENA_ZR380,
	RADAR_TRACE_AP,
	RADAR_TRACE_COMIC_STORE,
	RADAR_TRACE_COP_CAR,
	RADAR_TRACE_RC_TIME_TRIALS,
	RADAR_TRACE_KING_OF_THE_HILL,
	RADAR_TRACE_KING_OF_THE_HILL_TEAMS,
	RADAR_TRACE_RUCKSACK,
	RADAR_TRACE_SHIPPING_CONTAINER,
	RADAR_TRACE_AGATHA,
	RADAR_TRACE_CASINO,
	RADAR_TRACE_CASINO_TABLE_GAMES,
	RADAR_TRACE_CASINO_WHEEL,
	RADAR_TRACE_CASINO_CONCIERGE,
	RADAR_TRACE_CASINO_CHIPS,
	RADAR_TRACE_CASINO_HORSE_RACING,
	RADAR_TRACE_ADVERSARY_FEATURED,
	RADAR_TRACE_ROULETTE_1,
	RADAR_TRACE_ROULETTE_2,
	RADAR_TRACE_ROULETTE_3,
	RADAR_TRACE_ROULETTE_4,
	RADAR_TRACE_ROULETTE_5,
	RADAR_TRACE_ROULETTE_6,
	RADAR_TRACE_ROULETTE_7,
	RADAR_TRACE_ROULETTE_8,
	RADAR_TRACE_ROULETTE_9,
	RADAR_TRACE_ROULETTE_10,
	RADAR_TRACE_ROULETTE_11,
	RADAR_TRACE_ROULETTE_12,
	RADAR_TRACE_ROULETTE_13,
	RADAR_TRACE_ROULETTE_14,
	RADAR_TRACE_ROULETTE_15,
	RADAR_TRACE_ROULETTE_16,
	RADAR_TRACE_ROULETTE_17,
	RADAR_TRACE_ROULETTE_18,
	RADAR_TRACE_ROULETTE_19,
	RADAR_TRACE_ROULETTE_20,
	RADAR_TRACE_ROULETTE_21,
	RADAR_TRACE_ROULETTE_22,
	RADAR_TRACE_ROULETTE_23,
	RADAR_TRACE_ROULETTE_24,
	RADAR_TRACE_ROULETTE_25,
	RADAR_TRACE_ROULETTE_26,
	RADAR_TRACE_ROULETTE_27,
	RADAR_TRACE_ROULETTE_28,
	RADAR_TRACE_ROULETTE_29,
	RADAR_TRACE_ROULETTE_30,
	RADAR_TRACE_ROULETTE_31,
	RADAR_TRACE_ROULETTE_32,
	RADAR_TRACE_ROULETTE_33,
	RADAR_TRACE_ROULETTE_34,
	RADAR_TRACE_ROULETTE_35,
	RADAR_TRACE_ROULETTE_36,
	RADAR_TRACE_ROULETTE_0,
	RADAR_TRACE_ROULETTE_00,
	RADAR_TRACE_LIMO,
	RADAR_TRACE_WEAPON_ALIEN,
	RADAR_TRACE_RACE_OPEN_WHEEL,
	RADAR_TRACE_RAPPEL,
	RADAR_TRACE_SWAP_CAR,
	RADAR_TRACE_SCUBA_GEAR,
	RADAR_TRACE_CPANEL_1,
	RADAR_TRACE_CPANEL_2,
	RADAR_TRACE_CPANEL_3,
	RADAR_TRACE_CPANEL_4,
	RADAR_TRACE_SNOW_TRUCK,
	RADAR_TRACE_BUGGY_1,
	RADAR_TRACE_BUGGY_2,
	RADAR_TRACE_ZHABA,
	RADAR_TRACE_GERALD,
	RADAR_TRACE_RON,
	RADAR_TRACE_ARCADE,
	RADAR_TRACE_DRONE_CONTROLS,
	RADAR_TRACE_RC_TANK,
	RADAR_TRACE_STAIRS,
	RADAR_TRACE_CAMERA_2,
	RADAR_TRACE_WINKY,
	RADAR_TRACE_MINI_SUB,
	RADAR_TRACE_KART_RETRO,
	RADAR_TRACE_KART_MODERN,
	RADAR_TRACE_MILITARY_QUAD,
	RADAR_TRACE_MILITARY_TRUCK,
	RADAR_TRACE_SHIP_WHEEL,
	RADAR_TRACE_UFO,
	RADAR_TRACE_SEASPARROW2,
	RADAR_TRACE_DINGHY2,
	RADAR_TRACE_PATROL_BOAT,
	RADAR_TRACE_RETRO_SPORTS_CAR,
	RADAR_TRACE_SQUADEE,
	RADAR_TRACE_FOLDING_WING_JET,
	RADAR_TRACE_VALYKRIE2,
	RADAR_TRACE_SUB2,
	RADAR_TRACE_BOLT_CUTTERS,
	RADAR_TRACE_RAPPEL_GEAR,
	RADAR_TRACE_KEYCARD,
	RADAR_TRACE_PASSWORD,
	RADAR_TRACE_ISLAND_HEIST_PREP,
	RADAR_TRACE_ISLAND_PARTY,
	RADAR_TRACE_CONTROL_TOWER,
	RADAR_TRACE_UNDERWATER_GATE,
	RADAR_TRACE_POWER_SWITCH,
	RADAR_TRACE_COMPOUND_GATE,
	RADAR_TRACE_RAPPEL_POINT,
	RADAR_TRACE_KEYPAD,
	RADAR_TRACE_SUB_CONTROLS,
	RADAR_TRACE_SUB_PERISCOPE,
	RADAR_TRACE_SUB_MISSILE,
	RADAR_TRACE_PAINTING,
	RADAR_TRACE_CAR_MEET,
	RADAR_TRACE_CAR_TEST_AREA,
	RADAR_TRACE_AUTO_SHOP_PROPERTY,
	RADAR_TRACE_DOCKS_EXPORT,
	RADAR_TRACE_PRIZE_CAR,
	RADAR_TRACE_TEST_CAR,
	RADAR_TRACE_CAR_ROBBERY_BOARD,
	RADAR_TRACE_CAR_ROBBERY_PREP,
	RADAR_TRACE_STREET_RACE_SERIES,
	RADAR_TRACE_PURSUIT_SERIES,
	RADAR_TRACE_CAR_MEET_ORGANISER,
	RADAR_TRACE_SECUROSERV,
	RADAR_TRACE_BOUNTY_COLLECTIBLES,
	RADAR_TRACE_MOVIE_COLLECTIBLES,
	RADAR_TRACE_TRAILER_RAMP,
	RADAR_TRACE_RACE_ORGANISER,
	RADAR_TRACE_CHALKBOARD_LIST,
	RADAR_TRACE_EXPORT_VEHICLE,
	RADAR_TRACE_TRAIN,
	RADAR_TRACE_HEIST_DIAMOND,
	RADAR_TRACE_HEIST_DOOMSDAY,
	RADAR_TRACE_HEIST_ISLAND,
	RADAR_TRACE_SLAMVAN2,
	RADAR_TRACE_CRUSADER,
	RADAR_TRACE_CONSTRUCTION_OUTFIT,
	RADAR_TRACE_OVERLAY_JAMMED,
	RADAR_TRACE_HEIST_ISLAND_UNAVAILABLE, 
	RADAR_TRACE_HEIST_DIAMOND_UNAVAILABLE, 
	RADAR_TRACE_HEIST_DOOMSDAY_UNAVAILABLE,
	RADAR_TRACE_HSW_RACE_SERIES,
	RADAR_TRACE_HSW_TIME_TRIAL,
	RADAR_TRACE_HSW_TEST_VEHICLE,
	RADAR_TRACE_FEATURED_SERIES,
	RADAR_TRACE_VEHICLE_FOR_SALE,
	RADAR_TRACE_VAN_KEYS,
	RADAR_TRACE_SUV_SERVICE,
	RADAR_TRACE_SECURITY_CONTRACT,
	RADAR_TRACE_SAFE,
	RADAR_TRACE_PED_R,
	RADAR_TRACE_PED_E,
	RADAR_TRACE_PAYPHONE,
	RADAR_TRACE_PATRIOT3,
	RADAR_TRACE_MUSIC_STUDIO,
	RADAR_TRACE_JUBILEE,
	RADAR_TRACE_GRANGER2,
	RADAR_TRACE_EXPLOSIVE_CHARGE,
	RADAR_TRACE_DEITY,
	RADAR_TRACE_D_CHAMPION,
	RADAR_TRACE_BUFFALO_4,
	RADAR_TRACE_AGENCY,
	RADAR_TRACE_BIKER_BAR,
	RADAR_TRACE_SIMEON_OVERLAY,
	RADAR_TRACE_JUNK_SKYDIVE,
	RADAR_TRACE_LUXURY_CAR_SHOWROOM,
	RADAR_TRACE_CAR_SHOWROOM,
	RADAR_TRACE_CAR_SHOWROOM_SIMEON,
	RADAR_TRACE_FLAMING_SKULL,
	RADAR_TRACE_WEAPON_AMMO,
	RADAR_TRACE_COMMUNITY_SERIES,
	RADAR_TRACE_CAYO_SERIES,
	RADAR_TRACE_CLUBHOUSE_CONTRACT,
	RADAR_TRACE_AGENT_ULP,
	RADAR_TRACE_ACID,
	RADAR_TRACE_ACID_LAB,
	RADAR_TRACE_DAX_OVERLAY,
	RADAR_TRACE_DEAD_DROP_PACKAGE,
	RADAR_TRACE_DOWNTOWN_CAB,
	RADAR_TRACE_GUN_VAN,
	RADAR_TRACE_STASH_HOUSE,
	RADAR_TRACE_TRACTOR,
	RADAR_TRACE_WAREHOUSE_JUGGALO,
	RADAR_TRACE_WAREHOUSE_JUGGALO_DAX,
	MAX_RADAR_TRACES
ENDENUM

ENUM eICON_TYPE
	ICON_TYPE_INVALID = -1,
	ICON_TYPE_HAIRCUT = 0,
	ICON_TYPE_TATTO,
	ICON_TYPE_WEAPON,
	ICON_TYPE_WEAPON_PLUS,
	ICON_TYPE_ARMOUR,
	ICON_TYPE_VEHICLE,
	ICON_TYPE_MASK,
	ICON_TYPE_CLOTHES,
	ICON_TYPE_KIT,
	ICON_TYPE_MAKEUP,
 	ICON_TYPE_BAG,
 	ICON_TYPE_BUSSINES_PROPERTY,
 	ICON_TYPE_USFLAG,
 	ICON_TYPE_USPROPERTY,
 	ICON_TYPE_ANCHOR,
 	ICON_TYPE_PLANE,
 	ICON_TYPE_HELI,
 	ICON_TYPE_BIKE, 
	ICON_TYPE_DISCOUNT,
	ICON_TYPE_MYSTERY,
	ICON_TYPE_ARCADE
ENDENUM

ENUM eHUD_RETICLE_MODE
	HUD_RETICLE_DEFAULT = 0,
	HUD_RETICLE_CAN_BE_STUNNED,
	
	MAX_HUD_RETICLE_MODES
ENDENUM

ENUM eHELP_TEXT_FLOATING_ID
	FLOATING_HELP_TEXT_ID_1 = 0,
	FLOATING_HELP_TEXT_ID_2,
//	FLOATING_HELP_TEXT_ID_3 has been removed
	
	MAX_FLOATING_HELP_TEXT_IDS
ENDENUM


ENUM eWIDESCREEN_FORMAT
    WIDESCREEN_FORMAT_STRETCH = 0,      // stretch from 4:3 to 16:9
    WIDESCREEN_FORMAT_CENTRE,       // keep 4:3 perspective centred in 16:9
    WIDESCREEN_FORMAT_LEFT,         // keep 4:3 perspective but align to the left in 16:9
    WIDESCREEN_FORMAT_RIGHT,        // keep 4:3 perspective but align to the right in 16:9

    WIDESCREEN_FORMAT_AUTO          // 4:3 & automatically decide where based on original screen position - left if pos = < 0.5, right if pos = > 0.5 and centre if pos = 0.5
ENDENUM


ENUM eMOUSE_POINTER_STYLE
	MOUSE_CURSOR_STYLE_ARROW = 1,
	MOUSE_CURSOR_STYLE_ARROW_DIMMED,
	MOUSE_CURSOR_STYLE_HAND_OPEN,
	MOUSE_CURSOR_STYLE_HAND_GRAB,
	MOUSE_CURSOR_STYLE_HAND_MIDDLE_FINGER,
	MOUSE_CURSOR_STYLE_ARROW_LEFT,
	MOUSE_CURSOR_STYLE_ARROW_RIGHT,
	MOUSE_CURSOR_STYLE_ARROW_UP,
	MOUSE_CURSOR_STYLE_ARROW_DOWN,
	MOUSE_CURSOR_STYLE_ARROW_TRIMMING,
	MOUSE_CURSOR_STYLE_ARROW_PLUS,
	MOUSE_CURSOR_STYLE_ARROW_MINUS
ENDENUM

ENUM eMOUSE_EVT // must match Code and AS enum
	EVENT_TYPE_MOUSE_NONE = -1,

	EVENT_TYPE_MOUSE_DRAG_OUT = 0,
	EVENT_TYPE_MOUSE_DRAG_OVER,
	EVENT_TYPE_MOUSE_DOWN,
	EVENT_TYPE_MOUSE_MOVE,
	EVENT_TYPE_MOUSE_UP,
	EVENT_TYPE_MOUSE_PRESS,
	EVENT_TYPE_MOUSE_RELEASE,
	EVENT_TYPE_MOUSE_RELEASE_OUTSIDE,
	EVENT_TYPE_MOUSE_ROLL_OUT,
	EVENT_TYPE_MOUSE_ROLL_OVER,
	EVENT_TYPE_MOUSE_MAX
ENDENUM

ENUM eMINIMAP_GOLF_COURSE_HOLE
	MINIMAP_GOLF_COURSE_HOLE_1 = 1,
	MINIMAP_GOLF_COURSE_HOLE_2,
	MINIMAP_GOLF_COURSE_HOLE_3,
	MINIMAP_GOLF_COURSE_HOLE_4,
	MINIMAP_GOLF_COURSE_HOLE_5,
	MINIMAP_GOLF_COURSE_HOLE_6,
	MINIMAP_GOLF_COURSE_HOLE_7,
	MINIMAP_GOLF_COURSE_HOLE_8,
	MINIMAP_GOLF_COURSE_HOLE_9,
	MINIMAP_GOLF_COURSE_HOLE_ALL
ENDENUM

//
// eMINIMAP_COMPONENT - list of all minimap components - if this changes, you must sync up the enum in code (see DerekP)
//
ENUM eMINIMAP_COMPONENT
	MINIMAP_COMPONENT_RUNWAY_1 = 0,		//city airport
	MINIMAP_COMPONENT_RUNWAY_2,       //countryside
	MINIMAP_COMPONENT_RUNWAY_3,       //countryside small
	MINIMAP_COMPONENT_RUNWAY_4,       //military
	MINIMAP_COMPONENT_PRISON_GROUNDS, //prison interior	
	MINIMAP_COMPONENT_DEBUG_MAP_AREAS, //debug coloured map areas
	MINIMAP_COMPONENT_KING_HILL_1,
	MINIMAP_COMPONENT_KING_HILL_2,
	MINIMAP_COMPONENT_KING_HILL_3,
	MINIMAP_COMPONENT_KING_HILL_4,
	MINIMAP_COMPONENT_KING_HILL_5,
	MINIMAP_COMPONENT_KING_HILL_6,
	MINIMAP_COMPONENT_KING_HILL_7,
	MINIMAP_COMPONENT_KING_HILL_8,
	MINIMAP_COMPONENT_KING_HILL_9,
	MINIMAP_COMPONENT_KING_HILL_10,
	MINIMAP_COMPONENT_KING_HILL_11,
	MINIMAP_COMPONENT_KING_HILL_12,
	MINIMAP_COMPONENT_KING_HILL_13
ENDENUM

ENUM eARROW_DIRECTION
	HELP_TEXT_NORTH = 1,
	HELP_TEXT_EAST,
	HELP_TEXT_SOUTH,
	HELP_TEXT_WEST
ENDENUM

//////////////////////////////////////////////////////////
// Needs to match the eMP_TAG enum in code
//////////////////////////////////////////////////////////
ENUM eMP_TAG
	MP_TAG_GAMER_NAME = 0,
	MP_TAG_CREW_TAG,
	MP_TAG_HEALTH_BAR,
	MP_TAG_BIG_TEXT,
	MP_TAG_AUDIO,
	MP_TAG_USING_MENU,
	MP_TAG_PASSIVE_MODE,
	MP_TAG_WANTED_LEVEL,
	MP_TAG_DRIVER,
	MP_TAG_CO_DRIVER,
	MP_TAG_TAGGED,
	MP_TAG_GAMER_NAME_NEARBY,
	MP_TAG_ARROW,
	MP_TAG_PACKAGES,
	MP_TAG_IF_PED_FOLLOWING,
	MP_TAG_RANK,
	MP_TAG_TYPING,
	MP_TAG_PACKAGE_LARGE,
	MP_TAG_TRACKIFY,
	MP_TAG_GANG_CEO,
	MP_TAG_GANG_BIKER,
	MP_TAG_BIKER_ARROW,
	MP_TAG_MC_ROLE_PRESIDENT,
	MP_TAG_MC_ROLE_VICE_PRESIDENT,
	MP_TAG_MC_ROLE_ROAD_CAPTAIN,
	MP_TAG_MC_ROLE_SARGEANT,
	MP_TAG_MC_ROLE_ENFORCER,
	MP_TAG_MC_ROLE_PROSPECT,
	MP_TAG_TRANSMITTER,
	MP_TAG_BOMB
	//MP_TAG_ARREST
	//,	MP_TAG_CNC_DOT,
	//  MP_TAG_CNC_VAN,
	//MP_TAG_CNC_THREAT because of ARCHIVED_SUMMER_CONTENT_ENABLED
	
	// All values below are depricated, and references to them have been commented out.
//	MP_TAG_DOWNLOAD_DATA,
//	MP_TAG_INV_VEHICLE,
//	MP_TAG_SMOKES,
//	MP_TAG_HOLDUP_CASH,
//	MP_TAG_PARTNER_ICON,
//	MP_TAG_KEYS,
//	MP_TAG_CUFFS,
//	MP_TAG_KEY_CARD,
//	MP_TAG_COKE_DRUGS,
//	MP_TAG_METH_DRUGS,
//	MP_TAG_WEED,
//	MP_TAG_HEROIN,
//	MP_TAG_CASH_FROM_SAFE,
//	MP_TAG_CASH_FROM_BANK,
//	MP_TAG_REMOTE_CONTROL,
//	MP_TAG_WEAPONS_PACKAGE,
//	MP_TAG_RANDOM_OBJECT,
//	MP_TAG_CUFF_KEYS,
//	MP_TAG_ROLE,
//	MP_TAG_CUSTODY,
//	MP_TAG_NO_VOTE,
//	MP_TAG_VOTED

ENDENUM
//////////////////////////////////////////////////////////
// Needs to match the eMP_TAG enum in code
//////////////////////////////////////////////////////////


ENUM eMP_TAG_ROLE
	MP_TAG_ROLE_DRIVER = 1,
	MP_TAG_ROLE_HACKER,
	MP_TAG_ROLE_HIRED_GUN,
	MP_TAG_ROLE_LEADER,
	MP_TAG_ROLE_PARACHUTIST,
	MP_TAG_ROLE_SNIPER
ENDENUM

ENUM BLIP_CATEGORY   // NOTE THAT THIS ENUM MUST NEVER START AT ANYTHING OTHER THAN '2' IN ORDER TO WORK WITH CODE!
					 // ANY CHANGES IN THIS PLEASE SPEAK TO DEREKP
	BLIP_CATEGORY_JOBS = 3,		// jobs 
	BLIP_CATEGORY_MY_JOBS,		// my jobs 
	BLIP_CATEGORY_MISSION,		// mission blips
	BLIP_CATEGORY_ACTIVITY,		// activity blips
	BLIP_CATEGORY_PLAYER,		// other players  // if this changes from '7' please notify code
	BLIP_CATEGORY_SHOP,			// shops
	BLIP_CATEGORY_RACE,			// races
	BLIP_CATEGORY_PROPERTY,		// properties
	BLIP_CATEGORY_APARTMENT,	// owned apartments
	BLIP_CATEGORY_OTHER		// anything else
ENDENUM
    
ENUM BLIP_DISPLAY
    DISPLAY_NOTHING,
    DISPLAY_MARKER,
    DISPLAY_BLIP,
    DISPLAY_MAP,  // used to only display this blip on the frontend map (it wont display on the radar or have a marker) 
    DISPLAY_BOTH,
    DISPLAY_RADAR_ONLY, // only display blip on the radar (opposite of DISPLAY_MAP) - NOTE: no markers will get rendered
    DISPLAY_MAP_ZOOMED,  // display this blip on radar and only on map when map is zoomed fully in
    DISPLAY_BIGMAP_FULL_ONLY,  // display on zoomed out version of the bigmap only
    DISPLAY_MINIMAP_OR_BIGMAP  // display on normal minimap or bigmap (but not on the full zoomed map)
ENDENUM

ENUM BLIP_PRIORITY
	BLIPPRIORITY_LOWEST = 1,
	BLIPPRIORITY_LOW_LOWEST,
    BLIPPRIORITY_LOW,
    BLIPPRIORITY_LOW_MED,
    BLIPPRIORITY_MED,
    BLIPPRIORITY_MED_HIGH,
    BLIPPRIORITY_HIGH,
    BLIPPRIORITY_HIGH_HIGHEST,
    BLIPPRIORITY_HIGHEST,
	BLIP_PRIORITY_HIGHEST_SPECIAL_LOW,  // need additional added in for 1730606
	BLIP_PRIORITY_HIGHES_SPECIAL_MED,  // need additional priority added in for 1730606
	BLIP_PRIORITY_HIGHEST_SPECIAL_HIGH,  // need additional priority added in for 1730606
    BLIPPRIORITY_OVER_CENTRE_BLIP
ENDENUM

ENUM eRADAR_BLIP_TYPE
    BLIPTYPE_UNUSED = 0,
    BLIPTYPE_VEHICLE,
    BLIPTYPE_CHAR,
    BLIPTYPE_OBJECT,
    BLIPTYPE_COORDS,
    BLIPTYPE_CONTACT,
    BLIPTYPE_PICKUP,
    BLIPTYPE_RADIUS,
    BLIPTYPE_WEAPON_PICKUP,
    BLIPTYPE_COP,
    BLIPTYPE_STEALTH,
    BLIPTYPE_AREA
ENDENUM

ENUM TEXT_FONTS
    FONT_STANDARD = 0,
    FONT_CURSIVE,
    FONT_ROCKSTAR_TAG,
    FONT_LEADERBOARD,
    FONT_CONDENSED,
    FONT_STYLE_FIXED_WIDTH_NUMBERS,
    FONT_CONDENSED_NOT_GAMERNAME,
	FONT_STYLE_PRICEDOWN,
	FONT_STYLE_TAXI
ENDENUM


ENUM COUNTER_DISPLAY_METHOD
    COUNTER_DISPLAY_NUMBER = 0,
    COUNTER_DISPLAY_BAR
ENDENUM

ENUM FONT_ORIENTATION
    FO_CENTRE = 0,
    FO_LEFT,
    FO_RIGHT
ENDENUM

ENUM HELP_MESSAGE_STYLE
    HELP_MESSAGE_STYLE_NORMAL = 0,
    HELP_MESSAGE_STYLE_TAGGABLE,
    HELP_MESSAGE_STYLE_AMMUNATION,
	HELP_MESSAGE_STYLE_MP_FREEMODE
ENDENUM

ENUM TEXT_BLOCK_SLOTS
    MISSION_TEXT_SLOT,
    PHONE_TEXT_SLOT,
    ODDJOB_TEXT_SLOT,
    MINIGAME_TEXT_SLOT,
    SHOP_TEXT_SLOT,
    OBJECT_TEXT_SLOT,
    MISSION_DIALOGUE_TEXT_SLOT,
    AMBIENT_DIALOGUE_TEXT_SLOT,
    MP_STATS_TEXT_SLOT,
	MENU_TEXT_SLOT,
	PROPERTY_TEXT_SLOT,
	DLC_TEXT_SLOT0,
	DLC_TEXT_SLOT1,
	DLC_TEXT_SLOT2,
	
#IF USE_TU_CHANGES
	DLC_MISSION_DIALOGUE_TEXT_SLOT,
	DLC_AMBIENT_DIALOGUE_TEXT_SLOT,
#ENDIF

	RADIO_WHEEL_TEXT_SLOT_RESERVED_FOR_CODE_USE,
	BINK_MOVIE_TEXT_SLOT,	
	BINK_MOVIE_TEXT_SLOT1,
	BINK_MOVIE_TEXT_SLOT2,
	DLC_MISSION_DIALOGUE_TEXT_SLOT2,
	CREDITS_TEXT_SLOT,

    NUM_ADDITIONAL_TEXT_SLOTS
ENDENUM


ENUM ZONE_MARK_TYPE
    ZM_CIRCLE,
    ZM_RECTANGLE
ENDENUM

ENUM eWIDGET_NAME
    FE_TOP_LINE_POS = 0,
    FE_TOP_TEXT_POS,
    FE_TOP_TEXT_SIZE,
    FE_TOP_TEXT_SPACE,
    FE_LOGO_POS,
    FE_LOGO_SIZE,
    FE_SAVELIST_COLUMN_SIZE_SAVEGAME,
    FE_MID_TEXT_POS,
    FE_MID_TEXT_SIZE,
    FE_2ND_MENU_MID_TEXT_SIZE,
    FE_MID_COLUMN_SIZE,
    FE_MID_TEXT_SPACING,
    FE_BACKGROUND_OPACITY,
    FE_BACKGROUND_POS,
    FE_BACKGROUND_SIZE,
    FE_SLIDER_BAR_OFFSET,
    FE_SLIDER_BAR_SIZE,
    FE_HELP_TEXT_POS,
    FE_HELP_TEXT_SIZE,
    FE_HELP_TEXT_SPACING,
    FE_HELP_BUTTON_SIZE,
    FE_HELP_BUTTON_SPACING,
    FE_BOT_LINE_POS,
    FE_CLOCK_POS,
    FE_CLOCK_SIZE,
    FE_CLOCK_ICON_POS,
    FE_CLOCK_ICON_SIZE,
    FE_ARROW_POS,
    FE_ARROW_SIZE,
    FE_MAIN_FADE_TIME,
    FE_BRIEF_TEXT_SIZE,
    FE_BRIEF_TEXT_POS,
    FE_BRIEF_TEXT_SPACING,
    FE_BRIEF_SCROLL_SPEED,
    FE_BRIEF_NAME_OFFSET,
    FE_BRIEF_TITLE_POS,
    FE_BRIEF_TITLE_SIZE,

    FE_STATS_MENU_LB_TEXT_POS,
    FE_STATS_MENU_LB_TEXT_SIZE,
    FE_STATS_MENU_LB_TEXT_COLUMNSIZE,
    FE_STATS_MENU_LB_TEXT_SPACING,
    FE_STATS_WARNING_TEXT_POS,
    FE_STATS_WARNING_TEXT_SIZE,
    FE_STATS_WARNING_TEXT_LINE_MULTIPLIER,
    FE_STATS_TEXT_SIZE,
    FE_STATS_TEXT_POS,
    FE_STATS_LINE_HEIGHT,
    FE_STATS_SCROLL_VELOCITY,
    FE_STATS_GAP,
    FE_STATS_NUMBER_PER_COLUMN,
    FE_STATS_RATE_OF_AUTOSCROLL,
    FE_STATS_FADEIN_TIME,
    FE_STATS_BOX_SIZE,
    FE_STATS_BOX_GAP_TO_TEXT,
    FE_STATS_BOX_ALPHA,
    FE_STATS_ALPHA,
    FE_STATS_TEXT_WARPS,

    FE_CONTROLLER_GRAPHIC_POS,
    FE_CONTROLLER_GRAPHIC_SIZE,
    FE_CONTROLLER_LEFT_TEXT_POS,
    FE_CONTROLLER_RIGHT_TEXT_POS,
    FE_CONTROLLER_TEXT_SIZE,
    FE_CONTROLLER_TEXT_SPACING,

    FE_MAP_BORDER_INIT,
    FE_MAP_BORDER_LENGTH,
    FE_MAP_SCROLL_ZOOM,
    FE_MAP_SCROLL_WN_LIMIT,
    FE_MAP_SCROLL_ES_LIMIT,

    FE_AREA_NAME_POS,
    FE_AREA_NAME_SIZE,

    FE_BLIP_NAME_POS,
    FE_BLIP_NAME_SIZE,

    FE_LEGEND_POS,
    FE_LEGEND_TEXT_SIZE,
    FE_LEGEND_BLIP_SIZE,
    FE_LEGEND_SPACING,
    FE_MAP_CURSOR_FADE,
    FE_MAP_BLIP_HOVER_ALPHA,

    FE_NETSTATS_HEADER_FONT_SIZE,
    FE_NETSTATS_HEADER_ICON_SIZE,
    FE_NETSTATS_ITEM_FONT_SIZE,
    FE_NETSTATS_ITEM_VALUE_FONT_SIZE,
    FE_NETSTATS_ITEM_GAMERSTARS_ICON_SIZE,
    FE_NETSTATS_ITEM_GAMERSTARS_GAP_SIZE,
    FE_NETSTATS_MENU_NUM_ITEMS_PER_SCREEN,
    FE_NETSTATS_MENU_NUM_COLUMNS_PER_SCREEN,
    FE_NETSTATS_MENU_POSITION,
    FE_NETSTATS_ARROW_ALPHA,
    FE_NETSTATS_MENU_FIRST_COLUMN_SIZE,
    FE_NETSTATS_MENU_FIRST_ROW_SIZE,
    FE_NETSTATS_MENU_COLUMN_SIZE,
    FE_NETSTATS_MENU_ROW_SIZE,
    FE_NETSTATS_MENU_BORDER_GAP_TO_TEXT,
    FE_NETSTATS_MENU_SPRITE_GAP_TO_TEXT,
    FE_NETSTATS_MENU_BORDER_GAP_TO_SPRITE,
    FE_NETSTATS_MENU_BORDER_ALPHA,
    FE_NETSTATS_CLOCK_ICON_SIZE,
    FE_NETSTATS_CLOCK_ARM_ICON_SIZE,
    FE_NETSTATS_CLOCK_TEXT_POS,
    FE_NETSTATS_ARROW_POS,
    FE_NETSTATS_ARROW_SIZE,

    FE_SAVELIST_TEXT_POS,
    FE_SAVELIST_TEXT_SIZE,
    FE_SAVELIST_TEXT_GAP,
    FE_SAVELIST_COLUMN_SIZE,
    FE_SAVELIST_DATE_COLUMN_SIZE,

    FE_WARNING_MESSAGE_TEXT_POS,
    FE_WARNING_MESSAGE_TEXT_SIZE,

    FE_MID_FADE_POS,
    FE_MID_FADE_SIZE,

    FE_DIS_WINDOW_POS_TL,
    FE_DIS_WINDOW_POS_BR,

    FE_TOP_LOBBY_TEXT_POS,
    FE_TOP_LOBBY_TEXT_SIZE,

    FE_TOP_STATS_TEXT_POS,
    FE_TOP_STATS_TEXT_SIZE,

    FE_CONTROLLER_TYPE_POS,
    FE_CONTROLLER_TYPE_SIZE,

    FE_TOP_FADE_POS,
    FE_TOP_FADE_SIZE,

    FE_TOP_TEXT_POS_NON_WS,
    FE_TOP_TEXT_SIZE_NON_WS,

    FE_PLSET_TEXT_POS,
    FE_PLSET_TEXT_SIZE,
    FE_PLSET_RIGHT_SIDE_MASK,

    FE_MAP_CURSOR_SIZE,

    FE_NETSTATS_LINE_THICK,
    FE_NETSTATS_ICON_ALPHA,
    FE_NETSTATS_ICON_COLOUR,
    FE_NETSTATS_BOX_SIZE,
    FE_NETSTATS_BOX_ALPHA,
    FE_NETSTATS_MENU_TEXT_ALPHA,
    FE_NETSTATS_GAMERSTARS_ALPHA,
    FE_NETSTATS_RIGHT_POS,
    FE_NETSTATS_WRAP_POS,
    FE_NETSTATS_LINE_SIZE,

    FE_TOP_TEXT_SCALER_FRENCH,
    FE_TOP_TEXT_SCALER_GERMAN,
    FE_TOP_TEXT_SCALER_ITALIAN,
    FE_TOP_TEXT_SCALER_SPANISH,

    FE_TOP_TEXT_OFFSET_FRENCH,
    FE_TOP_TEXT_OFFSET_GERMAN,
    FE_TOP_TEXT_OFFSET_ITALIAN,
    FE_TOP_TEXT_OFFSET_SPANISH,

    FE_NETSTATS_CRT_FIRST_COLUMN_SIZE,
    FE_NETSTATS_CRT_COLUMN_SIZE,

    FE_PLSET_RANK_ICON_SIZE,
    FE_PLSET_RANK_ICON_ALPHA,
    FE_PLSET_RANK_ICON_GAP_AND_Y_MODIFIER,
    FE_PLSET_MESSAGE_POS,
    FE_PLSET_MESSAGE_SIZE,
    FE_NETSTATS_LEG_POS,
    FE_NETSTATS_LEG_MIDDLE_GAP,
    FE_NETSTATS_LEG_ICON_GAP_TEXT,
    FE_NETSTATS_LEG_GAP_TO_BOX,
    FE_NETSTATS_LEG_SPRITE_SIZE,
    FE_CALIBRATION_BOX_SIZE,
    FE_CALIBRATION_BOX_ADJUST_BRIGHTNESS,
    FE_CALIBRATION_BOX_ADJUST_CONTRAST,
    FE_MID_TEXT_SIZE_CONTROL_SCREEN,
    FE_CALIBRATION_TEXT_POS,
    FE_CALIBRATION_BOX_POS_BRIGHTNESS,
    FE_CALIBRATION_BOX_POS_CONTRAST,
    FE_DIS_WINDOW_POS_BR_WITH_CALIB,
    FE_MAP_CURSOR_THICKNESS,
    FE_STATS_TEXT_LINE_MULTIPLIER,

    MAX_FRONTEND_WIDGETS
ENDENUM


ENUM SCRIPT_PRINT_EXTRA_PARAMS
    SCRIPT_PRINT_NO_EXTRA_PARAMS = 0,
    SCRIPT_PRINT_ONE_SUBSTRING = 1
// #IF __ALLOW_LITERAL_STRINGS
//     SCRIPT_PRINT_ONE_LITERAL_STRING = 2,
//     SCRIPT_PRINT_TWO_LITERAL_STRINGS = 3,
// #ENDIF	//	__ALLOW_LITERAL_STRINGS
//     SCRIPT_PRINT_ONE_NUMBER = 4,
//     SCRIPT_PRINT_TWO_NUMBERS = 5,
//     SCRIPT_PRINT_THREE_NUMBERS = 6,
//     SCRIPT_PRINT_FOUR_NUMBERS = 7,
//     SCRIPT_PRINT_FIVE_NUMBERS = 8,
//     SCRIPT_PRINT_SIX_NUMBERS = 9
ENDENUM


///////////////////////////////////////////////////////////////////////////////////////////////////////////
// GPS_FLAGS
// Parameters which can be set to control the way GPS routes are calculateed for blips & multi-gps routes

ENUM GPS_FLAGS
	GPS_FLAG_NONE						= 0,
	GPS_FLAG_IGNORE_ONE_WAY				= 1,
	GPS_FLAG_FOLLOW_RULES				= 2,
	GPS_FLAG_AVOID_HIGHWAY				= 4,
	GPS_FLAG_NO_ROUTE_SHIFT				= 8,
	GPS_FLAG_CUSTOM_PROXIMITY			= 16,
	GPS_FLAG_NO_PULL_PATH_TO_RIGHT_LANE = 32,
	GPS_FLAG_AVOID_OFF_ROAD				= 64,
	GPS_FLAG_IGNORE_DESTINATION_Z 		= 128
ENDENUM



// Maps to what Actionscript has
CONST_INT BUSYSPINNER_LOADING	5
CONST_INT BUSYSPINNER_SAVING	1
CONST_INT BUSYSPINNER_CLOUD		4


// DP: these INT values relate to the eBLIP_COLOURS in minimap.h
CONST_INT BLIP_COLOUR_DEFAULT 	0
CONST_INT BLIP_COLOUR_RED   1
CONST_INT BLIP_COLOUR_GREEN 2
CONST_INT BLIP_COLOUR_BLUE  3
CONST_INT BLIP_COLOUR_WHITE 4
CONST_INT BLIP_COLOUR_YELLOW    5

CONST_INT BLIPCOLOUR_NET_PLAYER1    6
CONST_INT BLIPCOLOUR_NET_PLAYER2    7
CONST_INT BLIPCOLOUR_NET_PLAYER3    8
CONST_INT BLIPCOLOUR_NET_PLAYER4    9
CONST_INT BLIPCOLOUR_NET_PLAYER5    10
CONST_INT BLIPCOLOUR_NET_PLAYER6    11
CONST_INT BLIPCOLOUR_NET_PLAYER7    12
CONST_INT BLIPCOLOUR_NET_PLAYER8    13
CONST_INT BLIPCOLOUR_NET_PLAYER9    14
CONST_INT BLIPCOLOUR_NET_PLAYER10   15
CONST_INT BLIPCOLOUR_NET_PLAYER11   16
CONST_INT BLIPCOLOUR_NET_PLAYER12   17
CONST_INT BLIPCOLOUR_NET_PLAYER13   18
CONST_INT BLIPCOLOUR_NET_PLAYER14   19
CONST_INT BLIPCOLOUR_NET_PLAYER15   20
CONST_INT BLIPCOLOUR_NET_PLAYER16   21
CONST_INT BLIPCOLOUR_NET_PLAYER17   22
CONST_INT BLIPCOLOUR_NET_PLAYER18   23
CONST_INT BLIPCOLOUR_NET_PLAYER19   24
CONST_INT BLIPCOLOUR_NET_PLAYER20   25
CONST_INT BLIPCOLOUR_NET_PLAYER21   26
CONST_INT BLIPCOLOUR_NET_PLAYER22   27
CONST_INT BLIPCOLOUR_NET_PLAYER23   28
CONST_INT BLIPCOLOUR_NET_PLAYER24   29
CONST_INT BLIPCOLOUR_NET_PLAYER25   30
CONST_INT BLIPCOLOUR_NET_PLAYER26   31
CONST_INT BLIPCOLOUR_NET_PLAYER27   32
CONST_INT BLIPCOLOUR_NET_PLAYER28   33
CONST_INT BLIPCOLOUR_NET_PLAYER29   34
CONST_INT BLIPCOLOUR_NET_PLAYER30   35
CONST_INT BLIPCOLOUR_NET_PLAYER31   36
CONST_INT BLIPCOLOUR_NET_PLAYER32   37

CONST_INT BLIP_COLOUR_FREEMODE   38
CONST_INT BLIP_COLOUR_INACTIVE_MISSION   39
CONST_INT BLIP_COLOUR_STEALTH_GREY   40
CONST_INT BLIP_COLOUR_WANTED   41

CONST_INT BLIP_COLOUR_MICHAEL   42
CONST_INT BLIP_COLOUR_FRANKLIN   43
CONST_INT BLIP_COLOUR_TREVOR   44

CONST_INT BLIP_COLOUR_GOLF_P1	45
CONST_INT BLIP_COLOUR_GOLF_P2	46
CONST_INT BLIP_COLOUR_GOLF_P3	47
CONST_INT BLIP_COLOUR_GOLF_P4	48

CONST_INT BLIP_COLOUR_FRIENDLY	49
CONST_INT BLIP_COLOUR_PURPLE    50
CONST_INT BLIP_COLOUR_ORANGE    51
CONST_INT BLIP_COLOUR_GREENDARK    52
CONST_INT BLIP_COLOUR_BLUELIGHT 53
CONST_INT BLIP_COLOUR_BLUEDARK 54
CONST_INT BLIP_COLOUR_GREY 55
CONST_INT BLIP_COLOUR_YELLOWDARK 56
CONST_INT BLIP_COLOUR_HUDCOLOUR_BLUE 57
CONST_INT BLIP_COLOUR_PURPLEDARK 58
CONST_INT BLIP_COLOUR_HUDCOLOUR_RED 59
CONST_INT BLIP_COLOUR_HUDCOLOUR_YELLOW 60
CONST_INT BLIP_COLOUR_PINK	61
CONST_INT BLIP_COLOUR_HUDCOLOUR_GREYLIGHT	62

CONST_INT BLIP_COLOUR_GANG1 63
CONST_INT BLIP_COLOUR_GANG2 64
CONST_INT BLIP_COLOUR_GANG3 65

CONST_INT BLIP_COLOUR_SPECIAL_BLACK 	(50 * 16777216) + (50 * 65536) + (50 * 256) + (255)


CONST_INT __USE_NEW_PRINT_COMMANDS	1


ENUM eHelpMessageId
	HELP_TEXT_SLOT_STANDARD = 0,
	HELP_TEXT_SLOT_FLOATING_1,
	HELP_TEXT_SLOT_FLOATING_2,
	HELP_TEXT_SLOT_FLOATING_3,
	MAX_HELP_TEXT_SLOTS
ENDENUM

//Must be kept in line with eWaypointClearOnArrivalMode
ENUM eWaypointClearOnArrivalMode
	WAYPOINT_CLEAR_ON_ARRIVAL_ENABLED,
	WAYPOINT_CLEAR_ON_ARRIVAL_DISABLED_FOR_OBJECTS,
	WAYPOINT_CLEAR_ON_ARRIVAL_DISABLED
ENDENUM
/////////////////////////////////////////////////////////////////////////////


// see: http://rsgediwiki1/wiki/index.php/HUD_Game_Stream
// for more details.

ENUM ABILITY_ICON
	ABILITY_INVALID = -1,
	ABILITY_CALL_FOR_BACKUP = 0,
	ABILITY_CALL_A_CAR,
	ABILITY_STAMINA,
	ABILITY_SWIM_SPEED,
	ABILITY_RUN_FASTER,
	ABILITY_UNBURSTABLE_TYRES,
	ABILITY_JACK_FASTER,
	ABILITY_HOLD_DRUGS_PURSE,
	ABILITY_KIT_AMMO,
	ABILITY_KIT_SMOKE_GRENADE,
	ABILITY_KIT_PARACHUTE,
	ABILITY_KIT_GREEN_SMOKE,
	ABILITY_HEALTH_ARMOUR_UPGRADES,
	ABILITY_HEALTH_HEALTH_UPGRADES,
	ABILITY_DRIVING,
	ABILITY_DRIVEBY,
	ABILITY_RELIABILITY,
	ABILITY_SHOOTING,
	ABILITY_HACKING,
	ABILITY_BADCOP,
	ABILITY_HATECOPS,
	ABILITY_HATEVAGOS,
	ABILITY_HATELOST,
	ABILITY_SPECIAL_ABILITY_CAPACITY,
	ABILITY_LUNG_CAPACITY,
	ABILITY_STRENGTH,
	ABILITY_BIKE_SKILL,
	ABILITY_FLYING_ABILITY,
	ABILITY_STEALTH_ABILITY,
	ABILITY_MECHANIC_ABILITY
ENDENUM

ENUM SWITCH_PIESLICE
	PIESLICE_TOP = 0,
	PIESLICE_RIGHT,
	PIESLICE_BOTTOM,
	PIESLICE_LEFT
ENDENUM

ENUM SWITCH_CHARACTER
	CHARACTER_MICHAEL = 0,
	CHARACTER_TREVOR,
	CHARACTER_FRANKLIN,
	CHARACTER_MULTIPLAYER,
	CHARACTER_CHOP
ENDENUM

ENUM FEED_PICTURE_ICON
	PICTURE_ICON_BLANK=0,
	PICTURE_ICON_MESSAGE,
	PICTURE_ICON_EMAIL,
	PICTURE_ICON_NEW_CONTACT,
	PICTURE_ICON_DRIVER,
	PICTURE_ICON_HACKER,
	PICTURE_ICON_SHOOTER
ENDENUM

ENUM FEED_TEXT_ICON
	TEXT_ICON_BLANK=0,
	TEXT_ICON_MESSAGE,
	TEXT_ICON_EMAIL,
	TEXT_ICON_NEW_CONTACT,
	TEXT_ICON_DRIVER,
	TEXT_ICON_HACKER,
	TEXT_ICON_SHOOTER,
	TEXT_ICON_INVITE,
	TEXT_ICON_RP,
	TEXT_ICON_CASH,
	TEXT_ICON_AP,
	TEXT_ICON_XP_ALT,
	TEXT_ICON_CASH_ALT
ENDENUM

ENUM FEED_REPLAY_TYPE
	REPLAY_RECORDING,
	REPLAY_BUTTON,
	ACTION_REPLAY
ENDENUM

//INFO: 
//PARAM NOTES:
//PURPOSE: Convert pixels coordinate (from (0,0) to (1280,720)) to screen space (0.0,0.0) to (1.0,1.0)
FUNC VECTOR CONVERT_PIXELS_TO_SCREENSPACE(FLOAT X, FLOAT Y)
	float pixelWidth = 1.0/1280.0
	float pixelHeight = 1.0/720.0
	VECTOR v
	v.x = X * pixelWidth
	v.y = Y * pixelHeight
	RETURN v
ENDFUNC

/// PURPOSE: Tell the feed system how high the scripted menu is so it doesn't overlap it.
/// PARAMS:
///    fScriptedMenuHeight - The height of the scripted menu.
//     Pass 0.0 to revert back to normal.
NATIVE PROC THEFEED_SET_SCRIPTED_MENU_HEIGHT(FLOAT fScriptedMenuHeight) = "0x7ed668fc4cb0f4c4"

/// PURPOSE: Turns random game tips on.
///          THEFEED_FORCE_RENDER_ON() may need to be called depending on
///          where this needs to be displayed.
/// PARAMS:
///    none
NATIVE PROC THEFEED_AUTO_POST_GAMETIPS_ON() = "0xb1f47b55abffc2c6"

/// PURPOSE: Turns random game tips off.
///          THEFEED_FORCE_RENDER_OFF() may need to be called depending on
///          where this needs to be displayed.
/// PARAMS:
///    none
NATIVE PROC THEFEED_AUTO_POST_GAMETIPS_OFF() = "0x80b433623a323832"

/// PURPOSE: Begins the text command for the busy spinner.
///          End with END_TEXT_COMMAND_BUSYSPINNER_ON.
/// PARAMS:
///    sMainTextLabel - Main text label
NATIVE PROC BEGIN_TEXT_COMMAND_BUSYSPINNER_ON(STRING sMainTextLabel) = "0x65f03588435fe39b"

/// PURPOSE: Displays the busy spinner message.
/// PARAMS:
///    iIcon: 2=Spinner / 4=Star
NATIVE PROC END_TEXT_COMMAND_BUSYSPINNER_ON(INT iIcon) = "0xa22cde353f373a10"

/// PURPOSE: Disable the pause menu spinner.  Re-enable after done, please.
/// PARAMS:
///    bDisable: disable/enable it.
NATIVE PROC DISABLE_PAUSEMENU_SPINNER(BOOL bDisable) = "0x66a7bcfc9dcf9410"

/// PURPOSE: Turns the busy spinner off.
/// PARAMS:
///    None
NATIVE PROC BUSYSPINNER_OFF() = "0xbe3ac6d6682e4a5e"

/// PURPOSE: Preloads the busy spinner movie, BUSYSPINNER_OFF must be called if it never gets set
/// PARAMS:
///    none
NATIVE PROC PRELOAD_BUSYSPINNER() = "0xdb18c83ed1b45a43"

/// PURPOSE: Check if the busy spinner is on.
/// PARAMS:
///    None
/// RETURNS:
///    TRUE = On
///    FALSE = Off
NATIVE FUNC BOOL BUSYSPINNER_IS_ON() = "0xabf37173278f2c66"

/// PURPOSE: Check if the busy spinner is on and displaying onscreen.
/// PARAMS:
///    None
/// RETURNS:
///    TRUE = On
///    FALSE = Off
NATIVE FUNC BOOL BUSYSPINNER_IS_DISPLAYING() = "0xf2cab66b1eeaf469"

/// PURPOSE: sets the mouse pointer to be active this frame
/// PARAMS: nome
NATIVE PROC SET_MOUSE_CURSOR_THIS_FRAME() = "0x60236500251fde8e"

/// PURPOSE: sets the style of the mouse pointer
/// PARAMS: style type (see eMOUSE_POINTER_STYLE)
NATIVE PROC SET_MOUSE_CURSOR_STYLE(eMOUSE_POINTER_STYLE style) = "0x147141484022751b"

/// PURPOSE: hides/shows the mouse pointer
/// PARAMS: bool whether on or off
NATIVE PROC SET_MOUSE_CURSOR_VISIBLE(BOOL bVisible) = "0x284537aa10dee2ed"

/// PURPOSE: Returns whether the mouse pointer is currently rolled over the instructional buttons.
/// PARAMS:
NATIVE FUNC BOOL IS_MOUSE_ROLLED_OVER_INSTRUCTIONAL_BUTTONS() = "0xff792ddc17afa777"

/// PURPOSE: Returns whether the mouse pointer is currently rolled over the instructional buttons.
/// PARAMS:  iScaleformMovieId -- The scaleform movie id to check for mouse events
///			 evtType -- Type of mouse event that occurs (This will be written to if TRUE is returned)
///			 iUID -- Unique ID for the item that triggered the mouse event (This will be written to if TRUE is returned)
///			 iContext -- The context that this item occured.  This can be a column index, submenu, etc. (This will be written to if TRUE is returned)
NATIVE FUNC BOOL GET_MOUSE_EVENT(SCALEFORM_INDEX iScaleformMovieId, eMOUSE_EVT& evtType, int& iUID, int& iContext) = "0x64a9da79c6fa2378"

/// PURPOSE: shows the account picker UI for XB1
/// PARAMS: none
NATIVE PROC SHOW_ACCOUNT_PICKER() = "0x076c7a1c039099c5"

/// PURPOSE: only show tooltips
/// PARAMS:
///    none
NATIVE PROC THEFEED_ONLY_SHOW_TOOLTIPS(bool bOnlyToolTips) = "0x000323ba1a15023e"

/// PURPOSE: Hide the feed until THEFEED_SHOW() is called
/// PARAMS:
///    none
NATIVE PROC THEFEED_HIDE() = "0xedd332b8622a1aaa"

/// PURPOSE: Resume showing the feed
/// PARAMS:
///    none
NATIVE PROC THEFEED_SHOW() = "0xc8483c4c42152921"

/// PURPOSE: Hides the feed for an update.
/// PARAMS:
///    none
NATIVE PROC THEFEED_HIDE_THIS_FRAME() = "0xf43060df31acea55"

/// PURPOSE: Forces the feed to render all the time.
/// PARAMS:
///    none
NATIVE PROC THEFEED_FORCE_RENDER_ON() = "0xf8937c8d901dd3e3"

/// PURPOSE: Stops forcing the feed to render all the time.
/// PARAMS:
///    none
NATIVE PROC THEFEED_FORCE_RENDER_OFF() = "0x7ed9c25cd67a47b4"

/// PURPOSE: Pause the feed.
/// PARAMS:
///    none
NATIVE PROC THEFEED_PAUSE() = "0xa240f4c910b19938"

/// PURPOSE: Resume the feed.
/// PARAMS:
///    none
NATIVE PROC THEFEED_RESUME() = "0x45227777d3ebece5"

/// PURPOSE: returns whether it is paused or not
/// PARAMS:
///    none
NATIVE FUNC BOOL THEFEED_IS_PAUSED() = "0xd73fbb13d109c7e5"



/// PURPOSE: Flushes the "The Feed" queue and removes all the displayed feed items.
/// PARAMS:
///    none
NATIVE PROC THEFEED_FLUSH_QUEUE() = "0x1b7aaa85d46fe6fb"

/// PURPOSE: Reports the logo is on ( Forces the feed to move up as though the minimap is visible )
/// PARAMS:
///    none
NATIVE PROC THEFEED_REPORT_LOGO_ON() = "0xaf6b61516f451e7b"

/// PURPOSE: Reports the logo is off ( Restores the feed to it's default position/behaviour )
/// PARAMS:
///    none
NATIVE PROC THEFEED_REPORT_LOGO_OFF() = "0x033c89f75a484139"

/// PURPOSE: Sets persistent gamer information to be used with END_TEXT_COMMAND_THEFEED_POST_MPTICKER
///    sName: Gamer Name (NOTE: if this is an empty string, gamer name and crew-tag will not be displayed.)
///    bIsPrivate: FALSE = public, TRUE = private
///    bShowLogoFlag: FALSE = no R*, TRUE = R* shown
///    sCrewString:  Four alphanumeric alphanumeric representing the crew string. (NOTE: if this is an empty string, crew-tag will not be displayed.)
///    iCrewRank: Rank (0 to 6)
///    bFounderStatus: If true, replaces rank symbols with founder symbol.
/// NOTES:
///    **** THESE FUNCTIONS ARE NOW DEPRECATED **** PLEASE DO NOT USE
///    To display an MP ticker both gamers must be specified, THEFEED_SET_GAMER1_INFO() will set up the top player
///    and THEFEED_SET_GAMER2_INFO() will set up the bottom player. After both players have been set up call the
///    BEGIN_TEXT_COMMAND_THEFEED_POST() / END_TEXT_COMMAND_THEFEED_POST_MPTICKER() combination as normal.
NATIVE PROC THEFEED_SET_GAMER1_INFO(STRING sName, BOOL bIsPrivate, BOOL bShowLogoFlag, STRING sCrewString, INT iCrewRank, BOOL bFounderStatus) = "0xe6a266c47725eb47"
NATIVE PROC THEFEED_SET_GAMER2_INFO(STRING sName, BOOL bIsPrivate, BOOL bShowLogoFlag, STRING sCrewString, INT iCrewRank, BOOL bFounderStatus) = "0xaeb6aaf75158e40a"

/// PURPOSE: Finds the feed ID of the last (currently showing) activatable feed item
/// RETURNS:
///    iId - The id of the last shown phone activatable feed item. ( This id is returned from all END_TEXT_COMMAND_THEFEED_POST_* commands )
NATIVE FUNC INT THEFEED_GET_LAST_SHOWN_PHONE_ACTIVATABLE_FEED_ID() = "0x361847535f5edc1b"

/// PURPOSE: Removed an item from the feed.
/// PARAMS:
///    iId - The id of the item to removed. ( This id is returned from all END_TEXT_COMMAND_THEFEED_POST_* commands )
NATIVE PROC THEFEED_REMOVE_ITEM( INT iId ) = "0x35a0954fc4dc4cad"

/// PURPOSE: Sets the RGBA background color for the next feed post
/// PARAMS:
///    color - The color to set the post background
NATIVE PROC THEFEED_SET_BACKGROUND_COLOR_FOR_NEXT_POST(HUD_COLOURS color) = "0xa5d2a61128a52bee"

/// PURPOSE: Sets the RGBA background attributes for "Important" feed types
/// PARAMS:
///    iRed - Red
///    iGreen - green
///    iBlue - Blue
///    iAlpha - alpha
NATIVE PROC THEFEED_SET_RGBA_PARAMETER_FOR_NEXT_MESSAGE(INT iRed, INT iGreen, INT iBlue, INT iAlpha) = "0xde1e80cd298714f6"

/// PURPOSE: Sets flash duration for "Important" feed types
/// PARAMS:
///    iFlashDuration - Flash duration
NATIVE PROC THEFEED_SET_FLASH_DURATION_PARAMETER_FOR_NEXT_MESSAGE(INT iFlashDuration) = "0x6b4fdbc0c48138eb"

/// PURPOSE: Sets the vibrate controller option for "Important" feed types
/// PARAMS:
///    bVibrate - TRUE = Vibrate the controller when the message pops up. FALSE = No vibrate when the message pops up.
NATIVE PROC THEFEED_SET_VIBRATE_PARAMETER_FOR_NEXT_MESSAGE(BOOL bVibrate) = "0x41b7a61cd05e09f7"

/// PURPOSE: Defaults all the parameters set with:
///          THEFEED_SET_RGBA_PARAMETER_FOR_NEXT_MESSAGE
///          THEFEED_SET_FLASH_DURATION_PARAMETER_FOR_NEXT_MESSAGE
///          THEFEED_SET_VIBRATE_PARAMETER_FOR_NEXT_MESSAGE
/// PARAMS:
///    none
NATIVE PROC THEFEED_RESET_ALL_PARAMETERS() = "0xcafd40d2e1c5badf"

/// PURPOSE: Freezes the next post on screen until THEFEED_CLEAR_FROZEN_POST is called
NATIVE PROC THEFEED_FREEZE_NEXT_POST() = "0xa3a13cfc0759da78"

/// PURPOSE: Clears any frozen posts caused by THEFEED_FREEZE_NEXT_POST
NATIVE PROC THEFEED_CLEAR_FROZEN_POST() = "0x4d6d7401e41088cc"

/// PURPOSE:	Flags if the feed should snap feed items (TRUE), or if it should animate (FALSE) into position
//				This is currently only used for showing replay items on DPAD down (Because game speed is slowed down
//				during this, animations run at a slower speed and we want these items to appear immediatey)
NATIVE PROC THEFEED_SET_SNAP_FEED_ITEM_POSITIONS(BOOL bSet) = "0x5ef96ccb73988e08"

NATIVE PROC THEFEED_UPDATE_ITEM_TEXTURE(STRING sOldTXD, STRING sOldTXN, STRING sNewTXD, STRING sNewTXN) = "0x8bc4d76163fa9e13"

/// PURPOSE: Obsolete
/// PARAMS:	INT red, INT green, INT blue, INT alpha
NATIVE PROC THEFEED_SET_RGBA_PARAMETER( INT red, INT green, INT blue, INT alpha_param ) = "0xad838fe60889939d"

/// PURPOSE: Obsolete
/// PARAMS:	INT flashRate
NATIVE PROC THEFEED_SET_FLASH_DURATION_PARAMETER( INT flashRate ) = "0xe9ceb47bb9f08cb6"

/// PURPOSE: Obsolete
/// PARAMS:	NONE
NATIVE PROC THEFEED_RESET_RGBA_FLASHRATE_PARAMETERS( ) = "0xcd8580404dc7b784"



/// PURPOSE: Begins the text command for "The Feed".
///          End with END_TEXT_COMMAND_THEFEED_POST_STATS, END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT, etc.
///          Use the standard string creation functionality detailed below before calling the "END_" function. ( eg ADD_TEXT_COMPONENT_FLOAT(...) )
/// PARAMS:
///    sMainTextLabel - Main text label
NATIVE PROC BEGIN_TEXT_COMMAND_THEFEED_POST(STRING sMainTextLabel) = "0x150d8f58b26e9f70"

/// PURPOSE: Displays the stats message/icon in the top left of the HUD
/// PARAMS:
///    sTitleString - Title of the stats icon.
///    eIcon - Icon to use ( See ABILITY_ICON enum above )
///    iTotalLevel - The amount in difference of increase/decrease e.g. -1, 5, -100, 100 Max 100 both ways
///    iCurrentLevel - Current level value 0-100(%)
///    bIsImportant - TRUE: Flash the message.
///    sContactTxD - Contact, texture dictionary string
///    sContactTxN - Contact, texture name
/// RETURNS:
///    A unique id which can be used to manipulate the item while on screen.
NATIVE FUNC INT END_TEXT_COMMAND_THEFEED_POST_STATS(STRING sTitleString, ABILITY_ICON eIcon, INT iTotalLevel, INT iCurrentLevel, BOOL bIsImportant, STRING sContactTxD, STRING sContactTxN) = "0x4d190c4e8cafbed1"

/// PURPOSE: Displays the text message contact image and localised text message string in the top left of the HUD
/// PARAMS:
///    sTXD - The Texture Dictionary for the contact image used in the Text Message
///    sImageName - The Image name string for the contact image used in the Text Message
///    bIsImportant - TRUE: Flash the message.
///    eIcon - Icon type. Default: TEXT_ICON_BLANK
///    sCharacterName - The Character's Name.
/// RETURNS:
///    A unique id which can be used to manipulate the item while on screen.
NATIVE FUNC INT END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT(STRING sTXD, STRING sImageName, BOOL bIsImportant, FEED_TEXT_ICON eIcon, STRING sCharacterName, STRING sSubtitle = NULL) = "0x3b81b9627e7885cf"

/// PURPOSE: Displays the text message contact image and localised text message string in the top left of the HUD
/// PARAMS:
///    sTXD - The Texture Dictionary for the contact image used in the Text Message
///    sImageName - The Image name string for the contact image used in the Text Message
///    bIsImportant - TRUE: Flash the message.
///    eIcon - Icon type. Default: TEXT_ICON_BLANK
///    sCharacterName - The Character's Name.
///	   sSubtitle - Text label of subtitle
/// RETURNS:
///    A unique id which can be used to manipulate the item while on screen.
NATIVE FUNC INT END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT_SUBTITLE_LABEL(STRING sTXD, STRING sImageName, BOOL bIsImportant, FEED_TEXT_ICON eIcon, STRING sCharacterName, STRING sSubtitle = NULL) = "0x197e7b3a20bf59ad"

/// PURPOSE: ** Modified TITLE_UPDATE COMMAND ** Displays the text message contact image and localised text message string in the top left of the HUD
/// PARAMS:
///    sTXD - The Texture Dictionary for the contact image used in the Text Message
///    sImageName - The Image name string for the contact image used in the Text Message
///    bIsImportant - TRUE: Flash the message.
///    eIcon - Icon type. Default: TEXT_ICON_BLANK
///    sCharacterName - The Character's Name.
///	   sSubtitle - Optional Subtitle to display below title
///	   timeMultiplier - Multiplicative modifier to the standard display time of a feed item (2.0f will double the amount of time this feed item is shown on screen)
/// RETURNS:
///    A unique id which can be used to manipulate the item while on screen.
NATIVE FUNC INT END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT_TU(STRING sTXD, STRING sImageName, BOOL bIsImportant, FEED_TEXT_ICON eIcon, STRING sCharacterName, STRING sSubtitle = NULL, FLOAT timeMultiplier = 1.0) = "0x450880c8bbf08892"

/// PURPOSE: ** Modified TITLE_UPDATE COMMAND ** Displays the text message contact image and localised text message string in the top left of the HUD
/// PARAMS:
///    sTXD - The Texture Dictionary for the contact image used in the Text Message
///    sImageName - The Image name string for the contact image used in the Text Message
///    bIsImportant - TRUE: Flash the message.
///    eIcon - Icon type. Default: TEXT_ICON_BLANK
///    sCharacterName - The Character's Name.
///	   sSubtitle - Optional Subtitle to display below title
///	   timeMultiplier - Multiplicative modifier to the standard display time of a feed item (2.0f will double the amount of time this feed item is shown on screen)
///	   sCrewTagPacked - Packed crew tag string to show for game invites from crew members
/// RETURNS:
///    A unique id which can be used to manipulate the item while on screen.
NATIVE FUNC INT END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT_WITH_CREW_TAG(STRING sTXD, STRING sImageName, BOOL bIsImportant, FEED_TEXT_ICON eIcon, STRING sCharacterName, STRING sSubtitle = NULL, FLOAT timeMultiplier = 1.0, STRING sCrewTagPacked = NULL) = "0xe29f3dff64c18dae"

/// PURPOSE: ** Modified TITLE_UPDATE COMMAND ** Does everything END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT_WITH_CREW_TAG can do, but with an additional icon!
NATIVE FUNC INT END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT_WITH_CREW_TAG_AND_ADDITIONAL_ICON(STRING sTXD, STRING sImageName, BOOL bIsImportant, FEED_TEXT_ICON eIcon, STRING sCharacterName, STRING sSubtitle = NULL, FLOAT timeMultiplier = 1.0, STRING sCrewTagPacked = NULL, FEED_TEXT_ICON eIcon2 = 0, INT iHudColor = 1) = "0xe7018078e5cde830"

/// PURPOSE: Displays the ticker message string in the top left of the HUD
/// PARAMS:
///    bIsImportant - TRUE: Flash the message.
/// RETURNS:
///    A unique id which can be used to manipulate the item while on screen.
NATIVE FUNC INT END_TEXT_COMMAND_THEFEED_POST_TICKER(BOOL bIsImportant, BOOL bCacheMessage = TRUE) = "0x187df98ed95e5557"

/// PURPOSE: Displays the ticker message string in the top left of the HUD
/// PARAMS:
///    bIsImportant - TRUE: Flash the message. - forces it through even if feed is paused
/// RETURNS:
///    A unique id which can be used to manipulate the item while on screen.
NATIVE FUNC INT END_TEXT_COMMAND_THEFEED_POST_TICKER_FORCED(BOOL bIsImportant, BOOL bCacheMessage = TRUE) = "0xf5b7761e0022ee4c"

/// PURPOSE: Displays a ticker message containing tokens (i.e. ~BLIP_INFO_ICON~)
/// PARAMS:
///    bIsImportant - TRUE: Flash the message.
///    bCacheMessage - TRUE: Cache the message for the Pause Menu
/// RETURNS:
///    A unique id which can be used to manipulate the item while on screen.
NATIVE FUNC INT END_TEXT_COMMAND_THEFEED_POST_TICKER_WITH_TOKENS(BOOL bIsImportant, BOOL bCacheMessage = TRUE) = "0x0b47c28802142e86"

/// PURPOSE: Displays a two line ticker message string ( F10 )
/// PARAMS:
///    sTopLine The string to display above the body text.
///    bIsImportant - TRUE: Flash the message.
/// RETURNS:
///    A unique id which can be used to manipulate the item while on screen.
NATIVE FUNC INT END_TEXT_COMMAND_THEFEED_POST_TICKER_F10(STRING sTopLine, BOOL bIsImportant, BOOL bCacheMessage = TRUE) = "0x6e8a43b68a3a516e"

/// PURPOSE: Displays the Award component
/// PARAMS:
///		sTXD - award texture dictionary
///		sTXN - award texture name		
///		iXP - award xp
///		eAwardColour - award colour
///		sTitle - award title (i.e. "Medal" or "Award")
/// RETURNS:
///    A unique id which can be used to manipulate the item while on screen.
NATIVE FUNC INT END_TEXT_COMMAND_THEFEED_POST_AWARD(STRING sTXD, STRING sTXN, INT iXP, HUD_COLOURS eAwardColour, STRING sTitle = NULL) = "0x5e6cc764bdafa84b"

/// PURPOSE: Displays the crew tag component
/// PARAMS:
///    bIsPrivate false = public, true = private
///    bShowLogoFlag false = no R*, true = R* shown
///    sCrewString Four alphanumeric characters.
///    iCrewRank Rank (0 to 6)
///    bFounderStatus If true, replaces rank symbols with founder symbol.
///    bIsImportant - TRUE: Flash the message.
//	   crewId - the ID of the crew the message is for
/// RETURNS:
///    A unique id which can be used to manipulate the item while on screen.
NATIVE FUNC INT END_TEXT_COMMAND_THEFEED_POST_CREWTAG(BOOL bIsPrivate, BOOL bShowLogoFlag, STRING sCrewString, INT iCrewRank, BOOL bFounderStatus, BOOL bIsImportant, INT crewId, INT iCrewColourR = 0, INT iCrewColourG = 0, INT iCrewColourB = 0) = "0xbc04c06c5ebc8bd5"

/// PURPOSE: Displays the crew tag component
/// PARAMS:
///    bIsPrivate false = public, true = private
///    bShowLogoFlag false = no R*, true = R* shown
///    sCrewString Four alphanumeric characters.
///    iCrewRank Rank (0 to 6)
///    bFounderStatus If true, replaces rank symbols with founder symbol.
///    bIsImportant - TRUE: Flash the message.
//	   crewId - the ID of the crew the message is for
//     sGameName - the game name appears above body text in the condensed font to allow long gamernames.
/// RETURNS:
///    A unique id which can be used to manipulate the item while on screen.
NATIVE FUNC INT END_TEXT_COMMAND_THEFEED_POST_CREWTAG_WITH_GAME_NAME(BOOL bIsPrivate, BOOL bShowLogoFlag, STRING sCrewString, INT iCrewRank, BOOL bFounderStatus, BOOL bIsImportant, int crewId, STRING sGameName, INT iCrewColourR = 0, INT iCrewColourG = 0, INT iCrewColourB = 0) = "0x2fe2977f89f2c159"

/// PURPOSE: Displays the unlock component
/// PARAMS:
///		sTitleString	- unlock title (i.e. "New Weapon")
///		eICON_TYPE		- icon enum (0 = Haircut Icon, 1 = Tattoo Icon, 2 = Weapon Icon)
///		sFullBodyString - DEPRECATED, DO NOT USE
/// RETURNS:
///    A unique id which can be used to manipulate the item while on screen.
NATIVE FUNC INT END_TEXT_COMMAND_THEFEED_POST_UNLOCK(STRING sTitleString, INT iconType = 0, STRING sFullBodyString = NULL) = "0x13436442fa22e816"

/// PURPOSE: Displays the unlock component (TITLE UPDATE)
/// PARAMS:
///		sTitleString	- unlock title (i.e. "New Weapon")
///		eICON_TYPE		- icon enum (0 = Haircut Icon, 1 = Tattoo Icon, 2 = Weapon Icon)
///		sFullBodyString - DEPRECATED, DO NOT USE
///		bIsImportant	- TRUE: Flash the message.
/// RETURNS:
///    A unique id which can be used to manipulate the item while on screen.
NATIVE FUNC INT END_TEXT_COMMAND_THEFEED_POST_UNLOCK_TU(STRING sTitleString, INT iconType = 0, STRING sFullBodyString = NULL, BOOL bIsImportant = FALSE) = "0xb36438590d294199"

/// PURPOSE: Displays the unlock component (TITLE UPDATE)
/// PARAMS:
///		sTitleString	- unlock title (i.e. "New Weapon")
///		eICON_TYPE		- icon enum (0 = Haircut Icon, 1 = Tattoo Icon, 2 = Weapon Icon)
///		sFullBodyString - the full unlock body string to use for the pause menu
///		bIsImportant	- TRUE: Flash the message.
///		color			- colour
/// RETURNS:
///    A unique id which can be used to manipulate the item while on screen.
NATIVE FUNC INT END_TEXT_COMMAND_THEFEED_POST_UNLOCK_TU_WITH_COLOR(STRING sTitleString, INT iconType = 0, STRING sFullBodyString = NULL, BOOL bIsImportant = FALSE, HUD_COLOURS eTitleColour = 0, BOOL bTitleIsLiteral = TRUE) = "0x213ec586d6b81324"

/// PURPOSE: Displays the mp ticker component.
/// PARAMS:
///    bIsImportant - TRUE: Flash the message.
/// RETURNS:
///    A unique id which can be used to manipulate the item while on screen.
/// NOTES:
///     ** THIS COMMAND HAS BEEN DEPRECATED.  USE END_TEXT_COMMAND_THEFEED_POST_TICKER instead **
///		Use in conjunction with THEFEED_SET_GAMER1_INFO and THEFEED_SET_GAMER2_INFO
NATIVE FUNC INT END_TEXT_COMMAND_THEFEED_POST_MPTICKER( BOOL bIsImportant, BOOL bCacheMessage = TRUE ) = "0x14fe8aefbebb7595"

/// PURPOSE: Displays the crew rankup ticker component.
/// PARAMS:
///    sSubtitle - The text key of the subtitle string
///    sTXD - The Texture Dictionary for the crew emblem
///    sTXN - The Texture Name for the crew emblem
///    bIsImportant - TRUE: Flash the message.
/// RETURNS:
///    A unique id which can be used to manipulate the item while on screen.
NATIVE FUNC INT END_TEXT_COMMAND_THEFEED_POST_CREW_RANKUP(STRING sSubtitle, STRING sTXD, STRING sTXN, BOOL bIsImportant) = "0xc412e0634ae3c3ab"

/// PURPOSE: Does the same as END_TEXT_COMMAND_THEFEED_POST_CREW_RANKUP but allows you to specify whether sSubtitle is a text key or a literal string
NATIVE FUNC INT END_TEXT_COMMAND_THEFEED_POST_CREW_RANKUP_WITH_LITERAL_FLAG(STRING sSubtitle, STRING sTXD, STRING sTXN, BOOL bIsImportant, BOOL bSubtitleIsLiteral) = "0x5de7fbbfcccf8a9b"

/// PURPOSE: Displays the MP Versus feed component used when you die in multiplayer
/// PARAMS:
///    ch1TXD - Ped 1 Headshot TXD
///    ch1TXD - Ped 1 Headshot TXN
///    iVal1 - Ped 1 value
///    ch2TXD - Ped 2 Headshot TXD
///    ch2TXD - Ped 2 Headshot TXN
///    iVal2 - Ped 2 value
/// RETURNS:
///    A unique id which can be used to manipulate the item while on screen.
NATIVE FUNC INT END_TEXT_COMMAND_THEFEED_POST_VERSUS_TU(STRING ch1TXD, STRING ch1TXN, INT iVal1, STRING ch2TXD, STRING ch2TXN, INT iVal2, HUD_COLOURS iCustomColor1 = -1, HUD_COLOURS iCustomColor2 = -1) = "0x6e98512bacab301c"

/// PURPOSE: Displays a Replay feed component (used when you press DPAD down)
/// PARAMS:
///    eReplayType - only use REPLAY_BUTTON_ICON (for now)
///    eButtonIcon - if using REPLAY_BUTTON_ICON eReplayType, then specify a button icon enum here
///    sSubtitle - optional subtitle (not needed for current mockups)
/// RETURNS:
///    A unique id which can be used to manipulate the item while on screen.
NATIVE FUNC INT END_TEXT_COMMAND_THEFEED_POST_REPLAY(FEED_REPLAY_TYPE eReplayType, int iIcon, STRING sSubtitle) = "0xe815b0e0beb78386"
NATIVE FUNC INT END_TEXT_COMMAND_THEFEED_POST_REPLAY_INPUT(FEED_REPLAY_TYPE eReplayType, STRING sIcon, STRING sSubtitle) = "0xc400185efbad9333"

NATIVE PROC BEGIN_TEXT_COMMAND_PRINT(STRING pMainTextLabel) = "0x38bd019deccc5482"
NATIVE PROC END_TEXT_COMMAND_PRINT(INT Duration, BOOL bPrintNow) = "0x23d3ee043de19c4b"

NATIVE PROC BEGIN_TEXT_COMMAND_IS_MESSAGE_DISPLAYED(STRING pMainTextLabel) = "0x09684fd679b0e474"
NATIVE FUNC BOOL END_TEXT_COMMAND_IS_MESSAGE_DISPLAYED() = "0xd7aa4c82b5d00977"

NATIVE PROC BEGIN_TEXT_COMMAND_DISPLAY_TEXT(STRING pMainTextLabel) = "0xcdda0c58b818f6b2"
NATIVE PROC END_TEXT_COMMAND_DISPLAY_TEXT(FLOAT DisplayAtX, FLOAT DisplayAtY, INT STEREO = 0) = "0x1a53079994915fa6"

#IF IS_DEBUG_BUILD
NATIVE PROC END_TEXT_COMMAND_DISPLAY_DEBUG_TEXT(FLOAT DisplayAtX, FLOAT DisplayAtY) = "0x20270a24691cf680"
#ENDIF

NATIVE PROC BEGIN_TEXT_COMMAND_GET_SCREEN_WIDTH_OF_DISPLAY_TEXT(STRING pMainTextLabel) = "0x27ed46ea48c0a455"
NATIVE FUNC FLOAT END_TEXT_COMMAND_GET_SCREEN_WIDTH_OF_DISPLAY_TEXT(BOOL bIncludeSpaces) = "0x63f498818b4dee3e"

NATIVE PROC BEGIN_TEXT_COMMAND_GET_NUMBER_OF_LINES_FOR_STRING(STRING pMainTextLabel) = "0xb733c0853476f0c1"
NATIVE FUNC INT END_TEXT_COMMAND_GET_NUMBER_OF_LINES_FOR_STRING(FLOAT DisplayAtX, FLOAT DisplayAtY) = "0xbd7dcbc4f2df91f8"

NATIVE PROC BEGIN_TEXT_COMMAND_DISPLAY_HELP(STRING pMainTextLabel) = "0xa83426f7ceded182"

// PARAMS: You can specify an OverrideDuration in milliseconds. Use the default of -1 to use the standard time which is based on the number of words
NATIVE PROC END_TEXT_COMMAND_DISPLAY_HELP(eHelpMessageId iHelpId, BOOL bDisplayForever, BOOL bPlaySound, INT OverrideDuration = -1) = "0x89b545a74f93b1dd"

NATIVE PROC BEGIN_TEXT_COMMAND_IS_THIS_HELP_MESSAGE_BEING_DISPLAYED(STRING pMainTextLabel) = "0xb65782d82090bb33"
NATIVE FUNC BOOL END_TEXT_COMMAND_IS_THIS_HELP_MESSAGE_BEING_DISPLAYED(eHelpMessageId iHelpId) = "0x73cb3406a86a3a02"

NATIVE PROC BEGIN_TEXT_COMMAND_ADD_DIRECTLY_TO_PREVIOUS_BRIEFS(STRING pMainTextLabel) = "0xfa61eba0db93d000"
NATIVE PROC END_TEXT_COMMAND_ADD_DIRECTLY_TO_PREVIOUS_BRIEFS(BOOL bUsesUnderscore) = "0x33c7d05305878ca8"

NATIVE PROC BEGIN_TEXT_COMMAND_CLEAR_PRINT(STRING pMainTextLabel) = "0x1419d7b938cbff2e"
NATIVE PROC END_TEXT_COMMAND_CLEAR_PRINT() = "0xf4666ba5b36dbcb2"

NATIVE PROC BEGIN_TEXT_COMMAND_PLAYER_NAME_ROW(STRING pMainTextLabel) = "0xefbb7fbba7e8187b"
NATIVE PROC END_TEXT_COMMAND_PLAYER_NAME_ROW() = "0x6d6a2cf78bbc0899"

NATIVE PROC BEGIN_TEXT_COMMAND_SET_BLIP_NAME(STRING pMainTextLabel) = "0xb6ad9f9931d821ca"
NATIVE PROC END_TEXT_COMMAND_SET_BLIP_NAME(BLIP_INDEX BlipIndex) = "0xa630bf119308f2f4"

/// PURPOSE:
///    Overrides the text of a button prompt in the pause menu's strip
/// PARAMS:
///    pMainTextLabel - label to start
NATIVE PROC BEGIN_TEXT_COMMAND_OVERRIDE_BUTTON_TEXT(STRING pMainTextLabel) = "0xf496bf691df1252b"

/// PURPOSE:
///    Finishes what BEGIN_TEXT_COMMAND_OVERRIDE_BUTTON_TEXT started
/// PARAMS:
///    iSlotIndex - which on-screen index to override after sorting. Note the order is from RIGHT to LEFT.
NATIVE PROC END_TEXT_COMMAND_OVERRIDE_BUTTON_TEXT(INT iSlotIndex) = "0xa01b659e856f50c8"



//PURPOSE: Use ~1~ to mark the position in your line of text where you want this integer inserted
NATIVE PROC ADD_TEXT_COMPONENT_INTEGER(INT IntegerToAdd) = "0x2ae954ba77a66307"

//PURPOSE: Use ~1~ to mark the position in your line of text where you want this float inserted
NATIVE PROC ADD_TEXT_COMPONENT_FLOAT(FLOAT FloatToAdd, INT NumberOfDecimalPlaces) = "0x957e514a6e999374"

//PURPOSE: Use ~a~ to mark the position in your line of text where you want this substring inserted
NATIVE PROC ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL(STRING pSubStringTextLabelToAdd) = "0x26c23be14f66f202"

//PURPOSE: Use ~a~ to mark the position in your line of text where you want this substring inserted
NATIVE PROC ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL_HASH_KEY(INT HashKeyOfSubStringTextLabelToAdd) = "0x5ce9b15c197df898"

//PURPOSE: Use ~a~ to mark the position in your line of text where you want this substring inserted
NATIVE PROC ADD_TEXT_COMPONENT_SUBSTRING_BLIP_NAME(BLIP_INDEX blipIndex) = "0x26e6a0f02144bed3"

//PURPOSE: Use ~a~ to mark the position in your line of text where you want this substring inserted
NATIVE PROC ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(STRING PlayerName) = "0x76db21247ae4e4e2"

//PURPOSE: For the hacking minigame. Use ~a~ to mark the position in your line of text where you want this substring inserted
NATIVE PROC ADD_TEXT_COMPONENT_SUBSTRING_IP_ADDRESS(STRING IpAddress) = "0x2b1066417767ccc9"

//PURPOSE: For the hacking minigame. Use ~a~ to mark the position in your line of text where you want this substring inserted
NATIVE PROC ADD_TEXT_COMPONENT_SUBSTRING_PASSWORD(STRING Password) = "0x4dd41b503d2c2524"


ENUM TEXT_COMPONENT_TIME_FORMAT
	TIME_FORMAT_MILLISECONDS = 1,
	TIME_FORMAT_SECONDS = 2,
	TIME_FORMAT_MINUTES = 4,
	TIME_FORMAT_HOURS = 8,
	TIME_FORMAT_DAYS = 16,
	TEXT_FORMAT_HIDE_LEADING_UNITS_EQUAL_TO_ZERO = 32,		//	e.g. show 12:20 not 00:12:20
	TEXT_FORMAT_HIDE_LEADING_ZEROS_ON_LEADING_UNITS = 64,	//	e.g. show 1:14 not 01:14
	TEXT_FORMAT_SHOW_UNIT_DIVIDERS_AS_LETTERS = 128,			//	e.g. show 3m24s not 3:24
	TEXT_FORMAT_HIDE_UNIT_LETTER_FOR_SMALLEST_UNITS = 256,	//	e.g. show 3m24 not 3m24s
	TEXT_FORMAT_HIDE_MILLISECONDS_UNITS_DIGIT = 512,		//	e.g. show 05:51 not 05:519
	TEXT_FORMAT_HIDE_MILLISECONDS_TENS_DIGIT = 1024,		//	e.g. show 05:5 not 05:519
	TEXT_FORMAT_USE_DOT_FOR_MILLISECOND_DIVIDER = 2048		//	e.g. show 12.345 not 12:345
ENDENUM

//PURPOSE: Takes a time in milliseconds and converts it to a string. Use ~a~ to mark the position in your line of text where you want this substring inserted
NATIVE PROC ADD_TEXT_COMPONENT_SUBSTRING_TIME(INT TimeInMillseconds, TEXT_COMPONENT_TIME_FORMAT TimeFormat) = "0x28594d0d61db1278"


ENUM TEXT_COMPONENT_INTEGER_FORMAT
	INTEGER_FORMAT_COMMA_SEPARATORS = 1
ENDENUM

//PURPOSE: Takes an integer and converts it to a string. Use ~a~ to mark the position in your line of text where you want this substring inserted
NATIVE PROC ADD_TEXT_COMPONENT_FORMATTED_INTEGER(INT integerToFormat, TEXT_COMPONENT_INTEGER_FORMAT FormattingFlags) = "0x3788872a07ba04b3"


CONST_INT DISPLAY_FULL_PHONE_NUMBER -1
//PURPOSE: Use ~a~ to mark the position in your line of text where you want this substring inserted
NATIVE PROC ADD_TEXT_COMPONENT_SUBSTRING_PHONE_NUMBER(STRING PhoneNumberString, INT NumberOfCharactersToDisplay = DISPLAY_FULL_PHONE_NUMBER) = "0xfccaeceb5e052fbe"

//PURPOSE: Use ~a~ to mark the position in your line of text where you want this substring inserted
NATIVE PROC ADD_TEXT_COMPONENT_SUBSTRING_WEBSITE(STRING Website) = "0x93843c22c86afb2e"

//PURPOSE: For scripts with an onscreen keyboard, use this to display the resulting string.
//	Use ~a~ to mark the position in your line of text where you want this substring inserted
NATIVE PROC ADD_TEXT_COMPONENT_SUBSTRING_KEYBOARD_DISPLAY(STRING StringContainingKeysTypedByPlayer) = "0x702b349761f63a9e"

NATIVE PROC SET_COLOUR_OF_NEXT_TEXT_COMPONENT(HUD_COLOURS NextColour) = "0x138506d6c7564ef1"


//PURPOSE: Looks up the string associated with the given text label and counts the number of occurrences of ~1~ and ~a~ that the string contains
NATIVE PROC GET_EXPECTED_NUMBER_OF_TEXT_COMPONENTS(STRING pTextLabel, INT &ReturnNumberOfNumbers, INT &ReturnNumberOfSubstrings) = "0xdeacccb2bcd655a9"


//PURPOSE: Used by dialogue_handler.sc to get information from the speaker/listener line
NATIVE FUNC STRING GET_CHARACTER_FROM_AUDIO_CONVERSATION_FILENAME(STRING pText, INT startPoint, INT endPoint) = "0x6abf9c6f18308b78"

//PURPOSE: Does the same as GET_CHARACTER_FROM_AUDIO_CONVERSATION_FILENAME. Copies characters, but will stop when maxBytesToCopy is reached.
// If that would cause only half of a two-byte character to be copied then neither byte is copied.
NATIVE FUNC STRING GET_CHARACTER_FROM_AUDIO_CONVERSATION_FILENAME_WITH_BYTE_LIMIT(STRING pText, INT startCharacter, INT endCharacter, INT maxBytesToCopy) = "0x8bb54beea2e17ec8"

//PURPOSE: Used by dialogue_handler.sc to get information from the speaker/listener line - calculations done with bytes
NATIVE FUNC STRING GET_CHARACTER_FROM_AUDIO_CONVERSATION_FILENAME_BYTES(STRING pText, INT startPoint, INT endPoint) = "0xc98697a0990910c1"

//PURPOSE: Used by dialogue_handler.sc to get the audio filename
NATIVE FUNC STRING GET_FILENAME_FOR_AUDIO_CONVERSATION(STRING pTextLabelOfAudioConversation) = "0xaef70623d03f7b02"


#IF IS_DEBUG_BUILD
//PURPOSE: Use ~a~ to mark the position in your line of text where you want this substring inserted
NATIVE PROC ADD_TEXT_COMPONENT_SUBSTRING_LITERAL_STRING(STRING pSubStringLiteralStringToAdd) = "0x019a7e0bf2a3d979"
#ENDIF


//~>                         Print to screen commands                           <~

PROC PRINT_WITH_TWO_STRINGS_AND_NUMBER(STRING pTextLabel, STRING pShortTextLabel1, STRING pShortTextLabel2, INT iNumberToInsert, INT Duration, INT Colour, BOOL bPrintNow)
	Colour = Colour	//	Colour isn't used by the code
	BEGIN_TEXT_COMMAND_PRINT(pTextLabel)
		ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL(pShortTextLabel1)
		ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL(pShortTextLabel2)
		ADD_TEXT_COMPONENT_INTEGER(iNumberToInsert)
	END_TEXT_COMMAND_PRINT(Duration, bPrintNow)
ENDPROC

#IF __USE_NEW_PRINT_COMMANDS

//INFO: This is where most text should be displayed. The text will be placed at the bottom of the queue. It could take a wee while before your message pops up.
//  Text is a STRING
//  Duration is an INT in milliseconds (1000 = 1 sec).
//PURPOSE: Prints a line of text at the bottom of the screen. More info..
PROC PRINT(STRING pTextLabel, INT Duration, INT Colour)
	Colour = Colour	//	Colour isn't used by the code
	BEGIN_TEXT_COMMAND_PRINT(pTextLabel)
	END_TEXT_COMMAND_PRINT(Duration, FALSE)
ENDPROC


//INFO: 
//  Text is a STRING
//  Duration is an INT in milliseconds (1000 = 1 sec).
//PURPOSE: Overwrites any current message with the message. More info..
PROC PRINT_NOW(STRING pTextLabel, INT Duration, INT Colour)
	Colour = Colour	//	Colour isn't used by the code
	BEGIN_TEXT_COMMAND_PRINT(pTextLabel)
	END_TEXT_COMMAND_PRINT(Duration, TRUE)
ENDPROC


//INFO:  The text will be placed at the bottom of the queue. It could take a wee while before your message pops up.
//PARAM NOTES:Text is a STRING
//  Number is an INT. To mark where you want the number to appear use the special control code of ~1~ in the message in the text file.
//  Duration is an INT in millisecs
//PURPOSE: Prints a line of text with a number at the bottom of the screen. More info..
PROC PRINT_WITH_NUMBER(STRING pTextLabel, INT NumberToInsert, INT Duration, INT Colour)
	Colour = Colour	//	Colour isn't used by the code
	BEGIN_TEXT_COMMAND_PRINT(pTextLabel)
		ADD_TEXT_COMPONENT_INTEGER(NumberToInsert)
	END_TEXT_COMMAND_PRINT(Duration, FALSE)
ENDPROC


//INFO: 
//PARAM NOTES:Text is a STRING
//  Number is an INT. To mark where you want the number to appear use the special control code of ~1~ in the message in the text file.
//  Duration is an INT in millisecs
//PURPOSE: Overwrites any current message with the message and a number. More info..
PROC PRINT_WITH_NUMBER_NOW(STRING pTextLabel, INT NumberToInsert, INT Duration, INT Colour)
	Colour = Colour	//	Colour isn't used by the code
	BEGIN_TEXT_COMMAND_PRINT(pTextLabel)
		ADD_TEXT_COMPONENT_INTEGER(NumberToInsert)
	END_TEXT_COMMAND_PRINT(Duration, TRUE)
ENDPROC


//INFO:  The text will be placed at the bottom of the queue. It could take a wee while before your message pops up.
//PARAM NOTES:Text is a STRING
//  Number is an INT. To mark where you want the number to appear use the special control code of ~1~ in the message in the text file.
//  Duration is an INT in millisecs
//PURPOSE: Prints a line of text with 2 numbers at the bottom of the screen. More info..
PROC PRINT_WITH_2_NUMBERS(STRING pTextLabel, INT FirstNumberToInsert, INT SecondNumberToInsert, INT Duration, INT Colour)
	Colour = Colour	//	Colour isn't used by the code
	BEGIN_TEXT_COMMAND_PRINT(pTextLabel)
		ADD_TEXT_COMPONENT_INTEGER(FirstNumberToInsert)
		ADD_TEXT_COMPONENT_INTEGER(SecondNumberToInsert)
	END_TEXT_COMMAND_PRINT(Duration, FALSE)
ENDPROC


//INFO: 
//PARAM NOTES:Text is a STRING
//  Number is an INT. To mark where you want the number to appear use the special control code of ~1~ in the message in the text file.
//  Duration is an INT in millisecs
//PURPOSE: Overwrites any current message with the message and 2 numbers. More info..
PROC PRINT_WITH_2_NUMBERS_NOW(STRING pTextLabel, INT FirstNumberToInsert, INT SecondNumberToInsert, INT Duration, INT Colour)
	Colour = Colour	//	Colour isn't used by the code
	BEGIN_TEXT_COMMAND_PRINT(pTextLabel)
		ADD_TEXT_COMPONENT_INTEGER(FirstNumberToInsert)
		ADD_TEXT_COMPONENT_INTEGER(SecondNumberToInsert)
	END_TEXT_COMMAND_PRINT(Duration, TRUE)
ENDPROC


//INFO: To mark where you want the small string to appear use the special control code of ~a~ in the big message in the text file. 
//PARAM NOTES: Duration is an INT in millisecs
//PURPOSE: Prints a string inside another string string. More info..
PROC PRINT_STRING_IN_STRING(STRING pTextLabel, STRING pShortTextLabel, INT Duration, INT Colour)
	Colour = Colour	//	Colour isn't used by the code
	BEGIN_TEXT_COMMAND_PRINT(pTextLabel)
		ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL(pShortTextLabel)
	END_TEXT_COMMAND_PRINT(Duration, FALSE)
ENDPROC


//INFO: 
//PARAM NOTES: Duration is an INT in millisecs
//PURPOSE: Overwrites any current message with a string inside another string string. More info..
PROC PRINT_STRING_IN_STRING_NOW(STRING pTextLabel, STRING pShortTextLabel, INT Duration, INT Colour)
	Colour = Colour	//	Colour isn't used by the code
	BEGIN_TEXT_COMMAND_PRINT(pTextLabel)
		ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL(pShortTextLabel)
	END_TEXT_COMMAND_PRINT(Duration, TRUE)
ENDPROC


PROC PRINT_STRING_WITH_TWO_STRINGS(STRING pTextLabel, STRING pShortTextLabel1, STRING pShortTextLabel2, INT Duration, INT Colour, BOOL bPrintNow)
	Colour = Colour	//	Colour isn't used by the code
	BEGIN_TEXT_COMMAND_PRINT(pTextLabel)
		ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL(pShortTextLabel1)
		ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL(pShortTextLabel2)
	END_TEXT_COMMAND_PRINT(Duration, bPrintNow)
ENDPROC



//INFO: 
//PARAM NOTES:
//PURPOSE: Same as DISPLAY_TEXT but expect pixel space coordinates from (0,0) to (1280,720)
PROC DISPLAY_TEXT_PIXELS(FLOAT DisplayAtX, FLOAT DisplayAtY, STRING pTextLabel)
	Vector xy = CONVERT_PIXELS_TO_SCREENSPACE(DisplayAtX,DisplayAtY)
	BEGIN_TEXT_COMMAND_DISPLAY_TEXT(pTextLabel)
	END_TEXT_COMMAND_DISPLAY_TEXT(xy.x, xy.y)
ENDPROC


//INFO: DISPLAY_TEXT resets all text settings after use, so make sure you call SET_TEXT_SCALE, SET_TEXT_BACKGROUND etc. each time you call DISPLAY_TEXT. 
//PARAM NOTES: Display x & y are between 0, 0 (top left) and 1, 1 (bottom right)
//PURPOSE:  Displays text to main render target. More info..
PROC DISPLAY_TEXT(FLOAT DisplayAtX, FLOAT DisplayAtY, STRING pTextLabel, INT Stereo = 0)
	BEGIN_TEXT_COMMAND_DISPLAY_TEXT(pTextLabel)
	END_TEXT_COMMAND_DISPLAY_TEXT(DisplayAtX, DisplayAtY, Stereo)
ENDPROC


//INFO: 
//PARAM NOTES:Display x & y are between 0, 0 (top left) and 1, 1 (bottom right)
//  NumberToDisplay is an INT. Place the number in the string by using the special ~1~ code. 
//PURPOSE: Displays text with a number onscreen. More info..
PROC DISPLAY_TEXT_WITH_NUMBER(FLOAT DisplayAtX, FLOAT DisplayAtY, STRING pTextLabel, INT NumberToDisplay, INT Stereo = 0)
	BEGIN_TEXT_COMMAND_DISPLAY_TEXT(pTextLabel)
		ADD_TEXT_COMPONENT_INTEGER(NumberToDisplay)
	END_TEXT_COMMAND_DISPLAY_TEXT(DisplayAtX, DisplayAtY, Stereo)
ENDPROC


//INFO: 
//PARAM NOTES:Display x & y are between 0, 0 (top left) and 1, 1 (bottom right)
//  NumberToDisplay is an INT. Place the number in the string by using the special ~1~ code. 
//PURPOSE: Displays text with 2 numbers onscreen. More info..
PROC DISPLAY_TEXT_WITH_2_NUMBERS(FLOAT DisplayAtX, FLOAT DisplayAtY, STRING pTextLabel, INT FirstNumberToDisplay, INT SecondNumberToDisplay)
	BEGIN_TEXT_COMMAND_DISPLAY_TEXT(pTextLabel)
		ADD_TEXT_COMPONENT_INTEGER(FirstNumberToDisplay)
		ADD_TEXT_COMPONENT_INTEGER(SecondNumberToDisplay)
	END_TEXT_COMMAND_DISPLAY_TEXT(DisplayAtX, DisplayAtY)
ENDPROC


//INFO: 
//PARAM NOTES:Display x & y are between 0, 0 (top left) and 1, 1 (bottom right)
//  NumberToDisplay is an INT. Place the number in the string by using the special ~1~ code. 
//PURPOSE: Displays text with 3 numbers onscreen. More info.. 
PROC DISPLAY_TEXT_WITH_3_NUMBERS (FLOAT DisplayAtX, FLOAT DisplayAtY, STRING pTextLabel, INT FirstNumberToDisplay, INT SecondNumberToDisplay, INT ThirdNumberToDisplay)
	BEGIN_TEXT_COMMAND_DISPLAY_TEXT(pTextLabel)
		ADD_TEXT_COMPONENT_INTEGER(FirstNumberToDisplay)
		ADD_TEXT_COMPONENT_INTEGER(SecondNumberToDisplay)
		ADD_TEXT_COMPONENT_INTEGER(ThirdNumberToDisplay)
	END_TEXT_COMMAND_DISPLAY_TEXT(DisplayAtX, DisplayAtY)
ENDPROC


//INFO: 
//PARAM NOTES:FloatToDisplay is a FLOAT. Place the number in the string by using the special ~1~ code.
//  You no longer need to put ~1~.~1~ in the string. A solitary ~1~ will display the whole number and the digits after the decimal place.:
//PURPOSE: Displays on screen text with a float number.  More info..
PROC DISPLAY_TEXT_WITH_FLOAT(FLOAT DisplayAtX, FLOAT DisplayAtY, STRING pTextLabel, FLOAT FloatToDisplay, INT NumberOfDecimalPlaces)
	BEGIN_TEXT_COMMAND_DISPLAY_TEXT(pTextLabel)
		ADD_TEXT_COMPONENT_FLOAT(FloatToDisplay, NumberOfDecimalPlaces)
	END_TEXT_COMMAND_DISPLAY_TEXT(DisplayAtX, DisplayAtY)
ENDPROC


//INFO: 
//PARAM NOTES:
//PURPOSE: 
PROC DISPLAY_TEXT_WITH_STRING(FLOAT DisplayAtX, FLOAT DisplayAtY,  STRING pTextLabel, STRING pShortTextLabel)
	BEGIN_TEXT_COMMAND_DISPLAY_TEXT(pTextLabel)
		ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL(pShortTextLabel)
	END_TEXT_COMMAND_DISPLAY_TEXT(DisplayAtX, DisplayAtY)
ENDPROC


//INFO: 
//PARAM NOTES:
//PURPOSE: 
PROC DISPLAY_TEXT_WITH_TWO_STRINGS(FLOAT DisplayAtX, FLOAT DisplayAtY, STRING pTextLabel, STRING pShortTextLabel1, STRING pShortTextLabel2)
	BEGIN_TEXT_COMMAND_DISPLAY_TEXT(pTextLabel)
		ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL(pShortTextLabel1)
		ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL(pShortTextLabel2)
	END_TEXT_COMMAND_DISPLAY_TEXT(DisplayAtX, DisplayAtY)
ENDPROC


//INFO: 
//PARAM NOTES:
//PURPOSE: Displays the text with the blip name inserted as if it was a literal string
PROC DISPLAY_TEXT_WITH_BLIP_NAME(FLOAT DisplayAtX, FLOAT DisplayAtY, STRING pTextLabel, BLIP_INDEX blipIndex)
	BEGIN_TEXT_COMMAND_DISPLAY_TEXT(pTextLabel)
		ADD_TEXT_COMPONENT_SUBSTRING_BLIP_NAME(blipIndex)
	END_TEXT_COMMAND_DISPLAY_TEXT(DisplayAtX, DisplayAtY)
ENDPROC

PROC DISPLAY_TEXT_WITH_PLAYER_NAME(FLOAT PosX, FLOAT PosY, STRING TextLabel, STRING PlayerName, HUD_COLOURS Colour)
	BEGIN_TEXT_COMMAND_DISPLAY_TEXT(TextLabel)	
		IF NOT (Colour = HUD_COLOUR_PURE_WHITE)
			SET_COLOUR_OF_NEXT_TEXT_COMPONENT(Colour)
		ENDIF
		ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(PlayerName)
	END_TEXT_COMMAND_DISPLAY_TEXT(PosX, PosY)
ENDPROC

PROC DISPLAY_TEXT_WITH_TWO_PLAYER_NAMES(FLOAT PosX, FLOAT PosY, STRING TextLabel, STRING PlayerName1, STRING PlayerName2, HUD_COLOURS Colour1, HUD_COLOURS Colour2)
	BEGIN_TEXT_COMMAND_DISPLAY_TEXT(TextLabel)	
		IF NOT (Colour1 = HUD_COLOUR_PURE_WHITE)
			SET_COLOUR_OF_NEXT_TEXT_COMPONENT(Colour1)
		ENDIF
		ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(PlayerName1)
		IF NOT (Colour2 = HUD_COLOUR_PURE_WHITE)
			SET_COLOUR_OF_NEXT_TEXT_COMPONENT(Colour2)
		ENDIF
		ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(PlayerName2)
	END_TEXT_COMMAND_DISPLAY_TEXT(PosX, PosY)
ENDPROC

PROC DISPLAY_TEXT_WITH_PLAYER_NAME_AND_STRING(FLOAT PosX, FLOAT PosY, STRING TextLabel, STRING PlayerName, STRING pShortTextLabel, HUD_COLOURS Colour1, HUD_COLOURS Colour2)
	BEGIN_TEXT_COMMAND_DISPLAY_TEXT(TextLabel)		
		IF NOT (Colour1 = HUD_COLOUR_PURE_WHITE)
			SET_COLOUR_OF_NEXT_TEXT_COMPONENT(Colour1)
		ENDIF
		ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(PlayerName)		
		IF NOT (Colour2 = HUD_COLOUR_PURE_WHITE)
			SET_COLOUR_OF_NEXT_TEXT_COMPONENT(Colour2)
		ENDIF
		ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL(pShortTextLabel)
	END_TEXT_COMMAND_DISPLAY_TEXT(PosX, PosY)
ENDPROC

PROC DISPLAY_TEXT_WITH_PLAYER_NAME_AND_INT(FLOAT PosX, FLOAT PosY, STRING TextLabel, STRING PlayerName, INT iNumber, HUD_COLOURS Colour1, HUD_COLOURS Colour2)
	BEGIN_TEXT_COMMAND_DISPLAY_TEXT(TextLabel)		
		IF NOT (Colour1 = HUD_COLOUR_PURE_WHITE)
			SET_COLOUR_OF_NEXT_TEXT_COMPONENT(Colour1)
		ENDIF
		ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(PlayerName)		
		IF NOT (Colour2 = HUD_COLOUR_PURE_WHITE)
			SET_COLOUR_OF_NEXT_TEXT_COMPONENT(Colour2)
		ENDIF
		ADD_TEXT_COMPONENT_INTEGER(iNumber)
	END_TEXT_COMMAND_DISPLAY_TEXT(PosX, PosY)
ENDPROC

PROC DISPLAY_TEXT_WITH_STRING_AND_PLAYER_NAME(FLOAT PosX, FLOAT PosY, STRING TextLabel, STRING pShortTextLabel, STRING PlayerName, HUD_COLOURS Colour1, HUD_COLOURS Colour2)
	BEGIN_TEXT_COMMAND_DISPLAY_TEXT(TextLabel)		
		IF NOT (Colour1 = HUD_COLOUR_PURE_WHITE)
			SET_COLOUR_OF_NEXT_TEXT_COMPONENT(Colour1)
		ENDIF
		ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL(pShortTextLabel)
		IF NOT (Colour2 = HUD_COLOUR_PURE_WHITE)
			SET_COLOUR_OF_NEXT_TEXT_COMPONENT(Colour2)
		ENDIF
		ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(PlayerName)
	END_TEXT_COMMAND_DISPLAY_TEXT(PosX, PosY)
ENDPROC

PROC DISPLAY_TEXT_WITH_STRING_AND_INT(FLOAT PosX, FLOAT PosY, STRING TextLabel, STRING pShortTextLabel, INT iNumber1, HUD_COLOURS Colour)
	BEGIN_TEXT_COMMAND_DISPLAY_TEXT(TextLabel)		
		IF NOT (Colour = HUD_COLOUR_PURE_WHITE)
			SET_COLOUR_OF_NEXT_TEXT_COMPONENT(Colour)
		ENDIF
		ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL(pShortTextLabel)
		ADD_TEXT_COMPONENT_INTEGER(iNumber1)
	END_TEXT_COMMAND_DISPLAY_TEXT(PosX, PosY)
ENDPROC

PROC DISPLAY_TEXT_WITH_STRING_AND_TWO_INTS(FLOAT PosX, FLOAT PosY, STRING TextLabel, STRING pShortTextLabel, INT iNumber1, INT iNumber2, HUD_COLOURS Colour)
	BEGIN_TEXT_COMMAND_DISPLAY_TEXT(TextLabel)		
		IF NOT (Colour = HUD_COLOUR_PURE_WHITE)
			SET_COLOUR_OF_NEXT_TEXT_COMPONENT(Colour)
		ENDIF
		ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL(pShortTextLabel)
		ADD_TEXT_COMPONENT_INTEGER(iNumber1)
		ADD_TEXT_COMPONENT_INTEGER(iNumber2)
	END_TEXT_COMMAND_DISPLAY_TEXT(PosX, PosY)
ENDPROC

//INFO: The command uses default parameters so if you only need to check a message that takes no extra strings or numbers then you'll only have to specify the first parameter. 
//PARAM NOTES:
//PURPOSE: Checks that a message is being displayed filtered by the print params. More info
FUNC BOOL IS_THIS_PRINT_BEING_DISPLAYED(STRING pTextLabel, SCRIPT_PRINT_EXTRA_PARAMS ExtraParamsFlag=SCRIPT_PRINT_NO_EXTRA_PARAMS, STRING pSubStringTextLabel=NULL)
	BEGIN_TEXT_COMMAND_IS_MESSAGE_DISPLAYED(pTextLabel)
		IF ExtraParamsFlag = SCRIPT_PRINT_ONE_SUBSTRING
			ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL(pSubStringTextLabel)
		ENDIF
	RETURN END_TEXT_COMMAND_IS_MESSAGE_DISPLAYED()
ENDFUNC



FUNC FLOAT GET_STRING_WIDTH(STRING pTextLabel)
	BEGIN_TEXT_COMMAND_GET_SCREEN_WIDTH_OF_DISPLAY_TEXT(pTextLabel)
	RETURN END_TEXT_COMMAND_GET_SCREEN_WIDTH_OF_DISPLAY_TEXT(TRUE)
ENDFUNC


FUNC FLOAT GET_STRING_WIDTH_WITH_NUMBER(STRING pTextLabel, INT NumberToInsert)
	BEGIN_TEXT_COMMAND_GET_SCREEN_WIDTH_OF_DISPLAY_TEXT(pTextLabel)
		ADD_TEXT_COMPONENT_INTEGER(NumberToInsert)
	RETURN END_TEXT_COMMAND_GET_SCREEN_WIDTH_OF_DISPLAY_TEXT(TRUE)
ENDFUNC

FUNC FLOAT GET_STRING_WIDTH_PLAYER_NAME(STRING pPlayerName)
	BEGIN_TEXT_COMMAND_GET_SCREEN_WIDTH_OF_DISPLAY_TEXT("STRING")
		ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(pPlayerName)
	RETURN END_TEXT_COMMAND_GET_SCREEN_WIDTH_OF_DISPLAY_TEXT(TRUE)
ENDFUNC


//INFO: Pass in an empty string "" for pSubString2Label if you only want to insert one substring. 
//PARAM NOTES:
//PURPOSE: gets the number of lines to display the text with substrings. More info..
/*
FUNC INT GET_NUMBER_LINES_WITH_SUBSTRINGS(FLOAT DisplayAtX, FLOAT DisplayAtY, STRING pTextLabel, STRING pSubString1Label, STRING pSubString2Label)
	BEGIN_TEXT_COMMAND_GET_NUMBER_OF_LINES_FOR_STRING(pTextLabel)
	
	IF NOT IS_STRING_NULL(pSubString1Label)
//		IF GET_LENGTH_OF_LITERAL_STRING(pSubString1Label) > 0
			ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL(pSubString1Label)
//		ENDIF
	ENDIF

	IF NOT IS_STRING_NULL(pSubString2Label)
//		IF GET_LENGTH_OF_LITERAL_STRING(pSubString2Label) > 0
			ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL(pSubString2Label)
//		ENDIF
	ENDIF

	RETURN END_TEXT_COMMAND_GET_NUMBER_OF_LINES_FOR_STRING(DisplayAtX, DisplayAtY)
ENDFUNC
*/


PROC PRINT_HELP(STRING pTextLabel,INT iOverrideTime = -1)
	BEGIN_TEXT_COMMAND_DISPLAY_HELP(pTextLabel)
	END_TEXT_COMMAND_DISPLAY_HELP(HELP_TEXT_SLOT_STANDARD, FALSE, TRUE,iOverrideTime)
ENDPROC

PROC PRINT_HELP_NO_SOUND(STRING pTextLabel,INT iOverrideTime = -1)
	BEGIN_TEXT_COMMAND_DISPLAY_HELP(pTextLabel)
	END_TEXT_COMMAND_DISPLAY_HELP(HELP_TEXT_SLOT_STANDARD, FALSE, FALSE,iOverrideTime)
ENDPROC

PROC PRINT_HELP_FOREVER(STRING pTextLabel)
	BEGIN_TEXT_COMMAND_DISPLAY_HELP(pTextLabel)
	END_TEXT_COMMAND_DISPLAY_HELP(HELP_TEXT_SLOT_STANDARD, TRUE, TRUE)
ENDPROC

PROC PRINT_HELP_FOREVER_NO_SOUND(STRING pTextLabel)
	BEGIN_TEXT_COMMAND_DISPLAY_HELP(pTextLabel)
	END_TEXT_COMMAND_DISPLAY_HELP(HELP_TEXT_SLOT_STANDARD, TRUE, FALSE)
ENDPROC


//INFO: NumberToDisplay can be an integer or a variable that has been declared as an INT. To mark where you want the number to appear use the special control code of ~1~ in the message in the text file. 
//PARAM NOTES:
//PURPOSE: Displays the message with a number in a box on the left of the screen for the default help time. More info..
PROC PRINT_HELP_WITH_NUMBER(STRING pTextLabel, INT NumberToDisplay,INT iOverrideTime = -1)
	BEGIN_TEXT_COMMAND_DISPLAY_HELP(pTextLabel)
		ADD_TEXT_COMPONENT_INTEGER(NumberToDisplay)
	END_TEXT_COMMAND_DISPLAY_HELP(HELP_TEXT_SLOT_STANDARD, FALSE, TRUE, iOverrideTime)
ENDPROC

PROC PRINT_HELP_FOREVER_WITH_NUMBER(STRING pTextLabel, INT NumberToDisplay)
	BEGIN_TEXT_COMMAND_DISPLAY_HELP(pTextLabel)
		ADD_TEXT_COMPONENT_INTEGER(NumberToDisplay)
	END_TEXT_COMMAND_DISPLAY_HELP(HELP_TEXT_SLOT_STANDARD, TRUE, TRUE)
ENDPROC

PROC PRINT_HELP_FOREVER_WITH_NUMBER_NO_SOUND(STRING pTextLabel, INT NumberToDisplay)
	BEGIN_TEXT_COMMAND_DISPLAY_HELP(pTextLabel)
		ADD_TEXT_COMPONENT_INTEGER(NumberToDisplay)
	END_TEXT_COMMAND_DISPLAY_HELP(HELP_TEXT_SLOT_STANDARD, TRUE, FALSE)
ENDPROC

PROC PRINT_HELP_FOREVER_WITH_2_NUMBERS(STRING pTextLabel, INT FirstNumberToDisplay, INT SecondNumberToDisplay)
	BEGIN_TEXT_COMMAND_DISPLAY_HELP(pTextLabel)
		ADD_TEXT_COMPONENT_INTEGER(FirstNumberToDisplay)
		ADD_TEXT_COMPONENT_INTEGER(SecondNumberToDisplay)
	END_TEXT_COMMAND_DISPLAY_HELP(HELP_TEXT_SLOT_STANDARD, TRUE, TRUE)
ENDPROC

PROC PRINT_HELP_FOREVER_WITH_2_NUMBERS_NO_SOUND(STRING pTextLabel, INT FirstNumberToDisplay, INT SecondNumberToDisplay)
	BEGIN_TEXT_COMMAND_DISPLAY_HELP(pTextLabel)
		ADD_TEXT_COMPONENT_INTEGER(FirstNumberToDisplay)
		ADD_TEXT_COMPONENT_INTEGER(SecondNumberToDisplay)
	END_TEXT_COMMAND_DISPLAY_HELP(HELP_TEXT_SLOT_STANDARD, TRUE, FALSE)
ENDPROC

PROC PRINT_HELP_FOREVER_WITH_3_NUMBERS(STRING pTextLabel, INT FirstNumberToDisplay, INT SecondNumberToDisplay, INT ThirdNumberToDisplay)
	BEGIN_TEXT_COMMAND_DISPLAY_HELP(pTextLabel)
		ADD_TEXT_COMPONENT_INTEGER(FirstNumberToDisplay)
		ADD_TEXT_COMPONENT_INTEGER(SecondNumberToDisplay)
		ADD_TEXT_COMPONENT_INTEGER(ThirdNumberToDisplay)
	END_TEXT_COMMAND_DISPLAY_HELP(HELP_TEXT_SLOT_STANDARD, TRUE, TRUE)
ENDPROC

PROC PRINT_HELP_FOREVER_WITH_3_NUMBERS_NO_SOUND(STRING pTextLabel, INT FirstNumberToDisplay, INT SecondNumberToDisplay, INT ThirdNumberToDisplay)
	BEGIN_TEXT_COMMAND_DISPLAY_HELP(pTextLabel)
		ADD_TEXT_COMPONENT_INTEGER(FirstNumberToDisplay)
		ADD_TEXT_COMPONENT_INTEGER(SecondNumberToDisplay)
		ADD_TEXT_COMPONENT_INTEGER(ThirdNumberToDisplay)
	END_TEXT_COMMAND_DISPLAY_HELP(HELP_TEXT_SLOT_STANDARD, TRUE, FALSE)
ENDPROC

PROC PRINT_HELP_WITH_STRING(STRING TextLabel, STRING SubStringTextLabel,INT iOverrideTime = -1)
	BEGIN_TEXT_COMMAND_DISPLAY_HELP(TextLabel)
		ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL(SubStringTextLabel)
	END_TEXT_COMMAND_DISPLAY_HELP(HELP_TEXT_SLOT_STANDARD, FALSE, TRUE,iOverrideTime)
ENDPROC

PROC PRINT_HELP_WITH_2_STRINGS(STRING TextLabel, STRING SubStringTextLabel1, STRING SubStringTextLabel2,INT iOverrideTime = -1)
	BEGIN_TEXT_COMMAND_DISPLAY_HELP(TextLabel)
		ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL(SubStringTextLabel1)
		ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL(SubStringTextLabel2)
	END_TEXT_COMMAND_DISPLAY_HELP(HELP_TEXT_SLOT_STANDARD, FALSE, TRUE,iOverrideTime)
ENDPROC

PROC PRINT_HELP_WITH_STRING_NO_SOUND(STRING TextLabel, STRING SubStringTextLabel,INT iOverrideTime = -1)
	BEGIN_TEXT_COMMAND_DISPLAY_HELP(TextLabel)
		ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL(SubStringTextLabel)
	END_TEXT_COMMAND_DISPLAY_HELP(HELP_TEXT_SLOT_STANDARD, FALSE, FALSE,iOverrideTime)
ENDPROC


PROC PRINT_HELP_FOREVER_WITH_STRING(STRING TextLabel, STRING SubStringTextLabel)
	BEGIN_TEXT_COMMAND_DISPLAY_HELP(TextLabel)
		ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL(SubStringTextLabel)
	END_TEXT_COMMAND_DISPLAY_HELP(HELP_TEXT_SLOT_STANDARD, TRUE, TRUE)
ENDPROC


PROC PRINT_HELP_FOREVER_WITH_STRING_NO_SOUND(STRING TextLabel, STRING SubStringTextLabel)
	BEGIN_TEXT_COMMAND_DISPLAY_HELP(TextLabel)
		ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL(SubStringTextLabel)
	END_TEXT_COMMAND_DISPLAY_HELP(HELP_TEXT_SLOT_STANDARD, TRUE, FALSE)
ENDPROC



PROC PRINT_HELP_WITH_STRING_AND_NUMBER(STRING TextLabel, STRING SubStringTextLabel, INT NumberToDisplay,INT iOverrideTime = -1)
	BEGIN_TEXT_COMMAND_DISPLAY_HELP(TextLabel)
		ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL(SubStringTextLabel)
		ADD_TEXT_COMPONENT_INTEGER(NumberToDisplay)
	END_TEXT_COMMAND_DISPLAY_HELP(HELP_TEXT_SLOT_STANDARD, FALSE, TRUE, iOverrideTime)
ENDPROC


PROC PRINT_HELP_FOREVER_WITH_STRING_AND_NUMBER(STRING TextLabel, STRING SubStringTextLabel, INT NumberToDisplay)
	BEGIN_TEXT_COMMAND_DISPLAY_HELP(TextLabel)
		ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL(SubStringTextLabel)
		ADD_TEXT_COMPONENT_INTEGER(NumberToDisplay)
	END_TEXT_COMMAND_DISPLAY_HELP(HELP_TEXT_SLOT_STANDARD, TRUE, TRUE)
ENDPROC

PROC PRINT_HELP_FOREVER_WITH_STRING_AND_NUMBER_NO_SOUND(STRING TextLabel, STRING SubStringTextLabel, INT NumberToDisplay)
	BEGIN_TEXT_COMMAND_DISPLAY_HELP(TextLabel)
		ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL(SubStringTextLabel)
		ADD_TEXT_COMPONENT_INTEGER(NumberToDisplay)
	END_TEXT_COMMAND_DISPLAY_HELP(HELP_TEXT_SLOT_STANDARD, TRUE, FALSE)
ENDPROC

PROC PRINT_HELP_FOREVER_WITH_STRING_AND_2_NUMBERS(STRING TextLabel, STRING SubStringTextLabel, INT NumberToDisplay1, INT NumberToDisplay2)
	BEGIN_TEXT_COMMAND_DISPLAY_HELP(TextLabel)
		ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL(SubStringTextLabel)
		ADD_TEXT_COMPONENT_INTEGER(NumberToDisplay1)
		ADD_TEXT_COMPONENT_INTEGER(NumberToDisplay2)
	END_TEXT_COMMAND_DISPLAY_HELP(HELP_TEXT_SLOT_STANDARD, TRUE, TRUE)
ENDPROC

PROC PRINT_HELP_FOREVER_WITH_STRING_AND_2_NUMBERS_NO_SOUND(STRING TextLabel, STRING SubStringTextLabel, INT NumberToDisplay1, INT NumberToDisplay2)
	BEGIN_TEXT_COMMAND_DISPLAY_HELP(TextLabel)
		ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL(SubStringTextLabel)
		ADD_TEXT_COMPONENT_INTEGER(NumberToDisplay1)
		ADD_TEXT_COMPONENT_INTEGER(NumberToDisplay2)
	END_TEXT_COMMAND_DISPLAY_HELP(HELP_TEXT_SLOT_STANDARD, TRUE, FALSE)
ENDPROC

PROC PRINT_HELP_FOREVER_WITH_2_STRINGS(STRING TextLabel, STRING SubStringTextLabel1, STRING SubStringTextLabel2)
	BEGIN_TEXT_COMMAND_DISPLAY_HELP(TextLabel)
		ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL(SubStringTextLabel1)
		ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL(SubStringTextLabel2)
	END_TEXT_COMMAND_DISPLAY_HELP(HELP_TEXT_SLOT_STANDARD, TRUE, TRUE)
ENDPROC


PROC PRINT_HELP_FOREVER_WITH_2_STRINGS_NO_SOUND(STRING TextLabel, STRING SubStringTextLabel1, STRING SubStringTextLabel2)
	BEGIN_TEXT_COMMAND_DISPLAY_HELP(TextLabel)
		ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL(SubStringTextLabel1)
		ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL(SubStringTextLabel2)
	END_TEXT_COMMAND_DISPLAY_HELP(HELP_TEXT_SLOT_STANDARD, TRUE, FALSE)
ENDPROC

PROC PRINT_HELP_FOREVER_WITH_2_STRINGS_AND_NUMBER(STRING TextLabel, STRING SubStringTextLabel1, STRING SubStringTextLabel2, INT NumberToDisplay)
	BEGIN_TEXT_COMMAND_DISPLAY_HELP(TextLabel)
		ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL(SubStringTextLabel1)
		ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL(SubStringTextLabel2)
		ADD_TEXT_COMPONENT_INTEGER(NumberToDisplay)
	END_TEXT_COMMAND_DISPLAY_HELP(HELP_TEXT_SLOT_STANDARD, TRUE, TRUE)
ENDPROC

PROC PRINT_HELP_FOREVER_WITH_2_STRINGS_AND_NUMBER_NO_SOUND(STRING TextLabel, STRING SubStringTextLabel1, STRING SubStringTextLabel2, INT NumberToDisplay)
	BEGIN_TEXT_COMMAND_DISPLAY_HELP(TextLabel)
		ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL(SubStringTextLabel1)
		ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL(SubStringTextLabel2)
		ADD_TEXT_COMPONENT_INTEGER(NumberToDisplay)
	END_TEXT_COMMAND_DISPLAY_HELP(HELP_TEXT_SLOT_STANDARD, TRUE, FALSE)
ENDPROC

PROC PRINT_HELP_WITH_PLAYER_NAME(STRING TextLabel, STRING PlayerName, HUD_COLOURS Colour,INT iOverrideTime = -1)
	BEGIN_TEXT_COMMAND_DISPLAY_HELP(TextLabel)	
		IF NOT (Colour = HUD_COLOUR_PURE_WHITE)
			SET_COLOUR_OF_NEXT_TEXT_COMPONENT(Colour)
		ENDIF	
		ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(PlayerName)
	END_TEXT_COMMAND_DISPLAY_HELP(HELP_TEXT_SLOT_STANDARD, FALSE, TRUE, iOverrideTime)
ENDPROC

PROC PRINT_HELP_WITH_PLAYER_NAME_NO_SOUND(STRING TextLabel, STRING PlayerName, HUD_COLOURS Colour,INT iOverrideTime = -1)
	BEGIN_TEXT_COMMAND_DISPLAY_HELP(TextLabel)	
		IF NOT (Colour = HUD_COLOUR_PURE_WHITE)
			SET_COLOUR_OF_NEXT_TEXT_COMPONENT(Colour)
		ENDIF	
		ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(PlayerName)
	END_TEXT_COMMAND_DISPLAY_HELP(HELP_TEXT_SLOT_STANDARD, FALSE, FALSE, iOverrideTime)
ENDPROC

PROC PRINT_HELP_FOREVER_WITH_PLAYER_NAME(STRING TextLabel, STRING PlayerName, HUD_COLOURS Colour)
	BEGIN_TEXT_COMMAND_DISPLAY_HELP(TextLabel)	
		IF NOT (Colour = HUD_COLOUR_PURE_WHITE)
			SET_COLOUR_OF_NEXT_TEXT_COMPONENT(Colour)
		ENDIF	
		ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(PlayerName)
	END_TEXT_COMMAND_DISPLAY_HELP(HELP_TEXT_SLOT_STANDARD, TRUE, TRUE)
ENDPROC

PROC PRINT_HELP_FOREVER_WITH_TWO_PLAYER_NAMES(STRING TextLabel, STRING PlayerName, STRING PlayerName2, HUD_COLOURS Colour)
	BEGIN_TEXT_COMMAND_DISPLAY_HELP(TextLabel)	
		IF NOT (Colour = HUD_COLOUR_PURE_WHITE)
			SET_COLOUR_OF_NEXT_TEXT_COMPONENT(Colour)
		ENDIF	
		ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(PlayerName)
		ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(PlayerName2)
	END_TEXT_COMMAND_DISPLAY_HELP(HELP_TEXT_SLOT_STANDARD, TRUE, TRUE)
ENDPROC

PROC PRINT_HELP_FOREVER_WITH_THREE_PLAYER_NAMES(STRING TextLabel, STRING PlayerName, STRING PlayerName2, STRING PlayerName3, HUD_COLOURS Colour)
	BEGIN_TEXT_COMMAND_DISPLAY_HELP(TextLabel)	
		IF NOT (Colour = HUD_COLOUR_PURE_WHITE)
			SET_COLOUR_OF_NEXT_TEXT_COMPONENT(Colour)
		ENDIF	
		ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(PlayerName)
		ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(PlayerName2)
		ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(PlayerName3)
	END_TEXT_COMMAND_DISPLAY_HELP(HELP_TEXT_SLOT_STANDARD, TRUE, TRUE)
ENDPROC

FUNC BOOL IS_THIS_HELP_MESSAGE_BEING_DISPLAYED(STRING pTextLabel)
	BEGIN_TEXT_COMMAND_IS_THIS_HELP_MESSAGE_BEING_DISPLAYED(pTextLabel)
	RETURN END_TEXT_COMMAND_IS_THIS_HELP_MESSAGE_BEING_DISPLAYED(HELP_TEXT_SLOT_STANDARD)
ENDFUNC


FUNC BOOL IS_THIS_HELP_MESSAGE_WITH_NUMBER_BEING_DISPLAYED(STRING pTextLabel, INT NumberToInsert)
	BEGIN_TEXT_COMMAND_IS_THIS_HELP_MESSAGE_BEING_DISPLAYED(pTextLabel)
		ADD_TEXT_COMPONENT_INTEGER(NumberToInsert)
	RETURN END_TEXT_COMMAND_IS_THIS_HELP_MESSAGE_BEING_DISPLAYED(HELP_TEXT_SLOT_STANDARD)
ENDFUNC


FUNC BOOL IS_THIS_HELP_MESSAGE_WITH_STRING_BEING_DISPLAYED(STRING TextLabel, STRING SubStringTextLabel)
	BEGIN_TEXT_COMMAND_IS_THIS_HELP_MESSAGE_BEING_DISPLAYED(TextLabel)
		ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL(SubStringTextLabel)
	RETURN END_TEXT_COMMAND_IS_THIS_HELP_MESSAGE_BEING_DISPLAYED(HELP_TEXT_SLOT_STANDARD)
ENDFUNC

FUNC BOOL IS_THIS_HELP_MESSAGE_WITH_2_STRINGS_BEING_DISPLAYED(STRING TextLabel, STRING SubStringTextLabel, STRING SubStringTextLabel1)
	BEGIN_TEXT_COMMAND_IS_THIS_HELP_MESSAGE_BEING_DISPLAYED(TextLabel)
		ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL(SubStringTextLabel)
		ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL(SubStringTextLabel1)
	RETURN END_TEXT_COMMAND_IS_THIS_HELP_MESSAGE_BEING_DISPLAYED(HELP_TEXT_SLOT_STANDARD)
ENDFUNC

FUNC BOOL IS_THIS_HELP_MESSAGE_WITH_3_STRINGS_BEING_DISPLAYED(STRING TextLabel, STRING SubStringTextLabel, STRING SubStringTextLabel1, STRING SubStringTextLabel2)
	BEGIN_TEXT_COMMAND_IS_THIS_HELP_MESSAGE_BEING_DISPLAYED(TextLabel)
		ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL(SubStringTextLabel)
		ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL(SubStringTextLabel1)
		ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL(SubStringTextLabel2)
	RETURN END_TEXT_COMMAND_IS_THIS_HELP_MESSAGE_BEING_DISPLAYED(HELP_TEXT_SLOT_STANDARD)
ENDFUNC

FUNC BOOL IS_THIS_HELP_MESSAGE_WITH_2_STRINGS_AND_NUMBER_BEING_DISPLAYED(STRING TextLabel, STRING SubStringTextLabel1, STRING SubStringTextLabel2, INT Number)
	BEGIN_TEXT_COMMAND_IS_THIS_HELP_MESSAGE_BEING_DISPLAYED(TextLabel)
		ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL(SubStringTextLabel1)
		ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL(SubStringTextLabel2)
		ADD_TEXT_COMPONENT_INTEGER(Number)
	RETURN END_TEXT_COMMAND_IS_THIS_HELP_MESSAGE_BEING_DISPLAYED(HELP_TEXT_SLOT_STANDARD)
ENDFUNC

FUNC BOOL IS_THIS_HELP_MESSAGE_WITH_STRING_AND_2_NUMBERS_BEING_DISPLAYED(STRING TextLabel, STRING SubStringTextLabel, INT Number1, INT Number2)
	BEGIN_TEXT_COMMAND_IS_THIS_HELP_MESSAGE_BEING_DISPLAYED(TextLabel)
		ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL(SubStringTextLabel)
		ADD_TEXT_COMPONENT_INTEGER(Number1)
		ADD_TEXT_COMPONENT_INTEGER(Number2)
	RETURN END_TEXT_COMMAND_IS_THIS_HELP_MESSAGE_BEING_DISPLAYED(HELP_TEXT_SLOT_STANDARD)
ENDFUNC

FUNC BOOL IS_THIS_HELP_MESSAGE_WITH_PLAYER_NAME_BEING_DISPLAYED(STRING TextLabel, STRING PlayerName)
	BEGIN_TEXT_COMMAND_IS_THIS_HELP_MESSAGE_BEING_DISPLAYED(TextLabel)
		ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(PlayerName)
	RETURN END_TEXT_COMMAND_IS_THIS_HELP_MESSAGE_BEING_DISPLAYED(HELP_TEXT_SLOT_STANDARD)
ENDFUNC

FUNC BOOL IS_THIS_HELP_MESSAGE_WITH_STRING_AND_NUMBER_BEING_DISPLAYED(STRING TextLabel, STRING SubStringTextLabel, INT Number)
	BEGIN_TEXT_COMMAND_IS_THIS_HELP_MESSAGE_BEING_DISPLAYED(TextLabel)
		ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL(SubStringTextLabel)
		ADD_TEXT_COMPONENT_INTEGER(Number)
	RETURN END_TEXT_COMMAND_IS_THIS_HELP_MESSAGE_BEING_DISPLAYED(HELP_TEXT_SLOT_STANDARD)
ENDFUNC

FUNC BOOL IS_THIS_HELP_MESSAGE_WITH_3_NUMBERS_BEING_DISPLAYED(STRING TextLabel, INT Number1, INT Number2, INT Number3)
	BEGIN_TEXT_COMMAND_IS_THIS_HELP_MESSAGE_BEING_DISPLAYED(TextLabel)
		ADD_TEXT_COMPONENT_INTEGER(Number1)
		ADD_TEXT_COMPONENT_INTEGER(Number2)
		ADD_TEXT_COMPONENT_INTEGER(Number3)
	RETURN END_TEXT_COMMAND_IS_THIS_HELP_MESSAGE_BEING_DISPLAYED(HELP_TEXT_SLOT_STANDARD)
ENDFUNC

PROC DISPLAY_FLOATING_HELP_TEXT(eHELP_TEXT_FLOATING_ID id, STRING pTextLabel, BOOL bDisplayForever = FALSE,INT iOverrideTime = -1)
	BEGIN_TEXT_COMMAND_DISPLAY_HELP(pTextLabel)
	END_TEXT_COMMAND_DISPLAY_HELP(INT_TO_ENUM(eHelpMessageId, 1 + ENUM_TO_INT(id)), bDisplayForever, FALSE,iOverrideTime)
ENDPROC


PROC DISPLAY_FLOATING_HELP_TEXT_WITH_NUMBER(eHELP_TEXT_FLOATING_ID id, STRING pTextLabel, INT iNumber,INT iOverrideTime = -1)
	BEGIN_TEXT_COMMAND_DISPLAY_HELP(pTextLabel)
		ADD_TEXT_COMPONENT_INTEGER(iNumber)
	END_TEXT_COMMAND_DISPLAY_HELP(INT_TO_ENUM(eHelpMessageId, 1 + ENUM_TO_INT(id)), FALSE, FALSE, iOverrideTime)
ENDPROC


PROC DISPLAY_FLOATING_HELP_TEXT_WITH_STRING(eHELP_TEXT_FLOATING_ID id, STRING pTextLabel, STRING pSubString,INT iOverrideTime = -1)
	BEGIN_TEXT_COMMAND_DISPLAY_HELP(pTextLabel)
		ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL(pSubString)
	END_TEXT_COMMAND_DISPLAY_HELP(INT_TO_ENUM(eHelpMessageId, 1 + ENUM_TO_INT(id)), FALSE, FALSE,iOverrideTime)
ENDPROC


PROC DISPLAY_FLOATING_HELP_TEXT_WITH_STRING_AND_NUMBER(eHELP_TEXT_FLOATING_ID id, STRING pTextLabel, STRING pSubStringTextLabel, INT iNumber,INT iOverrideTime = -1)
	BEGIN_TEXT_COMMAND_DISPLAY_HELP(pTextLabel)
		ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL(pSubStringTextLabel)
		ADD_TEXT_COMPONENT_INTEGER(iNumber)
	END_TEXT_COMMAND_DISPLAY_HELP(INT_TO_ENUM(eHelpMessageId, 1 + ENUM_TO_INT(id)), FALSE, FALSE,iOverrideTime)
ENDPROC



FUNC BOOL IS_THIS_FLOATING_HELP_TEXT_BEING_DISPLAYED(eHELP_TEXT_FLOATING_ID id, STRING pTextLabel)
	BEGIN_TEXT_COMMAND_IS_THIS_HELP_MESSAGE_BEING_DISPLAYED(pTextLabel)
	RETURN END_TEXT_COMMAND_IS_THIS_HELP_MESSAGE_BEING_DISPLAYED(INT_TO_ENUM(eHelpMessageId, 1 + ENUM_TO_INT(id)))
ENDFUNC


FUNC BOOL IS_THIS_FLOATING_HELP_TEXT_WITH_NUMBER_BEING_DISPLAYED(eHELP_TEXT_FLOATING_ID id, STRING pTextLabel, INT iNumber)
	BEGIN_TEXT_COMMAND_IS_THIS_HELP_MESSAGE_BEING_DISPLAYED(pTextLabel)
		ADD_TEXT_COMPONENT_INTEGER(iNumber)
	RETURN END_TEXT_COMMAND_IS_THIS_HELP_MESSAGE_BEING_DISPLAYED(INT_TO_ENUM(eHelpMessageId, 1 + ENUM_TO_INT(id)))
ENDFUNC


FUNC BOOL IS_THIS_FLOATING_HELP_TEXT_WITH_STRING_BEING_DISPLAYED(eHELP_TEXT_FLOATING_ID id, STRING pTextLabel, STRING pSubStringTextLabel)
	BEGIN_TEXT_COMMAND_IS_THIS_HELP_MESSAGE_BEING_DISPLAYED(pTextLabel)
		ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL(pSubStringTextLabel)
	RETURN END_TEXT_COMMAND_IS_THIS_HELP_MESSAGE_BEING_DISPLAYED(INT_TO_ENUM(eHelpMessageId, 1 + ENUM_TO_INT(id)))
ENDFUNC


FUNC BOOL IS_THIS_FLOATING_HELP_TEXT_WITH_STRING_AND_NUM_BEING_DISPLAYED(eHELP_TEXT_FLOATING_ID id, STRING pTextLabel, STRING pSubStringTextLabel, INT iNumber)
	BEGIN_TEXT_COMMAND_IS_THIS_HELP_MESSAGE_BEING_DISPLAYED(pTextLabel)
		ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL(pSubStringTextLabel)
		ADD_TEXT_COMPONENT_INTEGER(iNumber)
	RETURN END_TEXT_COMMAND_IS_THIS_HELP_MESSAGE_BEING_DISPLAYED(INT_TO_ENUM(eHelpMessageId, 1 + ENUM_TO_INT(id)))
ENDFUNC


#IF IS_DEBUG_BUILD

PROC PRINT_STRING_WITH_LITERAL_STRING(STRING pTextLabel, STRING pLiteralString, INT Duration, INT Colour)
	Colour = Colour	//	Colour isn't used by the code
	BEGIN_TEXT_COMMAND_PRINT(pTextLabel)
		ADD_TEXT_COMPONENT_SUBSTRING_LITERAL_STRING(pLiteralString)
	END_TEXT_COMMAND_PRINT(Duration, FALSE)
ENDPROC


PROC PRINT_STRING_WITH_LITERAL_STRING_NOW(STRING pTextLabel, STRING pLiteralString, INT Duration, INT Colour)
	Colour = Colour	//	Colour isn't used by the code
	BEGIN_TEXT_COMMAND_PRINT(pTextLabel)
		ADD_TEXT_COMPONENT_SUBSTRING_LITERAL_STRING(pLiteralString)
	END_TEXT_COMMAND_PRINT(Duration, TRUE)
ENDPROC


PROC PRINT_STRING_WITH_TWO_LITERAL_STRINGS(STRING pTextLabel, STRING pLiteralString1, STRING pLiteralString2, INT Duration, INT Colour)
	Colour = Colour	//	Colour isn't used by the code
	BEGIN_TEXT_COMMAND_PRINT(pTextLabel)
		ADD_TEXT_COMPONENT_SUBSTRING_LITERAL_STRING(pLiteralString1)
		ADD_TEXT_COMPONENT_SUBSTRING_LITERAL_STRING(pLiteralString2)
	END_TEXT_COMMAND_PRINT(Duration, FALSE)
ENDPROC


PROC PRINT_STRING_WITH_TWO_LITERAL_STRINGS_NOW(STRING pTextLabel, STRING pLiteralString1, STRING pLiteralString2, INT Duration, INT Colour)
	Colour = Colour	//	Colour isn't used by the code
	BEGIN_TEXT_COMMAND_PRINT(pTextLabel)
		ADD_TEXT_COMPONENT_SUBSTRING_LITERAL_STRING(pLiteralString1)
		ADD_TEXT_COMPONENT_SUBSTRING_LITERAL_STRING(pLiteralString2)
	END_TEXT_COMMAND_PRINT(Duration, TRUE)
ENDPROC


PROC DISPLAY_TEXT_WITH_LITERAL_STRING(FLOAT DisplayAtX, FLOAT DisplayAtY, STRING pTextLabel, STRING pLiteralString)
	BEGIN_TEXT_COMMAND_DISPLAY_TEXT(pTextLabel)
		ADD_TEXT_COMPONENT_SUBSTRING_LITERAL_STRING(pLiteralString)
	END_TEXT_COMMAND_DISPLAY_TEXT(DisplayAtX, DisplayAtY)
ENDPROC


PROC DISPLAY_TEXT_WITH_TWO_LITERAL_STRINGS(FLOAT DisplayAtX, FLOAT DisplayAtY, STRING pTextLabel, STRING pLiteralString1, STRING pLiteralString2)
	BEGIN_TEXT_COMMAND_DISPLAY_TEXT(pTextLabel)
		ADD_TEXT_COMPONENT_SUBSTRING_LITERAL_STRING(pLiteralString1)
		ADD_TEXT_COMPONENT_SUBSTRING_LITERAL_STRING(pLiteralString2)
	END_TEXT_COMMAND_DISPLAY_TEXT(DisplayAtX, DisplayAtY)
ENDPROC


FUNC FLOAT GET_STRING_WIDTH_WITH_STRING (STRING pTextLabel, STRING pSmallString)
	BEGIN_TEXT_COMMAND_GET_SCREEN_WIDTH_OF_DISPLAY_TEXT(pTextLabel)
		ADD_TEXT_COMPONENT_SUBSTRING_LITERAL_STRING(pSmallString)
	RETURN END_TEXT_COMMAND_GET_SCREEN_WIDTH_OF_DISPLAY_TEXT(TRUE)
ENDFUNC


/*
PROC ADD_TO_PREVIOUS_BRIEF(STRING pTextLabel, STRING pExtraText1 = NULL, STRING pExtraText2 = NULL)
	BEGIN_TEXT_COMMAND_ADD_DIRECTLY_TO_PREVIOUS_BRIEFS(pTextLabel)
		IF NOT IS_STRING_NULL(pExtraText1)
			ADD_TEXT_COMPONENT_SUBSTRING_LITERAL_STRING(pExtraText1)
		ENDIF
		
		IF NOT IS_STRING_NULL(pExtraText2)
			ADD_TEXT_COMPONENT_SUBSTRING_LITERAL_STRING(pExtraText2)
		ENDIF
	END_TEXT_COMMAND_ADD_DIRECTLY_TO_PREVIOUS_BRIEFS(FALSE)
ENDPROC
*/

/*
PROC ADD_TO_PREVIOUS_BRIEF_WITH_UNDERSCORE(STRING pTextLabel, STRING pExtraText1 = NULL, STRING pExtraText2 = NULL)
	BEGIN_TEXT_COMMAND_ADD_DIRECTLY_TO_PREVIOUS_BRIEFS(pTextLabel)
		IF NOT IS_STRING_NULL(pExtraText1)
			ADD_TEXT_COMPONENT_SUBSTRING_LITERAL_STRING(pExtraText1)
		ENDIF
		
		IF NOT IS_STRING_NULL(pExtraText2)
			ADD_TEXT_COMPONENT_SUBSTRING_LITERAL_STRING(pExtraText2)
		ENDIF
	END_TEXT_COMMAND_ADD_DIRECTLY_TO_PREVIOUS_BRIEFS(TRUE)
ENDPROC
*/

#ENDIF	//	IS_DEBUG_BUILD


#ENDIF	//	__USE_NEW_PRINT_COMMANDS









#IF NOT __USE_NEW_PRINT_COMMANDS
NATIVE PROC PRINT(STRING pTextLabel, INT Duration, INT Colour) = "0x84e5be8eec43facf"
NATIVE PROC PRINT_NOW(STRING pTextLabel, INT Duration, INT Colour) = "0x1042cef6534dd91d"
NATIVE PROC PRINT_WITH_NUMBER(STRING pTextLabel, INT NumberToInsert, INT Duration, INT Colour) = "0x26dbf60753df5219"
NATIVE PROC PRINT_WITH_NUMBER_NOW(STRING pTextLabel, INT NumberToInsert, INT Duration, INT Colour) = "0x2b100196f80abeef"
NATIVE PROC PRINT_WITH_2_NUMBERS(STRING pTextLabel, INT FirstNumberToInsert, INT SecondNumberToInsert, INT Duration, INT Colour) = "0xc920c727cc40f23b"
NATIVE PROC PRINT_WITH_2_NUMBERS_NOW(STRING pTextLabel, INT FirstNumberToInsert, INT SecondNumberToInsert, INT Duration, INT Colour) = "0x456e3873846c9dc0"
NATIVE PROC PRINT_STRING_IN_STRING(STRING pTextLabel, STRING pShortTextLabel, INT Duration, INT Colour) = "0x5941dc3e879dd622"
NATIVE PROC PRINT_STRING_IN_STRING_NOW(STRING pTextLabel, STRING pShortTextLabel, INT Duration, INT Colour) = "0x3f35ebd8a5e7371d"
NATIVE PROC PRINT_STRING_WITH_TWO_STRINGS(STRING pTextLabel, STRING pShortTextLabel1, STRING pShortTextLabel2, INT Duration, INT Colour, BOOL bPrintNow) = "0x851fb92d20714610"

NATIVE PROC DISPLAY_TEXT(FLOAT DisplayAtX, FLOAT DisplayAtY, STRING pTextLabel) = "0x92596f9448f7ce53"
NATIVE PROC DISPLAY_TEXT_WITH_NUMBER(FLOAT DisplayAtX, FLOAT DisplayAtY, STRING pTextLabel, INT NumberToDisplay) = "0x750e1c400d0153e4"
NATIVE PROC DISPLAY_TEXT_WITH_2_NUMBERS(FLOAT DisplayAtX, FLOAT DisplayAtY, STRING pTextLabel, INT FirstNumberToDisplay, INT SecondNumberToDisplay) = "0x9f0146ff310f374a"
NATIVE PROC DISPLAY_TEXT_WITH_3_NUMBERS (FLOAT DisplayAtX, FLOAT DisplayAtY, STRING pTextLabel, INT FirstNumberToDisplay, INT SecondNumberToDisplay, INT ThirdNumberToDisplay) = "0x95eb052eafb24267"
NATIVE PROC DISPLAY_TEXT_WITH_FLOAT(FLOAT DisplayAtX, FLOAT DisplayAtY, STRING pTextLabel, FLOAT FloatToDisplay, INT NumberOfDecimalPlaces) = "0xaf54de6252981c3d"
NATIVE PROC DISPLAY_TEXT_WITH_STRING(FLOAT DisplayAtX, FLOAT DisplayAtY,  STRING pTextLabel, STRING pShortTextLabel) = "0x8a7be0a77de5b1c8"
NATIVE PROC DISPLAY_TEXT_WITH_TWO_STRINGS(FLOAT DisplayAtX, FLOAT DisplayAtY, STRING pTextLabel, STRING pShortTextLabel1, STRING pShortTextLabel2) = "0xd4cda4fff11a2669"
NATIVE PROC DISPLAY_TEXT_WITH_BLIP_NAME(FLOAT DisplayAtX, FLOAT DisplayAtY, STRING pTextLabel, BLIP_INDEX blipIndex) = "0xbb6e64d23c80ac52"


//INFO: The command uses default parameters so if you only need to check a message that takes no extra strings or numbers then you'll only have to specify the first parameter. 
//PARAM NOTES:
//PURPOSE: Checks that a message is being displayed filtered by the print params. More info
NATIVE FUNC BOOL IS_THIS_PRINT_BEING_DISPLAYED(STRING pTextLabel, SCRIPT_PRINT_EXTRA_PARAMS ExtraParamsFlag=SCRIPT_PRINT_NO_EXTRA_PARAMS, STRING pSubStringTextLabel=NULL, STRING pLiteralString1=NULL, STRING pLiteralString2=NULL, INT FirstNumberToInsert=-1, INT SecondNumberToInsert=-1, INT ThirdNumberToInsert=-1, INT FourthNumberToInsert=-1, INT FifthNumberToInsert=-1, INT SixthNumberToInsert=-1) = "0xc6c99315eaeb73f3"


NATIVE FUNC FLOAT GET_STRING_WIDTH(STRING pTextLabel) = "0xf83e288091642eda"
NATIVE FUNC FLOAT GET_STRING_WIDTH_WITH_NUMBER(STRING pTextLabel, INT NumberToInsert) = "0x16b948d9adbf532e"

//INFO: Pass in an empty string "" for pSubString2Label if you only want to insert one substring. 
//PARAM NOTES:
//PURPOSE: gets the number of lines to dispaly the text with substrings. More info..
//	NATIVE FUNC INT GET_NUMBER_LINES_WITH_SUBSTRINGS(FLOAT DisplayAtX, FLOAT DisplayAtY, STRING pTextLabel, STRING pSubString1Label, STRING pSubString2Label)

NATIVE PROC PRINT_HELP(STRING pTextLabel) = "0xc53a58c89fffbd5c"
NATIVE PROC PRINT_HELP_FOREVER(STRING pTextLabel) = "0x415e19d6a1931d42"

//INFO: NumberToDisplay can be an integer or a variable that has been declared as an INT. To mark where you want the number to appear use the special control code of ~1~ in the message in the text file. 
//PARAM NOTES:
//PURPOSE: Displays the message with a number in a box on the left of the screen for the default help time. More info..
NATIVE PROC PRINT_HELP_WITH_NUMBER(STRING pTextLabel, INT NumberToDisplay) = "0x80e201ef5d381369"
NATIVE PROC PRINT_HELP_FOREVER_WITH_NUMBER(STRING pTextLabel, INT NumberToDisplay) = "0x1b68caadad6a080b"

NATIVE PROC PRINT_HELP_WITH_STRING(STRING TextLabel, STRING SubStringTextLabel) = "0x392b2b4770f6823d"
NATIVE PROC PRINT_HELP_WITH_STRING_NO_SOUND(STRING TextLabel, STRING SubStringTextLabel) = "0xea29b0e8bad8bd65"
NATIVE PROC PRINT_HELP_FOREVER_WITH_STRING(STRING TextLabel, STRING SubStringTextLabel) = "0xd63d527e046277d2"
NATIVE PROC PRINT_HELP_FOREVER_WITH_STRING_NO_SOUND(STRING TextLabel, STRING SubStringTextLabel) = "0xe8267a5ee3ff4311"

NATIVE PROC PRINT_HELP_WITH_STRING_AND_NUMBER(STRING TextLabel, STRING SubStringTextLabel, INT NumberToDisplay) = "0x60874373a3d5f108"
NATIVE PROC PRINT_HELP_FOREVER_WITH_STRING_AND_NUMBER(STRING TextLabel, STRING SubStringTextLabel, INT NumberToDisplay) = "0x83c1ab9c1e783b82"


NATIVE FUNC BOOL IS_THIS_HELP_MESSAGE_BEING_DISPLAYED(STRING pTextLabel) = "0x9c07a1673146c156"
NATIVE FUNC BOOL IS_THIS_HELP_MESSAGE_WITH_NUMBER_BEING_DISPLAYED(STRING pTextLabel, INT NumberToInsert) = "0x756682794550425e"
NATIVE FUNC BOOL IS_THIS_HELP_MESSAGE_WITH_STRING_BEING_DISPLAYED(STRING TextLabel, STRING SubStringTextLabel) = "0x59122f8b2ba3ba26"
NATIVE FUNC BOOL IS_THIS_HELP_MESSAGE_WITH_STRING_AND_NUMBER_BEING_DISPLAYED(STRING TextLabel, STRING SubStringTextLabel, INT Number) = "0x3481e86636caf8a5"


NATIVE PROC DISPLAY_FLOATING_HELP_TEXT(eHELP_TEXT_FLOATING_ID id, STRING pTextLabel) = "0xde7b01da678ca1fb"
NATIVE PROC DISPLAY_FLOATING_HELP_TEXT_WITH_NUMBER(eHELP_TEXT_FLOATING_ID id, STRING pTextLabel, INT iNumber) = "0xdfc5601d3c3209c3"
NATIVE PROC DISPLAY_FLOATING_HELP_TEXT_WITH_STRING(eHELP_TEXT_FLOATING_ID id, STRING pTextLabel, STRING pSubString) = "0xa541c631fc380b6b"
NATIVE PROC DISPLAY_FLOATING_HELP_TEXT_WITH_STRING_AND_NUMBER(eHELP_TEXT_FLOATING_ID id, STRING pTextLabel, STRING pSubStringTextLabel, INT iNumber) = "0xbf27e45fa7fd6e72"

NATIVE FUNC BOOL IS_THIS_FLOATING_HELP_TEXT_BEING_DISPLAYED(eHELP_TEXT_FLOATING_ID id, STRING pTextLabel) = "0x5e6d313d859438f5"
NATIVE FUNC BOOL IS_THIS_FLOATING_HELP_TEXT_WITH_NUMBER_BEING_DISPLAYED(eHELP_TEXT_FLOATING_ID id, STRING pTextLabel, INT iNumber) = "0x33bc31da5078d09b"
NATIVE FUNC BOOL IS_THIS_FLOATING_HELP_TEXT_WITH_STRING_BEING_DISPLAYED(eHELP_TEXT_FLOATING_ID id, STRING pTextLabel, STRING pSubStringTextLabel) = "0xf95f0a818f73c7e5"
NATIVE FUNC BOOL IS_THIS_FLOATING_HELP_TEXT_WITH_STRING_AND_NUM_BEING_DISPLAYED(eHELP_TEXT_FLOATING_ID id, STRING pTextLabel, STRING pSubStringTextLabel, INT iNumber) = "0x365da543723da97b"


#IF IS_DEBUG_BUILD
NATIVE PROC PRINT_STRING_WITH_LITERAL_STRING(STRING pTextLabel, STRING pLiteralString, INT Duration, INT Colour) = "0x0a4fc8ce65e08b71"
NATIVE PROC PRINT_STRING_WITH_LITERAL_STRING_NOW(STRING pTextLabel, STRING pLiteralString, INT Duration, INT Colour) = "0xc711cbf26ea21e4c"
NATIVE PROC PRINT_STRING_WITH_TWO_LITERAL_STRINGS(STRING pTextLabel, STRING pLiteralString1, STRING pLiteralString2, INT Duration, INT Colour) = "0x724d17b284b2e6ed"
NATIVE PROC PRINT_STRING_WITH_TWO_LITERAL_STRINGS_NOW(STRING pTextLabel, STRING pLiteralString1, STRING pLiteralString2, INT Duration, INT Colour) = "0xace56cb3563ffba4"

NATIVE PROC DISPLAY_TEXT_WITH_LITERAL_STRING(FLOAT DisplayAtX, FLOAT DisplayAtY, STRING pTextLabel, STRING pLiteralString) = "0xede77e6d5a45b373"
NATIVE PROC DISPLAY_TEXT_WITH_TWO_LITERAL_STRINGS(FLOAT DisplayAtX, FLOAT DisplayAtY, STRING pTextLabel, STRING pLiteralString1, STRING pLiteralString2) = "0x358c6ea1d24c7e80"

NATIVE FUNC FLOAT GET_STRING_WIDTH_WITH_STRING (STRING pTextLabel, STRING pSmallString) = "0xd2154323bf886ec2"

NATIVE PROC ADD_TO_PREVIOUS_BRIEF(STRING pTextLabel, STRING pExtraText1 = NULL, STRING pExtraText2 = NULL) = "0x808472b723e22dbb"
NATIVE PROC ADD_TO_PREVIOUS_BRIEF_WITH_UNDERSCORE(STRING pTextLabel, STRING pExtraText1 = NULL, STRING pExtraText2 = NULL) = "0x4e7f4185560241a7"
#ENDIF	//	IS_DEBUG_BUILD

#ENDIF	//	NOT __USE_NEW_PRINT_COMMANDS

NATIVE FUNC FLOAT GET_RENDERED_TEXT_PADDING_SIZE() = "0x60343bb12e4c469a"
NATIVE FUNC FLOAT GET_RENDERED_CHARACTER_HEIGHT(FLOAT TextYScale = -1.0, TEXT_FONTS TextFont = FONT_STANDARD) = "0xc23444e9b1b8d081"


//INFO: Handy if a lot of text is about to be printed by you whilst there still is some unimportant stuff left. 
//PARAM NOTES:
//PURPOSE: Clears the print queue that may have been built up so far. More info..
NATIVE PROC CLEAR_PRINTS() = "0xba6c3c5e9e5a9442"

//INFO: 
//PARAM NOTES:
//PURPOSE: Clears any messages that are currently being displayed in the Pause Menu brief screen. 
NATIVE PROC CLEAR_BRIEF() = "0xe2c4655d0361beac"

//INFO: 
//PARAM NOTES:
//PURPOSE: Clears any on screen or queued help messages.
NATIVE PROC CLEAR_ALL_HELP_MESSAGES() = "0x687e1afe919b49bd"


//INFO: 
//PARAM NOTES:
//PURPOSE: Clears any instances of this message that are currently being displayed or waiting to be displayed. 
NATIVE PROC CLEAR_THIS_PRINT(STRING pTextLabel) = "0xe2ec74d02a707b37"

//INFO: 
//PARAM NOTES:
//PURPOSE: This is the same as CLEAR_PRINTS except that it doesn?t clear big messages. 
NATIVE PROC CLEAR_SMALL_PRINTS() = "0xd016d3608079eee3"


//~>                         Text loading commands  

//PURPOSE: Returns TRUE if a text block with the given name exists in the .gxt file
NATIVE FUNC BOOL DOES_TEXT_BLOCK_EXIST(STRING pTextBlockName) = "0x7b32afe3b3f7d5eb"

//INFO: One block of text can be loaded into each slot at a time, e.g. the phone script can load a block of text into the phone text slot without affecting the text loaded into the mission text slot for the current mission.
//  In the text file, it is possible to mark a piece of text so that it is only loaded when this command is called. The block is given a name of up to seven characters ? the convention is if the .sc filename
//  has seven or less characters then that name is used in the text file, if the .sc filename has more than seven characters then the first six characters and the last one are used.
//  
//  By putting this block name after a : as part of the text key, the text will not be loaded until REQUEST_ADDITIONAL_TEXT is called using the block name. 
//  If any block names are used in the text file then they should be added to an alphabetical list at the very beginning of the text file contained within the words "start" and "end". 
//  Only one chunk of block text can be loaded into each slot at a time. When REQUEST_ADDITIONAL_TEXT is called for another block, the block text currently in memory will be lost.
//  
//  It seems that REQUEST_ADDITIONAL_TEXT will also clear any prints on screen and clear the print queue, regardless of the text block that these prints are in. If you're wondering why your text is disappearing this might be the cause.
//  
//  For episodic content, REQUEST_ADDITIONAL_TEXT will not let you override text blocks. i.e. if you have named a text block RAY1 in an episodic gxt and there is already
//  a text block called RAY1 in GTA4's gxt then REQUEST_ADDITIONAL_TEXT will always load the one from GTA4. The solution is to rename the text block to something that doesn't clash. 
//PARAM NOTES:
//PURPOSE: Requests a block of text. 
NATIVE PROC REQUEST_ADDITIONAL_TEXT(STRING pTextBlockName, TEXT_BLOCK_SLOTS SlotNumber) = "0x249a0d3c5714bcf4"

//INFO: Request additional text for DLC, see above for more info
//PARAM NOTES:
//PURPOSE: Requests a block of text for the DLC. 
NATIVE PROC REQUEST_ADDITIONAL_TEXT_FOR_DLC(STRING pTextBlockName, TEXT_BLOCK_SLOTS SlotNumber) = "0xc5bf49fef70ebf12"

//INFO: 
//PARAM NOTES:
//PURPOSE: Checks that the text for the slot has loaded.
NATIVE FUNC BOOL HAS_ADDITIONAL_TEXT_LOADED(TEXT_BLOCK_SLOTS SlotNumber) = "0x01896b71c5ac966e"

//INFO: 
//PARAM NOTES:
//PURPOSE: Checks that the text block for the slot has loaded.
NATIVE FUNC BOOL HAS_THIS_ADDITIONAL_TEXT_LOADED(STRING pTextBlockName, TEXT_BLOCK_SLOTS SlotNumber) = "0x5fabfb823fd821d4"

//INFO: 
//PARAM NOTES:
//PURPOSE: The text slot streaming the text.
NATIVE FUNC BOOL IS_STREAMING_ADDITIONAL_TEXT(TEXT_BLOCK_SLOTS SlotNumber) = "0xf00d2317ec791d94"

//INFO: You will probably always want to call this command with TRUE for bClearPreviousBriefs. The reason for adding this command was for the situation where the player fails a mission and then replays it.
//PARAM NOTES:
//PURPOSE: Call this command to remove the text from the previous attempt at the mission from the previous briefs screen. More info..
NATIVE PROC CLEAR_ADDITIONAL_TEXT(TEXT_BLOCK_SLOTS SlotNumber, BOOL bClearPreviousBriefs) = "0xc511e7c272201cf7"

//~>                         Message commands   

//INFO: 
//PARAM NOTES:
//PURPOSE: clears the dpad down previous message reminder from the screen
NATIVE PROC CLEAR_REMINDER_MESSAGE() = "0xc166f812177b2f12"

//INFO: 
//PARAM NOTES:
//PURPOSE: sets whether to display any reminder messages
NATIVE PROC DISPLAY_REMINDER_MESSAGES(BOOL bDisplay) = "0x2ae22182486262f0"

//INFO: 
//PARAM NOTES:
//PURPOSE: converts a world position to a position on screen for the HUD and returns direction off screen
NATIVE FUNC eARROW_DIRECTION GET_HUD_SCREEN_POSITION_FROM_WORLD_POSITION(VECTOR vWorldPos, FLOAT& fScreenPosX, FLOAT& fScreenPosY) = "0x611083c6f030f850"

//INFO: 
//PARAM NOTES:
//PURPOSE: Returns the current minimap position and size.
NATIVE PROC GET_HUD_MINIMAP_POSITION_AND_SIZE(FLOAT& fXpos, FLOAT& fYpos, FLOAT& fWidth, FLOAT& fHeight) = "0xc5a34aba01fc3107"

//INFO:
//PARAM NOTES:
//PURPOSE: Clears the dynamic pause menu error message (warning screen)
NATIVE PROC CLEAR_DYNAMIC_PAUSE_MENU_ERROR_MESSAGE() = "0x4b3922c7d61ef53d"

//INFO: 
//PARAM NOTES:
//PURPOSE: Checks if any message is being displayed at the bottom of the screen. 
NATIVE FUNC BOOL IS_MESSAGE_BEING_DISPLAYED() = "0x559c03f53e6937fc"

//INFO: 
//PARAM NOTES:
//PURPOSE: 
NATIVE FUNC BOOL DOES_TEXT_LABEL_EXIST(STRING pTextLabel) = "0xe73671e3d37cf79e"



//~>                         String commands    


//INFO: 
//PARAM NOTES:
//PURPOSE: Returns the number of characters in the string with this text label
NATIVE FUNC INT GET_LENGTH_OF_STRING_WITH_THIS_TEXT_LABEL(STRING pTextLabel) = "0xd3b1139766362a75"


//~>                         GPS commands   

//INFO: 
//PARAM NOTES:
//PURPOSE:  Will add/remove the next message from the previous briefs
NATIVE PROC ADD_NEXT_MESSAGE_TO_PREVIOUS_BRIEFS(BOOL bAddToPrevBriefsFlag) = "0x4976ab7d95c4657e"


ENUM ePreviousBriefOverride
	PREVIOUS_BRIEF_NO_OVERRIDE = 0,
	PREVIOUS_BRIEF_FORCE_DIALOGUE,
	PREVIOUS_BRIEF_FORCE_GOD_TEXT
ENDENUM

//PURPOSE: Determines which of the two previous briefs screens (dialogue or god text) the next line of text will appear in
//			If the line of text wouldn't ordinarily have been added to either screen then it still won't appear in the previous briefs
NATIVE PROC FORCE_NEXT_MESSAGE_TO_PREVIOUS_BRIEFS_LIST(ePreviousBriefOverride PreviousBriefsOverride) = "0xb19edf7c1655975b"

//INFO: 
//PARAM NOTES:
// PURPOSE: Set GPS flags to use for waypoints
NATIVE PROC SET_WAYPOINT_GPS_FLAGS(int iFlags) = "0x593b300966e66cd6"

//INFO: 
//PARAM NOTES:
// PURPOSE: Switches off the waypoint blip if it is active
NATIVE PROC SET_WAYPOINT_OFF() = "0x0ce8f4161957de76"

//INFO: 
//PARAM NOTES:
// PURPOSE: Switches off the waypoint if it is locally owned
NATIVE PROC DELETE_WAYPOINTS_FROM_THIS_PLAYER() = "0xca9aaacb147ff121"

//INFO: 
//PARAM NOTES:
// PURPOSE: Refreshes any waypoints - should be called when player SWITCHES characters
NATIVE PROC REFRESH_WAYPOINT() = "0x73207668365cdade"

//INFO: 
//PARAM NOTES:
// PURPOSE: Returns whether a waypoint blip is currently active
NATIVE FUNC BOOL IS_WAYPOINT_ACTIVE() = "0x309a7e82d2306f1d"

//INFO: 
//PARAM NOTES:
// PURPOSE: Returns whether a waypoint blip is currently active for the passed player
NATIVE FUNC BOOL IS_WAYPOINT_ACTIVE_FOR_THIS_PLAYER(INT PlayerModelHashKey) = "0xe8f41ec8d0741028"

//INFO: 
//PARAM NOTES:
// PURPOSE: Returns whether a waypoint blip is currently active
NATIVE PROC SET_NEW_WAYPOINT(FLOAT fPosX, FLOAT fPosY) = "0x6b075f00044133ea"

//INFO: 
//PARAM NOTES:
// PURPOSE: Get whether waypoint system allows tracking of entities
NATIVE FUNC BOOL IS_ENTITY_WAYPOINT_ALLOWED() = "0x3a273994fdae27ab"

//INFO: 
//PARAM NOTES:
// PURPOSE: Set whether waypoint system allows tracking of entities
NATIVE PROC SET_ENTITY_WAYPOINT_ALLOWED(BOOL Value) = "0x9ee01dd505d0e186"

//INFO: 
//PARAM NOTES:
// PURPOSE: Returns waypoint clear on arrival mode
NATIVE FUNC eWaypointClearOnArrivalMode GET_WAYPOINT_CLEAR_ON_ARRIVAL_MODE() = "0xa5b0d908dc9bf2b0"

//INFO: 
//PARAM NOTES:
// PURPOSE: Set waypoint clear on arrival mode
NATIVE PROC SET_WAYPOINT_CLEAR_ON_ARRIVAL_MODE(eWaypointClearOnArrivalMode Value) = "0x7765eb5e928b70fc"

//~>                         Hud commands   

//INFO: 
//PARAM NOTES:
//PURPOSE: Displays the hud.
NATIVE PROC DISPLAY_HUD(BOOL bDisplayHudFlag) = "0x72db022c36fcea24"

//PURPOSE: Allow the hud to display even when the player is dead/arrested
NATIVE PROC DISPLAY_HUD_WHEN_NOT_IN_STATE_OF_PLAY_THIS_FRAME() = "0x9ecd85a9dab06cf5"

//PURPOSE: Allow the hud to display even when paused this frame
NATIVE PROC DISPLAY_HUD_WHEN_PAUSED_THIS_FRAME() = "0x470a86bed022c62c"

//PURPOSE: Set a fake spectator mode to allow multiplayer name tags to be displayed at far distances.
NATIVE PROC SET_FAKE_SPECTATOR_MODE(BOOL bValue) = "0xa1b263c28d444317"

// PURPOSE: Returns weather or not we are in faked spectator mode.
NATIVE FUNC BOOL GET_FAKE_SPECTATOR_MODE() = "0x788404226972208f"

//INFO: 
//PARAM NOTES:
//PURPOSE: 
NATIVE FUNC BOOL IS_HUD_PREFERENCE_SWITCHED_ON() = "0x130b8ac038bc42bd"

//INFO: 
//PARAM NOTES:
//PURPOSE: 
NATIVE FUNC BOOL IS_RADAR_PREFERENCE_SWITCHED_ON() = "0x368afb9d49d819fe"

//PURPOSE: Returns TRUE if the subtitle display option is enabled in the pause menu
NATIVE FUNC BOOL IS_SUBTITLE_PREFERENCE_SWITCHED_ON() = "0x0038ca9239065bca"

//INFO: 
//PARAM NOTES:
//PURPOSE: Returns the red, green, blue and alpha components (all integers) of the colourID passed in. 
NATIVE PROC GET_HUD_COLOUR(HUD_COLOURS HudColour, INT& red, INT& green, INT& blue, INT& alpha_param) = "0x2f046c9381d8e91b"


//PURPOSE: The first script variable colour is marked with a ~v~ in the text. Call this command to set the RGBA value of that colour.
//			Your setting will stay in effect until the next call to this command
NATIVE PROC SET_SCRIPT_VARIABLE_HUD_COLOUR(INT Red, INT Green, INT Blue, INT alpha_param) = "0xb84f6e7b50d72dda"

//PURPOSE: The second script variable colour is marked with a ~u~ in the text. Call this command to set the RGBA value of that colour.
//			Your setting will stay in effect until the next call to this command
NATIVE PROC SET_SECOND_SCRIPT_VARIABLE_HUD_COLOUR(INT Red, INT Green, INT Blue, INT alpha_param) = "0xe1b27b622cd5ef09"

//PURPOSE: replaces destHudColour with srcHudColour
NATIVE PROC REPLACE_HUD_COLOUR(HUD_COLOURS destHudColour, HUD_COLOURS srcHudColour) = "0x7eed971b613c9387"

//PURPOSE: replaces destHudColour with passed rgba
NATIVE PROC REPLACE_HUD_COLOUR_WITH_RGBA(HUD_COLOURS destHudColour, INT Red, INT Green, INT Blue, INT AlphaParam) = "0x969b16b605d0d249"

//INFO: Must be called every frame
//PARAM NOTES:
//PURPOSE: Hides the loading text on this frame
NATIVE PROC HIDE_LOADING_ON_FADE_THIS_FRAME() = "0x33f5772842f16e82"

//~>                         Radar commands 

//INFO: Must be called every frame
//PARAM NOTES:
//PURPOSE: Hides the radar AND the hud this frame ONLY 
NATIVE PROC HIDE_HUD_AND_RADAR_THIS_FRAME() = "0xc43e67c9ba871ecb"

//INFO: 
//PARAM NOTES:
//PURPOSE: Displays the radar.
NATIVE PROC DISPLAY_RADAR(BOOL bDisplayRadarFlag) = "0xb60709bd0e075903"

//INFO: 
//PARAM NOTES:
//PURPOSE: Returns whether the hud is hidden or not
NATIVE FUNC BOOL IS_HUD_HIDDEN() = "0x9c0ec6d1b2fd2795"

//INFO: 
//PARAM NOTES:
//PURPOSE: Returns whether the radar is hidden or not
NATIVE FUNC BOOL IS_RADAR_HIDDEN() = "0xb7b9fcc926422b4b"

//INFO: 
//PARAM NOTES:
//PURPOSE: Returns whether the radar is currently rendering or not
NATIVE FUNC BOOL IS_MINIMAP_RENDERING() = "0xf78361b5b167bc18"

//INFO: 
//PARAM NOTES:
//PURPOSE: sets the aiming reticle mode
NATIVE PROC FORCE_RETICLE_MODE(eHUD_RETICLE_MODE mode) = "0xfab6d4f9eb15e697"

//INFO: 
//PARAM NOTES:
//PURPOSE: Make it so that the reticle will behave as if targeting the vehicle's driver when targeting a vehicle.
NATIVE PROC USE_VEHICLE_TARGETING_RETICULE(BOOL UseVehicleTargetingReticule) = "0x01d81b27347ddf48"

//INFO: 
//PARAM NOTES:
//PURPOSE: Add a hash of a vehicle that is okay to show a marker when hitting.
NATIVE PROC ADD_VALID_VEHICLE_HIT_HASH(INT uVehicleHash) = "0x64e297fbc1b775f2"

//INFO: 
//PARAM NOTES:
//PURPOSE: Clears all the hashs considered to be valid for showing a hit marker.
NATIVE PROC CLEAR_VALID_VEHICLE_HIT_HASHES() = "0x705ecaf58aa98795"

//INFO: Must be called every frame
//PARAM NOTES:
//PURPOSE: modifys the zoom value of the radar between 0 (no zoom), and 100.   Pass in 0 to turn off
NATIVE PROC SET_RADAR_ZOOM_PRECISE(FLOAT fZoomValue) = "0x93d95f240bbb4805"

//INFO: DP: I want to phase this out, please use SET_RADAR_ZOOM_PRECISE instead on any future use!
//PARAM NOTES:
//PURPOSE: modifys the zoom value of the radar between 0 (no zoom), and 1 (max zoom in) and 1100 (max zoom out).
NATIVE PROC SET_RADAR_ZOOM(INT ZoomValue) = "0xcd6c63a108b12434"

//INFO: Must be called every frame - keeps it locked to a blip
//PARAM NOTES:
//PURPOSE: zooms in/out enough so that the passed blip is on the edge of the minimap
NATIVE PROC SET_RADAR_ZOOM_TO_BLIP(BLIP_INDEX blipIndex, FLOAT fOffset = 0.0) = "0xd786ff78f1c0208c"

//INFO: Must be called every frame - keeps it locked to a blip
//PARAM NOTES:
//PURPOSE: zooms in/out to a distance in metres
NATIVE PROC SET_RADAR_ZOOM_TO_DISTANCE(FLOAT fDistance) = "0xc391630fc1d4f7d4"

//INFO: Must be called sparingly as it re-inits the range check for a blip.  Call this if you are zoomed to a blip and the blip has moved and you want the minimap to re-zoom to it
//PARAM NOTES:
//PURPOSE: zooms in/out enough so that the passed blip is on the edge of the minimap
NATIVE PROC UPDATE_RADAR_ZOOM_TO_BLIP() = "0x553a61b953cd77f2"

//INFO: 
//PARAM NOTES:
//PURPOSE:  set radar to appear as if inside an interior for 1 frame:
NATIVE PROC SET_RADAR_AS_INTERIOR_THIS_FRAME(INT iInteriorHash = 0, FLOAT fPosX = 0.0, FLOAT fPosY = 0.0, INT iInteriorRotation = 0, INT iInteriorLevel = 0 ) = "0x7886a9e2dc3cf65b"

//INFO: 
//PARAM NOTES:
//PURPOSE:  flags the current interior as very small. Zooms in REALLY close.
NATIVE PROC SET_INSIDE_VERY_SMALL_INTERIOR(BOOL bVerySmallInterior) = "0x5183d88df0899683"

//INFO: 
//PARAM NOTES:
//PURPOSE:  flags the current interior as very large. Zooms out more so the area is easier to navigate.
NATIVE PROC SET_INSIDE_VERY_LARGE_INTERIOR(BOOL bVeryLargeInterior) = "0xee765c06d6b4cda1"

//INFO: 
//PARAM NOTES:
//PURPOSE:  set radar to appear as if its exterior for 1 frame even if its really inside an interior:
NATIVE PROC SET_RADAR_AS_EXTERIOR_THIS_FRAME() = "0xa6ce32374156efa0"

//INFO: 
//PARAM NOTES:
//PURPOSE:  dont zoom radar when running this frame (must be called every frame if you want to disable minimap running zoom):
NATIVE PROC DONT_ZOOM_MINIMAP_WHEN_RUNNING_THIS_FRAME() = "0x0f84e4b0e0f11477"

//INFO: 
//PARAM NOTES:
//PURPOSE:  dont zoom radar when sniping this frame (must be called every frame if you want to disable minimap sniping zoom):
NATIVE PROC DONT_ZOOM_MINIMAP_WHEN_SNIPING_THIS_FRAME() = "0x62ce3d3b82942315"

//INFO: 
//PARAM NOTES:
//PURPOSE:  dont tilt the minimap at all this frame
NATIVE PROC DONT_TILT_MINIMAP_THIS_FRAME() = "0x676c385e11afca47"

//INFO: 
//PARAM NOTES:
//PURPOSE:  sets the position of where the pausemap centre blip will be if its started this frame
NATIVE PROC SET_FAKE_PAUSEMAP_PLAYER_POSITION_THIS_FRAME(FLOAT fPosX, FLOAT fPosY) = "0x9c929b838435db54"

///INFO:
///PARAM NOTES:
///PURPOSE: Stores and uses the provided position for the pausemap centre blip until we leave the interior
NATIVE PROC SET_FAKE_PAUSEMAP_PLAYER_POSITION_THIS_INTERIOR(FLOAT fPosX, FLOAT fPosY) = "0x3bdb8d353133b790"

///INFO:
///PARAM NOTES:
///PURPOSE: sets the position of where the GPS start point will be
NATIVE PROC SET_FAKE_GPS_PLAYER_POSITION_THIS_FRAME(FLOAT fPosX, FLOAT fPosY, FLOAT fPosZ = 0.0) = "0xc8813dfdeca7bb27"

//INFO: 
//PARAM NOTES:
//PURPOSE:  returns whether pausemap is in interior mode
NATIVE FUNC BOOL IS_PAUSEMAP_IN_INTERIOR_MODE() = "0x77a41b07d1f0a831"

//INFO: 
//PARAM NOTES:
//PURPOSE:  hides the exterior minimap map this frame
NATIVE PROC HIDE_MINIMAP_EXTERIOR_MAP_THIS_FRAME() = "0x439378d3bad6a019"

//INFO: 
//PARAM NOTES:
//PURPOSE:  hides the interior minimap map this frame
NATIVE PROC HIDE_MINIMAP_INTERIOR_MAP_THIS_FRAME() = "0x9a42dd879a371772"

//INFO: 
//PARAM NOTES:
//PURPOSE:  hides the interior minimap map this frame
NATIVE PROC SET_USE_ISLAND_MAP(BOOL bUseIslandMap) = "0x2c524d7cba043e37"

//INFO: 
//PARAM NOTES:
/// PURPOSE: Force visibility of ability bar (as a positive value from SET_ABILITY_BAR_VALUE doesn't seem to work in MP) 
NATIVE PROC SET_ABILITY_BAR_VISIBILITY(BOOL bTurnOn) = "0x7af3ff08d316f95c"

//INFO: 
//PARAM NOTES:
/// PURPOSE: Sets if we allow the ability bar to be used. This locks the visibility to false when turned off.
NATIVE PROC SET_ALLOW_ABILITY_BAR(BOOL bTurnOn) = "0xb5146be6389fe092"

/// PURPOSE:
///    Sets the ability bar's values manually
///    NOTE: this applies an override indefinitely, so turn it off with an fPercentage of -1 (any negative value)
/// PARAMS:
///    fPercentage - [0-100] value of bar being used, or -1 to turn it back to automatic. 0 hides it from display
///    fMaxPercentage - [0-100] how much of the bar is considered the full extent
NATIVE PROC SET_ABILITY_BAR_VALUE(FLOAT fPercentage, FLOAT fMaxPercentage) = "0xe7ab8b0870fbeb3f"

/// PURPOSE:
///    Starts the ability bar to flashing for a set period of time
///    Don't spam it! Or you'll be sorry!
///  PARAMS
///    millisecondsToFlashFor - <= 0 to stop.
NATIVE PROC FLASH_ABILITY_BAR(INT millisecondsToFlashFor) = "0xd5f181065e8e4832"

/// PURPOSE:
///    Will add a glow to the ability bar if set.
/// PARAMS:
///    bTurnOn - turns it on / off
NATIVE PROC SET_ABILITY_BAR_GLOW(BOOL bTurnOn) = "0x6d9ab055fa93278e"

/// PURPOSE:
///    Sets sm_eDisplayMode on CNewHud.
/// PARAMS:
///    iDisplayMode - the display mode to set, this should evaluate to an eDISPLAY_MODE (see NewHud.h)
NATIVE PROC SET_HUD_DISPLAY_MODE(INT iDisplayMode) = "0xd49a49608f7d75bc"

/// PURPOSE:
//		Allows script to set a custom color for the MP HUD similar to how we change colors for the characters in MP.
//		Must be cleared when no longer used by passing -1 (HUD_COLOUR_INVALID).
/// PARAMS:
///    iCustomMPHudColor - The custom hud color to be used (eHUD_COLOURS)
NATIVE PROC SET_CUSTOM_MP_HUD_COLOR(INT iDisplayMode) = "0x2accb195f3ccd9de"

/// PURPOSE:
//		Allows script to set a custom color for the next tick mark on a blip. The color will be set back to
//		HUD_COLOUR_GREEN once the blip has been given it's tick mark.
/// PARAMS:
///    tickColorOverride - The custom tick mark color to be used (eHUD_COLOURS)
NATIVE PROC SET_TICK_COLOR_OVERRIDE(INT tickColorOverride) = "0x1817a17ad054e2af"

/// PURPOSE:
//		Gets the current custom MP hud color. A value of -1 (HUD_COLOUR_INVALID) means we are no using this feature.
NATIVE FUNC INT GET_CUSTOM_MP_HUD_COLOR() = "0x879bedc40ff9a105"

/// PURPOSE:
///    Will make the wanted display flash for as long as it's displayed
///    but WON'T force it to display. That's being wanteds' job.
/// PARAMS:
///    bShouldBeFlashing - exactly what it says on the tin
NATIVE PROC FLASH_WANTED_DISPLAY(BOOL bShouldBeFlashing) = "0x6e99c8b17122ed29"

/// PURPOSE:	`
///		Force the wanted star flash off 
///		(url:bugstar:2071172)
/// PARAMS:
///    bShouldForceOff
NATIVE PROC FORCE_OFF_WANTED_STAR_FLASH(BOOL bShouldForceOff) = "0xb563c2f3fae04d24"

/// PURPOSE:
///		Force the wanted star flash on (Regardless of other factors e.g. FakeWantedLevel)
/// PARAMS:
///    bShouldForceOn
NATIVE PROC FORCE_ON_WANTED_STAR_FLASH(BOOL bShouldForceOn) = "0x562107706ce3e550"

/// PURPOSE:
///		Sets the Wanted stars cooldown state (This is intended for use in the Cops And Crooks mode)
/// PARAMS:
///    iDrainLevelPercentage
NATIVE PROC UPDATE_WANTED_DRAIN_LEVEL(INT iDrainLevelPercentage) = "0xe43e54b6d0a69812"

/// PURPOSE:
///		Turn the wanted threat on or off - replaces stars with skulls (This is intended for use in the Cops And Crooks mode)
/// PARAMS:
///    bIsVisible)
NATIVE PROC UPDATE_WANTED_THREAT_VISIBILITY(BOOL bIsVisible) = "0xa6f2854b04b1277c"



//~>                         Frontend commands  

/// PURPOSE:
/// numbers are weird in case we need to add intermediate states later
ENUM PAUSE_MENU_STATE
	PM_INACTIVE 	 =  0, 	// not initialized at all
	PM_STARTING_UP 	 =  5, 	// in the process of starting up (loading assets, etc. May enter this state during a restart)
	PM_RESTARTING 	 = 10,	// restarting (or has a restart queued)
	PM_READY 		 = 15,	// ready to have commands sent to it
	PM_IN_STORE 	 = 20,	// in the store screen
	PM_IN_SC_MENU 	 = 25,	// in social club screen
	PM_SHUTTING_DOWN = 30,	// is closing down (example, waiting up to 3 seconds for streaming to finish)
	PM_IN_VIDEOEDITOR = 35  // in video editor
ENDENUM

/// PURPOSE:
///		Returns the current state of the pause menu
/// NOTES:
///		Because 'active' is a relatively fluid term depending on your needs, this function expands IS_PAUSE_MENU_ACTIVE 
///		(which effectively just checks == PM_READY)
NATIVE FUNC PAUSE_MENU_STATE GET_PAUSE_MENU_STATE() = "0x1a76a9a82bd6228c"

NATIVE FUNC BOOL IS_STORE_PENDING_NETWORK_SHUTDOWN_TO_OPEN() = "0xa7a987a7ce42c2da"

/// PURPOSE:
///    More aggressive version of IS_PAUSE_MENU_ACTIVE()
/// RETURNS:
///    TRUE if the menu is IN ANY WAY what could be considered 'active'
FUNC BOOL IS_PAUSE_MENU_ACTIVE_EX()
	return GET_PAUSE_MENU_STATE() != PM_INACTIVE
ENDFUNC

/// PURPOSE:
///		Retrieves the position of the pause menu as 0 to 1 decimal percentage values.
///		NOTE:  This command will assert if the pause menu is not active
/// RETURNS:
///		Vector position of the pause menu movie
NATIVE FUNC VECTOR GET_PAUSE_MENU_POSITION() = "0x20f495803c1d7e9b"

//INFO: 
//PARAM NOTES:
//PURPOSE: Sets the frontend active state
NATIVE PROC SET_FRONTEND_ACTIVE(BOOL bActive) = "0xdd0b677578e78e45"

//INFO: 
//PARAM NOTES:
//PURPOSE: Checks if the pause menu is active.
NATIVE FUNC BOOL IS_PAUSE_MENU_ACTIVE() = "0xf1ec2c71fd1371b8"


//INFO: 
//PARAM NOTES:
//PURPOSE: Allows or disables pad shaking during the pause menu.
NATIVE PROC SET_PAD_CAN_SHAKE_DURING_PAUSE_MENU(BOOL bAllowShake) = "0x8e43141fb98cd586"

//INFO: 
//PARAM NOTES:
//PURPOSE: Checks if the pause menu is restarting.
NATIVE FUNC BOOL IS_PAUSE_MENU_RESTARTING() = "0x9b13832261890609"

//INFO: Must be turned back to false by script
//PARAM NOTES:
//PURPOSE: when set to true, forces all scripted 2D text/graphics to be rendered when the game is in the pause/frontend menus.
NATIVE PROC FORCE_SCRIPTED_GFX_WHEN_FRONTEND_ACTIVE(BOOL bAllow) = "0x9eddad8c2d04a4a2"

//INFO: 
//PARAM NOTES:
//PURPOSE: disables the pause menu per frame - false to disable the pause menu. Deprecated - please use DISABLE_FRONTEND_THIS_FRAME instead
NATIVE PROC SET_PAUSE_MENU_ACTIVE(BOOL bActive) = "0xe6d8097f6a553f2a"

//INFO: 
//PARAM NOTES:
//PURPOSE: disables frontend menus this frame
NATIVE PROC DISABLE_FRONTEND_THIS_FRAME() = "0xcafe3d4fd6c43219"

//INFO: 
//PARAM NOTES:
//PURPOSE: disables frontend menus this frame
NATIVE PROC SUPPRESS_FRONTEND_RENDERING_THIS_FRAME() = "0xbcaccafa8d0e5c94"

//INFO: 
//PARAM NOTES:
//PURPOSE: allows pausing even when the game is not in a state of play (ie wanted/dead)
NATIVE PROC ALLOW_PAUSE_WHEN_NOT_IN_STATE_OF_PLAY_THIS_FRAME() = "0x95071e89d6440ce1"


/// PURPOSE:
///	Activates a given context for use in button prompts or menu logic
/// EXAMPLE: PAUSE_MENU_ACTIVATE_CONTEXT( HASH("ThisContext") ), can later be queried by PauseMenu.XML or script
NATIVE PROC PAUSE_MENU_ACTIVATE_CONTEXT( INT ContextHashToCheck ) = "0x324093e167766493"

/// PURPOSE:
///	Turns off a given context
NATIVE PROC PAUSE_MENU_DEACTIVATE_CONTEXT( INT ContextHashToCheck ) = "0x24db748bf8e6bf86"

/// PURPOSE:
///	Checks if a context is active
NATIVE FUNC BOOL PAUSE_MENU_IS_CONTEXT_ACTIVE( INT ContextHashToCheck ) = "0xfe728873ce709085"

/// PURPOSE:
///	Checks if there's currently a context menu being shown (used in Players/Friends/Crew menus)
NATIVE FUNC BOOL PAUSE_MENU_IS_CONTEXT_MENU_ACTIVE() = "0x94eccfff64aa04fa"

/// PURPOSE:
// Returns the colour index of the hair selected by AS with the mouse.
NATIVE FUNC INT PAUSE_MENU_GET_HAIR_COLOUR_INDEX() = "0x79fcde980db89304"

/// PURPOSE:
///	Returns the index of the menu item currently being moused over. Returns -1 if no item is moused over.
NATIVE FUNC INT PAUSE_MENU_GET_MOUSE_HOVER_INDEX() = "0xc3bab7ccbb2b42fe"

/// PURPOSE:
///	Returns the menu item ID of the menu item currently being moused over. Returns -1 if no item is moused over.
NATIVE FUNC INT PAUSE_MENU_GET_MOUSE_HOVER_MENU_ITEM_ID() = "0xc06b4592110d9759"

/// PURPOSE:
///	Returns the unique ID of the menu item currently being moused over. Returns -1 if no item is moused over.
NATIVE FUNC INT PAUSE_MENU_GET_MOUSE_HOVER_UNIQUE_ID() = "0x6b459cd1218d1d96"

/// PURPOSE:
///	Returns whether there has been a mouse click event
///	If this returns TRUE, writes the mouse event data to the arguments index, menuID, and uniqueID
NATIVE FUNC BOOL PAUSE_MENU_GET_MOUSE_CLICK_EVENT(INT& index, INT& menuID, INT& uniqueID) = "0x8851d00cee7c0186"

/// PURPOSE:
///    Pushes the specified state 'on top' of the current menu, maintaining current highlighted state (if possible)
/// PARAMS:
///    whichScreen - which screen to "Menucept"
///    If menu is a header (depth 0 in PauseMenu.xml), we'll change the header titles and enter the first column
/// NOTES:
///    This has the SAME effect as if you specified a MenuUniqueId of MENU_UNIQUE_ID_INCEPT_TRIGGER in pauseMenu.xml
NATIVE PROC PAUSE_MENUCEPTION_GO_DEEPER( FRONTEND_MENU_SCREEN whichScreen ) = "0x13a559f6ce99dd31"

/// PURPOSE:
///    If a screen has been menucepted, this'll take you back a level of the -dream- state stack
NATIVE PROC PAUSE_MENUCEPTION_THE_KICK() = "0x8965bcbb343c3074"

/// PURPOSE:
///    Toggles between fullscreen pause map and menu previously open
/// PARAMS:
///    bOpen - true opens into fullscreen map, false returns to previous menu
/// NOTES:
///    Use to allow spectator fullscreen viewing/navigation of race map
NATIVE PROC PAUSE_TOGGLE_FULLSCREEN_MAP(BOOL bOpen) = "0x543277ff566ea8b0"


/// PURPOSE:
///    Redraws the currently active menus instructional buttons. 
///    Useful if you've adjusted contexts
/// PARAMS:
///    iUniqueId - (Mostly for futureproofing) if you need to override which index it thinks is active
/// NOTE:
///    DO NOT SPAM THIS. It'll force a redraw and look ugly and be slow and everyone will laugh at you
///    
NATIVE PROC PAUSE_MENU_REDRAW_INSTRUCTIONAL_BUTTONS(INT iUniqueId = 0) = "0x58a612f25790461c"


/// PURPOSE:
///    Turns on/off the code-driven busy spinner(s) in the pause menu
/// PARAMS:
///    bVisible - TRUE if it's busy or FALSE if it's not
///    iColumnID - which column to show on (or rather, which index in data\ui\frontend.xml, PauseMenu\PersistentData\Spinner\Offsets to use)
///    			   If bVisible is FALSE, this is pretty much ignored
///    iSpinnerIndex - which spinner to use; we can draw up to 3
///    				   BUT BE SURE TO TURN IT OFF WHEN YOU'RE DONE
CONST_INT NO_SPINNER -1
NATIVE PROC PAUSE_MENU_SET_BUSY_SPINNER( BOOL bVisible, INT iColumnID = NO_SPINNER, INT iSpinnerIndex = 0) = "0x8251081b36660220"

/// PURPOSE:
///		Tells the pause menu to throw up a warning if you try to change tabs
///		Mostly used for when you're menucepted deep and don't want to lose any progress.
NATIVE PROC PAUSE_MENU_SET_WARN_ON_TAB_CHANGE( BOOL bWarn ) = "0xf5b86abb5f4b3a2f"

/// PURPOSE:
///		Tells the pause menu to throw up a cloud spinner with text
NATIVE PROC PAUSE_MENU_SET_CLOUD_BUSY_SPINNER( STRING TextLabel, BOOL bNoMenu, BOOl bBlackBackground ) = "0xcde8a5996ca4edc0"

/// PURPOSE:
///		Tells the pause menu to clear cloud spinner and text
NATIVE PROC PAUSE_MENU_CLEAR_CLOUD_BUSY_SPINNER() = "0xb67b38329f5c473a"

//INFO: 
//PARAM NOTES:
//PURPOSE: Please report no comment
NATIVE PROC SET_PLAYER_ICON_COLOUR ( INT iColour) = "0x4976ac35652b02ff"

//INFO: 
//PARAM NOTES:
//PURPOSE: 
NATIVE PROC INIT_FRONTEND_HELPER_TEXT() = "0x72dcd9be5c5e3e6a"

//INFO: 
//PARAM NOTES:
//PURPOSE: 
NATIVE PROC DRAW_FRONTEND_HELPER_TEXT(STRING DescText, STRING ButtonText, BOOL bNewLine) = "0x412e7ee717b21ec5"

//INFO:The only script I know of that needs this command is the Qub3d game where the camera is placed outside the world. Be sure to call the command with TRUE when the script ends. 
//PARAM NOTES:
//PURPOSE: Displays blips in the frontend map.  More info..
NATIVE PROC DISPLAY_FRONTEND_MAP_BLIPS(BOOL bDisplay) = "0x31a65f483a865fd2"

//~>                            Text commands                       <~


//INFO: 
//PARAM NOTES: 
//PURPOSE: Sets the text scale by using a multiplier. 1.0 = normal / 2.0 = double 
NATIVE PROC SET_TEXT_SCALE(FLOAT TextXScale, FLOAT TextYScale) = "0x3f03c2d4efa888bc"

//INFO: If you just wanted to display the second line, you would call: SET_TEXT_LINE_DISPLAY(2, 2)
//  This can be set before GET_NUMBER_LINES as GET_NUMBER_LINES ignores it. It will only get used when you call DISPLAY_TEXT to display the text. 
//PARAM NOTES: StartLine is the first line you want to start with and EndLine is the last line. 
//PURPOSE: Sets which line the text will display on.  More info..
//	NATIVE PROC SET_TEXT_LINE_DISPLAY(INT StartLine, INT EndLine)

//INFO: 
//PARAM NOTES: four parameters should be INTs between 0 and 255. Alpha 0 is invisible. 
//PURPOSE: Sets the colour of the text. More info..
NATIVE PROC SET_TEXT_COLOUR(INT Red, INT Green, INT Blue, INT alpha_param) = "0x71f4002cb1a0b451"

//PURPOSE: Sets the colour of the next line of text. You can override the alpha
NATIVE PROC SET_TEXT_HUD_COLOUR(HUD_COLOURS HudColour, INT AlphaOverride = -1) = "0xc9be98a81f921a0e"

//INFO: (Text by default is left justified) 
//PARAM NOTES:
//PURPOSE: Fully justifies the text to the coordinates specified by SET_TEXT_WRAP. More info..
NATIVE PROC SET_TEXT_JUSTIFY(BOOL bTextJustifyFlag) = "0x95e056a1e98bb41e"

//INFO: It also moves the origin of the text to the centre point. 
//PARAM NOTES:
//PURPOSE: Centre justifies the text.  More info..
NATIVE PROC SET_TEXT_CENTRE(BOOL bTextCentreFlag) = "0x21fc15ae6b6188c4"

//INFO: It also moves the origin of the text to the right hand side of the text. 
//PARAM NOTES:
//PURPOSE: Right justifies the text.  More info..
NATIVE PROC SET_TEXT_RIGHT_JUSTIFY(BOOL bTextRightJustifyFlag) = "0xb9a0cf201cf801f2"

ENUM eTextJustification
	FONT_CENTRE = 0,
	FONT_LEFT,			//	Default
	FONT_RIGHT,
	FONT_JUSTIFY
ENDENUM

NATIVE PROC SET_TEXT_JUSTIFICATION(eTextJustification Justification) = "0xb8306da8a5d18c52"


//INFO: Allows text that has been coloured to be changed back to original.
//PARAM NOTES:
//PURPOSE: Uses colurs as set by the text file.  More info..
NATIVE PROC SET_TEXT_TO_USE_TEXT_FILE_COLOURS(BOOL bUseTextColours) = "0xf0b90def1f81d9df"

//INFO: 
//PARAM NOTES:
//PURPOSE:
NATIVE PROC SET_TEXT_LINE_HEIGHT_MULT(FLOAT LineHeight) = "0x5e5a9ce59af800eb"

//INFO: 
//PARAM NOTES:
//PURPOSE: Sets points where text will wrap round and displayed on a new line. 
NATIVE PROC SET_TEXT_WRAP(FLOAT TextWrapStartX, FLOAT TextWrapEndX) = "0xe835f806be49c67b"

//INFO: 
//PARAM NOTES:
//PURPOSE: Deprecated, please use SET_TEXT_WRAP
NATIVE PROC SET_TEXT_BACKGROUND(BOOL bTextBackgroundFlag) = "0x16c632c2cbbce4d0"

//INFO: 
//PARAM NOTES:
//PURPOSE: sets the leading amount on the text
NATIVE PROC SET_TEXT_LEADING(INT iLeadingAmount) = "0x28ec5961fd3b75f0"

//INFO: 
//PARAM NOTES:
//PURPOSE: Draws a box around/behind the text 
NATIVE PROC SET_TEXT_USE_UNDERSCORE(BOOL bTextUnderScoreFlag) = "0x4d5d279aed0e8745"

//INFO: 
//PARAM NOTES:
//PURPOSE: Sets the spacing of the text proporional.
NATIVE PROC SET_TEXT_PROPORTIONAL(BOOL bTextProportionalFlag) = "0x0365ab5b6db2f6e3"

//INFO: Call this command before you need to use the font in your script and use UNLOAD_TEXT_FONT once you have finished displaying text. Only one of these special fonts can be in memory at one time.
//  Warning LOAD_TEXT_FONT may pause the game slightly, but you can use multiple fonts in one frame: 
//PARAM NOTES:
//PURPOSE: Loads a font that requires to be streamed More ino..
NATIVE PROC LOAD_TEXT_FONT(TEXT_FONTS TextFont) = "0xd5d9531c1640e0bd"

//INFO: 
//PARAM NOTES:
//PURPOSE: Returns TRUE or FALSE depending if the passed streamed font is already loaded 
NATIVE FUNC BOOL IS_TEXT_FONT_LOADED(TEXT_FONTS TextFont) = "0x6828b4b08d3d122d"

//INFO: 
//PARAM NOTES:
//PURPOSE: Set the text font 
NATIVE PROC SET_TEXT_FONT(TEXT_FONTS TextFont) = "0xf68e5437af17efbc"

//INFO: 
//PARAM NOTES:
//PURPOSE: draw a drop shadow behind onscreen intro text. 
NATIVE PROC SET_TEXT_DROPSHADOW(INT DropAmount, INT Red, INT Green, INT Blue, INT alpha_param) = "0xe570b77d940667ff"

//INFO: 
//PARAM NOTES:
//PURPOSE: Draws an outline round the entire text. 
NATIVE PROC SET_TEXT_EDGE(INT EdgeAmount, INT Red, INT Green, INT Blue, INT alpha_param) = "0xb133f9d28dfd4e1e"

//INFO: 
//PARAM NOTES:
//PURPOSE: Draws an drop shadow behind the text
NATIVE PROC SET_TEXT_DROP_SHADOW() = "0xb4143d1df367ec1b"

//INFO: 
//PARAM NOTES:
//PURPOSE: Draws an outline round the entire text
NATIVE PROC SET_TEXT_OUTLINE() = "0x435b084ae3274e4c"

//INFO: The rendertarget ID can be obtained through the <...>_RENDERTARGET_RENDER_ID Functions.
//PARAM NOTES:
//PURPOSE: Set the render target to be used for rendering.
NATIVE PROC SET_TEXT_RENDER_ID(INT RenderIndex) = "0xcf0e3bb302eac0ea"

//INFO: A render target is a texture that can rendered too.
//PARAM NOTES:
//PURPOSE: returns the default script render target id
NATIVE FUNC INT GET_DEFAULT_SCRIPT_RENDERTARGET_RENDER_ID () = "0x56555a9ed8b80dfd"

//INFO: A render target is an texture that can rendered too.
//PARAM NOTES:
//PURPOSE: Searches for a rendertarget and returns -1 if none can be found.
NATIVE FUNC INT GET_SCRIPT_RENDERTARGET_RENDER_ID () = "0x95ada3bc66b34dc0"

//INFO: 
//PARAM NOTES: set Delay to true to use texture streamed separatly as a rendertarget
//PURPOSE: Register a named render target. It returns true render target has been registered.
NATIVE FUNC BOOL REGISTER_NAMED_RENDERTARGET(STRING name, BOOL delay = FALSE) = "0x7f31e4cdb9fb2193"

//INFO: 
//PARAM NOTES:
//PURPOSE: Return true if a named render target has been registered.
NATIVE FUNC BOOL IS_NAMED_RENDERTARGET_REGISTERED(STRING name) = "0xbb75dcb31b62483c"

//INFO: 
//PARAM NOTES:
//PURPOSE: Return true if a named render tatget has been linked.
//	   Use after calling LINK_NAMED_RENDERTARGET to make sure the render target
//	   could be linked to the model. If this function returns false, script should
//	   release the render target
NATIVE FUNC BOOL IS_NAMED_RENDERTARGET_LINKED(MODEL_NAMES ModelHash) = "0x593c5e295b4590f4"

//INFO: 
//PARAM NOTES:
//PURPOSE: Release a named render target. It returns true render target has been released.
NATIVE FUNC BOOL RELEASE_NAMED_RENDERTARGET(STRING name) = "0xefd883943e59207a"

//INFO: 
//PARAM NOTES:
//PURPOSE: Link a previously registered named render target with a model.
NATIVE PROC LINK_NAMED_RENDERTARGET(MODEL_NAMES ModelHash) = "0xc043f1f3cf279111"

//INFO: 
//PARAM NOTES:
//PURPOSE: Return the rendertarget ID of a named rendertarget, to be used with SET_TEXT_RENDER_ID
NATIVE FUNC INT GET_NAMED_RENDERTARGET_RENDER_ID(STRING name) = "0x014679e62446327a"

//INFO: 
//PARAM NOTES:
//PURPOSE: Attach a named rendertarget previous registered with delay set to TRUE to a freshly loaded texture.  
//		   Return true if successful 
NATIVE FUNC BOOL SETUP_DELAYEDLOAD_NAMED_RENDERTARGET(STRING name, STRING pTextureDictionaryName, STRING pTextureName) = "0x85064dcb837190d9"

//~>                         Help Message commands                      <~


//INFO: 
//PARAM NOTES: TRUE to clear help straight away (default), false to let it fade out
//PURPOSE: call to stop displaying the current help message
NATIVE PROC CLEAR_HELP(bool bClearNow = TRUE) = "0x3410421c60bf7143"



//INFO: 
//PARAM NOTES:
//PURPOSE: returns true if on screen, false if its off the sides of the screen
NATIVE FUNC BOOL IS_HELP_MESSAGE_ON_SCREEN() = "0x2d3aaabb780ed9b6"

//INFO: 
//PARAM NOTES:
//PURPOSE: has any script set help text to hide this frame
NATIVE FUNC BOOL HAS_SCRIPT_HIDDEN_HELP_THIS_FRAME() = "0x697282ecbfd7b449"

//INFO: 
//PARAM NOTES:
//PURPOSE: Checks if a help message is being displayed
NATIVE FUNC BOOL IS_HELP_MESSAGE_BEING_DISPLAYED() = "0xf847447d4467709d"

//INFO: 
//PARAM NOTES:
//PURPOSE: Checks if a help message is in the process of fading out.
NATIVE FUNC BOOL IS_HELP_MESSAGE_FADING_OUT() = "0xd2fc6b4fe564a470"

//INFO: 
//PARAM NOTES:
//PURPOSE: Set the help text box size.
NATIVE PROC SET_HELP_MESSAGE_BOX_SIZE(FLOAT BoxSize) = "0xbfb1d3fcd71baa44"

//INFO: 
//PARAM NOTES:
//PURPOSE: Set the help text position on a screen coordinate
NATIVE PROC SET_HELP_MESSAGE_SCREEN_POSITION(FLOAT fPosX, FLOAT fPosY) = "0x00ce23d7fa4b9fff"

//INFO: 
//PARAM NOTES:
//PURPOSE: Set the help text position on a world coordinate
NATIVE PROC SET_HELP_MESSAGE_WORLD_POSITION(VECTOR vWorldPos) = "0x50bd7a0828dc3829"

//INFO: 
//PARAM NOTES:
//PURPOSE: Set the help text position on a world coordinate
NATIVE PROC SET_HELP_MESSAGE_STYLE(HELP_MESSAGE_STYLE style, HUD_COLOURS colour, INT iAlpha = -1, eARROW_DIRECTION iArrowPosition = 0, INT iFloatingTextOffset = 0) = "0xad8bf87dddacf427"


//INFO: Once you call SET_MINIGAME_IN_PROGRESS TRUE, only help messages from the minigame will be displayed. 
//PARAM NOTES:
//PURPOSE: Allows help messages from other scripts to be displayed. More info
NATIVE PROC DISPLAY_NON_MINIGAME_HELP_MESSAGES (BOOL bDisplayHelpMessages) = "0xce4d057354d100e0"

//INFO: 
//PARAM NOTES:
//PURPOSE: Returns TRUE if DISPLAY_NON_MINIGAME_HELP_MESSAGES(TRUE) has previously been called in this script
NATIVE FUNC BOOL DOES_THIS_MINIGAME_SCRIPT_ALLOW_NON_MINIGAME_HELP_MESSAGES() = "0xaad5f59ffc251db3"





//INFO: Must be called every frame
//PARAM NOTES:
//PURPOSE:  Displays the help text this frame
NATIVE PROC DISPLAY_HELP_TEXT_THIS_FRAME(STRING pTextLabel, BOOL bCurvedWindow) = "0x284e43c619cc0d26"

//INFO: Must be called every frame
//PARAM NOTES:
//PURPOSE: Hides help text this frame. More info
NATIVE PROC HIDE_HELP_TEXT_THIS_FRAME() = "0x19dd1c202b338df3"

//INFO: 
//PARAM NOTES:
//PURPOSE: Returns true if the user is currently using the help text for IME purposes.
NATIVE FUNC BOOL IS_IME_IN_PROGRESS() = "0xe4f7d42808db1edb"

//~> 					Weapon Wheel Commands

/// PURPOSE:
///    Turns forcing the weapon wheel bOnOrOff
/// PARAMS:
///    bOnOrOff - TRUE, force the wheel on
///               FALSE, stop forcing the wheel on (does NOT actually force the wheel off)
NATIVE PROC HUD_FORCE_WEAPON_WHEEL(BOOL bOnOrOff) = "0x1e672eb1f161aeeb"

/// PURPOSE:
///    Allows an override for using blazer5 vehicle UI outside FPS mode (per-frame)

NATIVE PROC HUD_FORCE_SPECIAL_VEHICLE_WEAPON_WHEEL() = "0xda8fce6cbd6b62d2"


/// PURPOSE:
///		Disables weapon wheel weapon switching. You can bring the wheel up as normal, but won't let you change anything
NATIVE PROC HUD_SUPPRESS_WEAPON_WHEEL_RESULTS_THIS_FRAME() = "0x6b3ec5908ea03c43"

NATIVE PROC HUD_SET_WEAPON_WHEEL_CONTENTS(WEAPON_INFO& WeaponWheelContents[]) = "0x2fd223883e4919e7"

/// PURPOSE:
///    Gets the last weapon displayed on the wheel
/// NOTES:
///	   Will continue to work even if the wheel isn't displayed, so check IF IS_HUD_COMPONENT_ACTIVE(NEW_HUD_WEAPON_WHEEL) first
NATIVE FUNC WEAPON_TYPE HUD_GET_WEAPON_WHEEL_CURRENTLY_HIGHLIGHTED() = "0xc965a5495f599392"

/// PURPOSE:
///    Reports if the wheel was last displayed with a slot with multiple weapons in it
/// NOTES:
///	   Will continue to work even if the wheel isn't displayed, so check IF IS_HUD_COMPONENT_ACTIVE(NEW_HUD_WEAPON_WHEEL) first
//NATIVE FUNC BOOL HUD_GET_WEAPON_WHEEL_HAS_A_SLOT_WITH_MULTIPLE_WEAPONS()

/// PURPOSE:
///    Sets the specified weapon as top in its category on the weapon wheel, if in the players' inventory when the wheel is shown
/// NOTES:
///	   Overrides any player preferences the player may have set up based on which slot they last selected
NATIVE PROC HUD_SET_WEAPON_WHEEL_TOP_SLOT(WEAPON_TYPE eWeaponToShow) = "0xa1f68c79e9ad5cf3"

/// PURPOSE:
///    Gets the top WEAPON_TYPE at the specified slot index.  Slot index 0 is the "Pistol" slot, with indices incrementing clockwise
/// NOTES:
///	   Valid slot indices are 0 to 7.  This function will return WEAPONTYPE_INVALID for any empty slots
NATIVE FUNC WEAPON_TYPE HUD_GET_WEAPON_WHEEL_TOP_SLOT(INT iSlotIndex) = "0x48ee6c0e28668c6b"


NATIVE PROC HUD_SHOWING_CHARACTER_SWITCH_SELECTION(BOOL bOnOrOff) = "0x55ea7fd57aa96c7f"




//~>                        Blip commands

//INFO: 
//PARAM NOTES:
// PURPOSE: Make the blip show a brighter shade of its colour
NATIVE PROC SET_BLIP_BRIGHT(BLIP_INDEX blipIndex, BOOL bOnOff) = "0x842b2d20fdd53978"


// PURPOSE: If this blip is attached to a ped then a cone will be drawn on the map to show the ped's perception range
NATIVE PROC SET_BLIP_SHOW_CONE(BLIP_INDEX blipIndex, BOOL bShowCone, INT iHudColor = 11) = "0xff833b22ce9ebabd"

// PURPOSE: Sets up data for a fake blip cone. This must be set before the blip is flagged to draw a cone.
NATIVE PROC SETUP_FAKE_CONE_DATA(BLIP_INDEX blipIndex, FLOAT fVisualFieldMinAzimuthAngle, FLOAT fVisualFieldMaxAzimuthAngle, FLOAT fCentreOfGazeMaxAngle, FLOAT fPeripheralRange, FLOAT fFocusRange, FLOAT fRotation, BOOL bContinuousUpdate, INT iHudColor = 11 ) = "0xeec25a2d0e80a33d"

// PURPOSE: Destroys the fake blip cone data. Be sure to turn off the blip cone before destroying the data.
NATIVE PROC REMOVE_FAKE_CONE_DATA(BLIP_INDEX blipIndex) = "0xa65547a7512713de"

// PURPOSE: Clears the fake cone array. Used to ensure it is clean before doing anything with fake cones.
NATIVE PROC CLEAR_FAKE_CONE_ARRAY() = "0x498a1c47f5c9a109"


//INFO: 
//PARAM NOTES:
// PURPOSE: Gets the id of the centre arrow
NATIVE FUNC BLIP_INDEX GET_MAIN_PLAYER_BLIP_ID() = "0x74248a89dfcaa77f"

//INFO: 
//PARAM NOTES:
// PURPOSE: Check blip exist
NATIVE FUNC BOOL DOES_BLIP_EXIST(BLIP_INDEX blipIndex) = "0x12dd4a0b247d9b4d"

//INFO: 
//PARAM NOTES:
// PURPOSE: Set blip as a friendly or threat
NATIVE PROC SET_BLIP_AS_FRIENDLY(BLIP_INDEX blipIndex, BOOL bFriendly) = "0xd809204f14ef9b68"

//INFO: 
//PARAM NOTES:
// PURPOSE: Starts a pulsing effect on a blip - one off call
NATIVE PROC PULSE_BLIP(BLIP_INDEX blipIndex) = "0x1fe0f42cece5c3e0"

//INFO: 
//PARAM NOTES:
// PURPOSE: Set blip as dead
// DEPRECIATED!!!!!!!!!! DO NOT USE
NATIVE PROC SET_BLIP_AS_DEAD(BLIP_INDEX blipIndex, BOOL bIsDead) = "0x877ac124146a370b"

//INFO: 
//PARAM NOTES:
// PURPOSE: Shows a number on this blip
NATIVE PROC SHOW_NUMBER_ON_BLIP(BLIP_INDEX blipIndex, INT iNumber) = "0x21cd92bdc21b6453"

//INFO: 
//PARAM NOTES:
// PURPOSE: removes the number shown with SHOW_NUMBER_ON_BLIP
NATIVE PROC HIDE_NUMBER_ON_BLIP(BLIP_INDEX blipIndex) = "0x2c5c132762d25e92"

//INFO: 
//PARAM NOTES:
// PURPOSE: Shows a height indicator on this blip
NATIVE PROC SHOW_HEIGHT_ON_BLIP(BLIP_INDEX blipIndex, BOOL bShowHeight) = "0x3430966ac4550bb9"

//INFO: 
//PARAM NOTES:
// PURPOSE: Shows a tick indicator on this blip
NATIVE PROC SHOW_TICK_ON_BLIP(BLIP_INDEX blipIndex, BOOL bShowTick) = "0x5baabf9faede4d96"

//INFO: 
//PARAM NOTES:
// PURPOSE: Shows a gold tick indicator on this blip
NATIVE PROC SHOW_GOLD_TICK_ON_BLIP(BLIP_INDEX blipIndex, BOOL bShowGoldTick) = "0xcac2031ebf79b1a8"

//INFO: 
//PARAM NOTES:
// PURPOSE: Shows a for sale indicator on this blip
NATIVE PROC SHOW_FOR_SALE_ICON_ON_BLIP(BLIP_INDEX blipIndex, BOOL bShow) = "0xd6d9ffd3b3882737"

//INFO: 
//PARAM NOTES:
// PURPOSE: Shows the heading indicator on this blip
NATIVE PROC SHOW_HEADING_INDICATOR_ON_BLIP(BLIP_INDEX blipIndex, BOOL bShow) = "0xf68844669fc3f9aa"

//INFO: 
//PARAM NOTES:
// PURPOSE: Shows the outline indicator on this blip
NATIVE PROC SHOW_OUTLINE_INDICATOR_ON_BLIP(BLIP_INDEX blipIndex, BOOL bShow) = "0x4d89ef15b620f774"

//INFO: 
//PARAM NOTES:
// PURPOSE: Shows the MP friend indicator on this blip
NATIVE PROC SHOW_FRIEND_INDICATOR_ON_BLIP(BLIP_INDEX blipIndex, BOOL bShow) = "0x300e57267e7c5abd"

//INFO: 
//PARAM NOTES:
// PURPOSE: Shows the MP crew indicator on this blip
NATIVE PROC SHOW_CREW_INDICATOR_ON_BLIP(BLIP_INDEX blipIndex, BOOL bShow) = "0x3e802d5892e92bc3"

// PURPOSE: Call with TRUE if you want the arrows indicating height difference to only appear on this blip for large differences
NATIVE PROC SET_BLIP_EXTENDED_HEIGHT_THRESHOLD(BLIP_INDEX blipIndex, BOOL bUseExtendedHeightThreshold) = "0x19805abde5c3f525"

// PURPOSE: Call with TRUE if you want the arrows indicating height difference to only appear on this blip for short differences
NATIVE PROC SET_BLIP_SHORT_HEIGHT_THRESHOLD(BLIP_INDEX blipIndex, BOOL bUseShortHeightThreshold) = "0x49b02aa1a8b546e2"

// PURPOSE: Call with TRUE if you want the arrows indicating height difference to always appear even on the edge of the minimap
NATIVE PROC SET_BLIP_USE_HEIGHT_INDICATOR_ON_EDGE(BLIP_INDEX blipIndex, BOOL bUseHeight) = "0x997989c3a8dc14d9"

//INFO: 
//PARAM NOTES:
// PURPOSE: Set blip to go small when on edge of minimap
NATIVE PROC SET_BLIP_AS_MINIMAL_ON_EDGE(BLIP_INDEX blipIndex, BOOL bMinimiseOnEdge) = "0xffe087414d6aca04"

//INFO: 
//PARAM NOTES:
// PURPOSE: Set a radius blip to have an edge (and to switch it off again)
NATIVE PROC SET_RADIUS_BLIP_EDGE(BLIP_INDEX blipIndex, BOOL bEdge) = "0x28f396dd9b791e03"

//INFO: 
//PARAM NOTES:
// PURPOSE: Set an area blip to have an edge (and to switch it off again)
NATIVE PROC SET_AREA_BLIP_EDGE(BLIP_INDEX blipIndex, BOOL bEdge) = "0x64b11f185c6e9ef8"

//INFO: 
//PARAM NOTES:
//PURPOSE:  Add Radar STEALTH blip for a ped
NATIVE FUNC BLIP_INDEX ADD_STEALTH_BLIP_FOR_PED(ENTITY_INDEX entity) = "0x629f899c72f98088"

//INFO: 
//PARAM NOTES:
//PURPOSE:  Add Radar blip for gang territory
NATIVE FUNC BLIP_INDEX ADD_BLIP_FOR_GANG_TERRITORY(VECTOR VecCoors) = "0x0b67e0670567170f"

//INFO: 
//PARAM NOTES:
//PURPOSE:  Add Radar blip for a radius
NATIVE FUNC BLIP_INDEX ADD_BLIP_FOR_RADIUS(VECTOR VecCoors, FLOAT fSize) = "0x434cc3c60683b171"

//INFO: 
//PARAM NOTES:
//PURPOSE:  Add Radar blip for an area
NATIVE FUNC BLIP_INDEX ADD_BLIP_FOR_AREA(VECTOR VecCoors, FLOAT fSizeX, FLOAT fSizeY) = "0x4828d2fe7319bea7"

//INFO: 
//PARAM NOTES:
//PURPOSE:  Add Radar blip for a fake wanted radius
NATIVE FUNC BLIP_INDEX ADD_BLIP_FOR_FAKE_WANTED_RADIUS(VECTOR VecCoors, FLOAT fSize) = "0xfa7cf5ee31751135"

//INFO: 
//PARAM NOTES:
//PURPOSE:  Add Radar blip for an entity
NATIVE FUNC BLIP_INDEX ADD_BLIP_FOR_ENTITY(ENTITY_INDEX entity) = "0xefd6451bf0f3352f"

//INFO: 
//PARAM NOTES:
//PURPOSE:  Add Radar blip for pickup object
NATIVE FUNC BLIP_INDEX  ADD_BLIP_FOR_PICKUP(PICKUP_INDEX pickup) = "0x455b7ffc90053189"

//INFO: 
//PARAM NOTES:
//PURPOSE:  Add Radar blip at coordinate
NATIVE FUNC BLIP_INDEX ADD_BLIP_FOR_COORD(VECTOR VecCoors) = "0xc5b823372b67998a"

//INFO: 
//PARAM NOTES:
//PURPOSE:  Set the coords of a coord, contact or radius blip
NATIVE PROC SET_BLIP_COORDS(BLIP_INDEX BlipIndex, VECTOR VecCoors) = "0xfb7acc9d9d6401a8"

//INFO: 
//PARAM NOTES:
//PURPOSE:  Returns the location of this blip. Can only be called for blips added by ADD_BLIP_FOR_COORD
NATIVE FUNC VECTOR GET_BLIP_COORDS ( BLIP_INDEX BlipIndex ) = "0x1a3931a61b3223a2"

//INFO: 
//PARAM NOTES:
//PURPOSE:  Add Radar blip at contact point
NATIVE FUNC BLIP_INDEX ADD_BLIP_FOR_CONTACT(VECTOR VecCoors) = "0x1ef7a71f36624bf5"

//INFO: 
//PARAM NOTES:
//PURPOSE:  triggers a one-off self-removing sonar blip on the minimap
NATIVE PROC TRIGGER_SONAR_BLIP(VECTOR VecCoors, float fNoiseRange, HUD_COLOURS Colour) = "0x6e2ddd7fa8b9b61e"

//INFO: 
//PARAM NOTES:
//PURPOSE:  turns on/off sonar blips on the minimap
NATIVE PROC ALLOW_SONAR_BLIPS(bool bSet) = "0xd56db2802e4bf824"

//INFO: 
//PARAM NOTES:
//PURPOSE:  Change Radar blip name with text from text file
NATIVE PROC SET_BLIP_NAME_FROM_TEXT_FILE(BLIP_INDEX blip, STRING pTextLabel) = "0xaf62582f3ea39095"

//INFO: 
//PARAM NOTES:
//PURPOSE:  Change Radar blip name to name of this player
NATIVE PROC SET_BLIP_NAME_TO_PLAYER_NAME(BLIP_INDEX blip, PLAYER_INDEX PlayerIndex) = "0xd7e3027fdc6e8da5"

//INFO: 
//PARAM NOTES:
//PURPOSE:  Change Radar blip alpha
NATIVE PROC SET_BLIP_ALPHA(BLIP_INDEX blip, INT alpha_param) = "0xfbbd8f124403b0f5"

//INFO: 
//PARAM NOTES:
//PURPOSE:  Returns the alpha of the blip (the value set via SET_BLIP_ALPHA)
NATIVE FUNC INT GET_BLIP_ALPHA ( BLIP_INDEX BlipIndex) = "0x6babdf7a460158ce"


//PURPOSE: Starts fading a blip from its current alpha value to the DestinationAlpha
//PARAM NOTES: DestinationAlpha has to be between 0 and 255 (inclusive)
NATIVE PROC SET_BLIP_FADE(BLIP_INDEX BlipIndex, INT DestinationAlpha, INT FadeDurationInMilliseconds) = "0x7105eaf252d92508"

//PURPOSE: Returns a value to indicate whether a blip is fading and whether it is fading in or out
//RETURN: 0 if the blip isn't fading, -1 for fading out, 1 for fading in
NATIVE FUNC INT GET_BLIP_FADE_DIRECTION(BLIP_INDEX BlipIndex) = "0x0b14bbb374a35daa"

//INFO: 
//PARAM NOTES:
//PURPOSE:  Change Radar blip rotation
NATIVE PROC SET_BLIP_ROTATION(BLIP_INDEX blipIndex, INT iDegrees) = "0xb02954d4f69b7a25"

//INFO: 
//PARAM NOTES:
//PURPOSE:  Same as SET_BLIP_ROTATION, but with floating point accuracy!
NATIVE PROC SET_BLIP_ROTATION_WITH_FLOAT(BLIP_INDEX blipIndex, FLOAT fDegrees) = "0x0f32d83531f90470"

//INFO: 
//PARAM NOTES:
//PURPOSE:  Returns the current rotation of the blip
NATIVE FUNC INT GET_BLIP_ROTATION ( BLIP_INDEX BlipIndex) = "0xb08b076e80441a59"

//INFO: 
//PARAM NOTES:
//PURPOSE:  time a blip will flash for, then it automatically stops flashing by code
NATIVE PROC SET_BLIP_FLASH_TIMER(BLIP_INDEX blip, INT timeInMilliseconds) = "0xe5d4469dccfb5170"

//INFO: 
//PARAM NOTES:
//PURPOSE:  the duration between each flash
NATIVE PROC SET_BLIP_FLASH_INTERVAL(BLIP_INDEX blip, INT timeInMilliseconds) = "0x1209f9274aff1a3d"

//INFO: 
//PARAM NOTES:
//PURPOSE:  Change Radar blip colour
NATIVE PROC SET_BLIP_COLOUR(BLIP_INDEX blip, INT colour) = "0xa582ee8380437b1b"

//INFO: 
//PARAM NOTES:
//PURPOSE:  Change Radar blip colour
NATIVE PROC SET_BLIP_SECONDARY_COLOUR(BLIP_INDEX blip, INT r, INT g = 0, INT b = 0) = "0x6557afc30f6af5b1"

//INFO: 
//PARAM NOTES:
//PURPOSE:  Returns the colour of the blip
NATIVE FUNC INT GET_BLIP_COLOUR(BLIP_INDEX BlipIndex) = "0xca3605134e97db2b"

//INFO: 
//PARAM NOTES:
//PURPOSE:  Returns the HUD colour of the blip (HUD_COLOURS)
NATIVE FUNC HUD_COLOURS GET_BLIP_HUD_COLOUR(BLIP_INDEX BlipIndex) = "0xe8fcd9a6754a5fb2"

//INFO: 
//PARAM NOTES:
//PURPOSE:  Returns whether blip is short range or not
NATIVE FUNC BOOL IS_BLIP_SHORT_RANGE(BLIP_INDEX BlipIndex ) = "0xc35f1f30893ad957"

//INFO: 
//PARAM NOTES:
//PURPOSE:  Returns whether blip is placed on the minimap
NATIVE FUNC BOOL IS_BLIP_ON_MINIMAP(BLIP_INDEX BlipIndex ) = "0xc12ac7d5e9c1afea"

//INFO: 
//PARAM NOTES:
//PURPOSE:  Returns whether blip has a gps route attached
NATIVE FUNC BOOL DOES_BLIP_HAVE_GPS_ROUTE(BLIP_INDEX BlipIndex ) = "0x76774fc82d7f9e46"

//INFO: 
//PARAM NOTES:
//PURPOSE:  sets the blip to be hidden on the pausemap legend
NATIVE PROC SET_BLIP_HIDDEN_ON_LEGEND(BLIP_INDEX BlipIndex, BOOL bValue) = "0x2ae77dbcbf631065"

//INFO: 
//PARAM NOTES:
//PURPOSE:  sets the blip to be a high detail blip (These are TRUE as default)
NATIVE PROC SET_BLIP_HIGH_DETAIL(BLIP_INDEX BlipIndex, BOOL bValue) = "0x2f82f997df899c00"

//INFO: 
//PARAM NOTES:
//PURPOSE:  is the blip hidden on the pausemap legend?
NATIVE FUNC BOOL IS_BLIP_HIDDEN_ON_LEGEND(BLIP_INDEX BlipIndex ) = "0xa0e3754a0dae8431"

//INFO: 
//PARAM NOTES:
//PURPOSE:  Returns whether blip is a "mission creator" blip
NATIVE PROC SET_BLIP_AS_MISSION_CREATOR_BLIP(BLIP_INDEX BlipIndex, BOOL bValue) = "0x9f66168013d830e4"

//INFO: 
//PARAM NOTES:
//PURPOSE:  Returns whether the map cursor if currently over a "mission creator" blip
NATIVE FUNC BOOL IS_HOVERING_OVER_MISSION_CREATOR_BLIP() = "0x0617568957d6ca6c"

//INFO: 
//PARAM NOTES: whether to show or not
//PURPOSE:  sets to show or hide the "start mission" instructional buttons on the map screen
NATIVE PROC SHOW_START_MISSION_INSTRUCTIONAL_BUTTON(BOOL bValue) = "0x5d95f05c8c06ac86"

//INFO: 
//PARAM NOTES: whether to show or not
//PURPOSE:  sets to show or hide the "Contact" instructional buttons on the map screen
NATIVE PROC SHOW_CONTACT_INSTRUCTIONAL_BUTTON(BOOL bValue) = "0xc772a904cde1186f"

//INFO: 
//PARAM NOTES:
//PURPOSE:  Reloads the map menu. Created with the intention of reloading it when the player is forced out of an apartment while in the map menu.
NATIVE PROC RELOAD_MAP_MENU() = "0x7400fb520dc2da92"

//INFO: 
//PARAM NOTES:
//PURPOSE:  Returns whether blip is a "mission creator" blip
NATIVE FUNC BOOL IS_MISSION_CREATOR_BLIP(BLIP_INDEX BlipIndex ) = "0xd0064e66bc157bb6"

//INFO: 
//PARAM NOTES:
//PURPOSE:  returns the blip index of the currently selected mission creator blip.   INVALID is returned if a mission creator blip is not currently highlighted on the map screen.  Will only return the new blip once
NATIVE FUNC BLIP_INDEX GET_NEW_SELECTED_MISSION_CREATOR_BLIP() = "0x71b3290c410aea94"

//INFO: 
//PARAM NOTES:
//PURPOSE:  Set a blip marker to use a longer distance or not
NATIVE PROC SET_BLIP_MARKER_LONG_DISTANCE(BLIP_INDEX blip, BOOL bOnOff ) = "0x0fb22292b765bcfa"

//INFO: 
//PARAM NOTES:
//PURPOSE:  Flash a radar blip
NATIVE PROC SET_BLIP_FLASHES(BLIP_INDEX blip, BOOL bOnOff ) = "0x9705014c37e60003"

//INFO: 
//PARAM NOTES:
//PURPOSE:  Flash a radar blip (alternative time)
NATIVE PROC SET_BLIP_FLASHES_ALTERNATE(BLIP_INDEX blip, BOOL bOnOff ) = "0xeab0f1c2ac4270fc"

//INFO: 
//PARAM NOTES:
//PURPOSE:  Is a blip currently set to flash?
NATIVE FUNC BOOL IS_BLIP_FLASHING(BLIP_INDEX blip) = "0x7962b3383c030376"

//INFO: 
//PARAM NOTES:
//PURPOSE:  set a blip as short range - on off
NATIVE PROC SET_BLIP_AS_SHORT_RANGE(BLIP_INDEX blip, BOOL bOnOff ) = "0xa241a7085a493f20"

//INFO: 
//PARAM NOTES:
//PURPOSE:  Change Radar blip scale
NATIVE PROC SET_BLIP_SCALE(BLIP_INDEX blip, FLOAT scale) = "0x293a9399e902a33b"
NATIVE PROC SET_BLIP_SCALE_2D(BLIP_INDEX blip, FLOAT scaleX, FLOAT scaleY) = "0xb3c7ad8bf7e5d5e4"

//INFO: 
//PARAM NOTES:
//PURPOSE:  Change Radar blip scale for territory blips
NATIVE PROC SET_TERRITORY_BLIP_SCALE(BLIP_INDEX blip, FLOAT scaleX, FLOAT scaleY) = "0x76b361295a8f0971"

//INFO: 
//PARAM NOTES:
//PURPOSE:  Change display mode for Radar blip
NATIVE PROC SET_BLIP_DISPLAY(BLIP_INDEX blip, BLIP_DISPLAY display) = "0x94c2f928b167aa54"

//INFO: 
//PARAM NOTES:
//PURPOSE:  Sets the category of this blip
NATIVE PROC SET_BLIP_CATEGORY(BLIP_INDEX blip, BLIP_CATEGORY category) = "0x29c63b19a4798623"

//INFO: 
//PARAM NOTES:
//PURPOSE:  Change priority for Radar blip
NATIVE PROC SET_BLIP_PRIORITY(BLIP_INDEX blip, BLIP_PRIORITY priority) = "0x7a610b2ec5da34e7"

//INFO: 
//PARAM NOTES:
//PURPOSE:  Change sprite for Radar blip
NATIVE FUNC BLIP_SPRITE GET_BLIP_SPRITE(BLIP_INDEX BlipIndex) = "0xf33cd92713fc4e3a"

//INFO: 
//PARAM NOTES:
//PURPOSE:  Set the blip sprite to be rendered to the radar.
NATIVE PROC SET_BLIP_SPRITE(BLIP_INDEX blip, BLIP_SPRITE sprite) = "0x1a5b5ba56167d412"

//PURPOSE:  All cop ped blips will use this sprite
NATIVE PROC SET_COP_BLIP_SPRITE(BLIP_SPRITE sprite, FLOAT blipScale = 1.0) = "0xba517a1bcae9f455"

//PURPOSE:  All cop ped blips will use the default sprite
NATIVE PROC SET_COP_BLIP_SPRITE_AS_STANDARD() = "0x37664f5f7b801b72"

//INFO: returns an id to pass to blip commands of the code "standard" dot blip
//PARAM NOTES:
//PURPOSE: 
NATIVE FUNC BLIP_SPRITE GET_STANDARD_BLIP_ENUM_ID() = "0x7b826893b2e27385"

//INFO: returns an id to pass to blip commands of the code "waypoint" blip
//PARAM NOTES:
//PURPOSE: 
NATIVE FUNC BLIP_SPRITE GET_WAYPOINT_BLIP_ENUM_ID() = "0x19f6152d9806bbf8"

//INFO: 
//PARAM NOTES:
//PURPOSE: 
NATIVE FUNC BLIP_INDEX GET_NEXT_BLIP_INFO_ID(BLIP_SPRITE iBlipSprite) = "0xa529c1d8769201e5"


//INFO: 
//PARAM NOTES:
//PURPOSE: returns the number of active blips created on the minimap (not necessarily visible)
NATIVE FUNC INT GET_NUMBER_OF_ACTIVE_BLIPS() = "0x5a6048c9bd40c5db"

//INFO: 
//PARAM NOTES:
//PURPOSE: 
NATIVE FUNC BLIP_INDEX GET_FIRST_BLIP_INFO_ID(BLIP_SPRITE iBlipSprite) = "0xfd3a7cd556889d1d"

//INFO: 
//PARAM NOTES:
//PURPOSE:  returns the blip of sprite iBlipSprite closest to the player.
NATIVE FUNC BLIP_INDEX GET_CLOSEST_BLIP_INFO_ID(BLIP_SPRITE iBlipSprite) = "0x5ebd67d5f4953c98"

//INFO: 
//PARAM NOTES:
//PURPOSE:  Delete radar blip and sets the variable to NULL
NATIVE PROC REMOVE_BLIP(BLIP_INDEX &BlipId) = "0xffd8eb5462b07b59"

//INFO: 
//PARAM NOTES:
//PURPOSE: set a route for this blip
NATIVE PROC SET_BLIP_ROUTE(BLIP_INDEX blip, BOOL bOnOff) = "0xaad76b24a5282fdd"

//INFO: 
//PARAM NOTES:
//PURPOSE: sets the colour of the route on the blip
NATIVE PROC SET_BLIP_ROUTE_COLOUR(BLIP_INDEX blip, INT routeColour) = "0xda6437ea059f152a"

//INFO: 
//PARAM NOTES:
//PURPOSE: Clears any blip route set via SET_BLIP_ROUTE
NATIVE PROC CLEAR_ALL_BLIP_ROUTES() = "0x48b0037539974c2f"

//INFO: 
//PARAM NOTES:
//PURPOSE: Force the GPS to show. Useful when spectating players driving in vehicles.
NATIVE PROC SET_FORCE_SHOW_GPS(BOOL bOnOff) = "0x21d57e4bdb028ccb"

//INFO: 
//PARAM NOTES:
//PURPOSE: Overrides the waypoint help button to say Set Destination
NATIVE PROC SET_USE_SET_DESTINATION_IN_PAUSE_MAP(BOOL bUseSetDestinationInMapMenu) = "0x1ca1e8c07c447958"

//INFO: 
//PARAM NOTES:
//PURPOSE: Stops the minimap from flashing while wanted.
NATIVE PROC SET_BLOCK_WANTED_FLASH(BOOL bBlockFlashing) = "0x09162f5d5428a5d8"

//INFO: 
//PARAM NOTES:
//PURPOSE: Report if seen
NATIVE FUNC VECTOR GET_BLIP_INFO_ID_COORD(BLIP_INDEX iBlipId) = "0x9a497500ddc52c34"

//INFO: 
//PARAM NOTES:
//PURPOSE:  Report if seen
NATIVE FUNC BLIP_DISPLAY GET_BLIP_INFO_ID_DISPLAY(BLIP_INDEX iBlipId) = "0x5185d043bd203744"

//INFO: 
//PARAM NOTES:
//PURPOSE:  Report if seen
NATIVE FUNC eRADAR_BLIP_TYPE GET_BLIP_INFO_ID_TYPE(BLIP_INDEX iBlipId) = "0x0096542092b7c49b"

//INFO: 
//PARAM NOTES:
//PURPOSE:  Report if seen
NATIVE FUNC VEHICLE_INDEX GET_BLIP_INFO_ID_ENTITY_INDEX(BLIP_INDEX iBlipId) = "0xd806a0199657b31f"

//INFO: 
//PARAM NOTES:
//PURPOSE:  Report if seen
NATIVE FUNC PICKUP_INDEX GET_BLIP_INFO_ID_PICKUP_INDEX(BLIP_INDEX iBlipId) = "0xda4fd237416e009f"

//INFO: 
//PARAM NOTES:
//PURPOSE:  returns the blip attached to an entity (if any) INVALID BLIP otherwise
NATIVE FUNC BLIP_INDEX GET_BLIP_FROM_ENTITY(ENTITY_INDEX entityIndex) = "0x47b4a2f6a146c0bb"

//INFO: 
//PARAM NOTES:
// PURPOSE: Sets a component on the minimap on/off - returns false if component is not valid
NATIVE FUNC BOOL SET_MINIMAP_COMPONENT(eMINIMAP_COMPONENT iComponentId, BOOL bOnOff, HUD_COLOURS color = -1) = "0xf4a39430885655c8"

//INFO: 
//PARAM NOTES:
// PURPOSE: Sets a gang property on with an owner colour. If more than one owner is specified then the colour of the property will cycle. Set them all to -1 to switch OFF the owner colour.
NATIVE PROC SET_MP_PROPERTY_OWNER(INT iPropertyId, INT iOwner1, INT iOwner2 = -1, INT iOwner3 = -1, INT iOwner4 = -1) = "0x3f9df0c437e2e31a"

//INFO: 
//PARAM NOTES:
// PURPOSE: Sets a gang property on with an owner colour. If more than one owner is specified then the colour of the property will cycle. Set them all to -1 to switch OFF the owner colour.
NATIVE PROC SET_MINIMAP_YOKE(BOOL bVisible, FLOAT fPosX = 0.0, FLOAT fPosY = 0.0, INT iAlpha = 100) = "0x8ec4f142ec3651b0"

//INFO: 
//PARAM NOTES:
// PURPOSE: Turns the sonar sweep animation on the minimap on/off.
NATIVE PROC SET_MINIMAP_SONAR_SWEEP(BOOL bVisible) = "0x66bfb53a5f30bf64"

//~>                          General purpose GPS commands                       <~

//INFO: 
//PARAM NOTES:
//PURPOSE: Sets flags to control GPS behaviour, for routes which use the scripted GPS slot
//		   This includes blip-routes, racektrack, and multi-gps routes.
//		   Values will be returned to GPS_FLAG_NONE upon mission exit.
//PARAMS:  iFlags = bit flags from the GPS_FLAGS enumeration
//         fBlippedRouteDisplayDistance = the distance which a blipped entity must be away from the
//         player before a GPS route to them is displayed; use this to avoid displaying a GPS for
//         entities which are close enough to the player (defaults to zero)

NATIVE PROC SET_GPS_FLAGS(GPS_FLAGS iFlags, FLOAT fBlippedRouteDisplayDistance=0.0) = "0xec128d03e0c3566d"

//PURPOSE: Clears the GPS flags previously set by this script.  It is a requirement to call this
//		   from any script which has previously called SET_GPS_FLAGS, prior to any other script
//		   setting the GPS flags.  Alternatively when your script terminates it will automatically
//		   call CLEAR_GPS_FLAGS if necessary.
//PARAMS:

NATIVE PROC CLEAR_GPS_FLAGS() = "0xf61564e12e6e0155"

//NAME:		SET_GPS_PLAYER_WAYPOINT_ON_ENTITY
//PURPOSE:	Sets the target of the player's waypoint GPS to be an entity; operates exactly as would a blipped entity.

NATIVE PROC SET_GPS_PLAYER_WAYPOINT_ON_ENTITY(ENTITY_INDEX iEntityIndex) = "0x285d346f06e1855d"

//NAME:		CLEAR_GPS_PLAYER_WAYPOINT
//PURPOSE:	Clears and deactivates the player's waypoint GPS (ie. the one which is usually set on the map screen)

NATIVE PROC CLEAR_GPS_PLAYER_WAYPOINT() = "0xdd20be7783fde484"

//NAME:		SET_GPS_FLASHES
//PURPOSE:	Sets whether the GPS will flash, similar to blip flashing

NATIVE PROC SET_GPS_FLASHES(BOOL bFlash) = "0x00838c2dc14803ce"




//~>                          Gps race track commands                       <~

//INFO: This command will clear the previous track OR custom-route that was set up. 
//PARAM NOTES: The colour specifies the colour in which the track will evenually be displayed. This is a HUD_COLOUR which is the same enum that is used to specify the colour for a radar blip. 
//PURPOSE: Starts constructing a race track (circuit) to be displayed on the radar and in the front-end.  More info..
NATIVE PROC START_GPS_RACE_TRACK(HUD_COLOURS Colour) = "0xd1600b19d13b4197"

//INFO: The track is specified one at a time. This has to be called after START_GPS_RACE_TRACK and before RENDER_RACE_TRACK.
//  If the track is circular the first point needs to be added twice (as the first and last) 
//PARAM NOTES:
//PURPOSE: Adds a point to a gps race track at the given vector.  More info..
NATIVE PROC ADD_POINT_TO_GPS_RACE_TRACK(VECTOR VecCoors) = "0x6fde04be006eabcb"

//INFO: Once a track has been defined using START_GPS_RACE_TRACK and a sequence of ADD_POINT_TO_GPS_RACE_TRACKs it can be rendered using this command. 
//  When done with the race don't forget to call SET_RACE_TRACK_RENDER false (the mission cleanup also does this) or CLEAR_GPS_RACE_TRACK
//  When the race track is being displayed other trails that belong to blips are not displayed. The one that can be specified by the player in the front end will still work though. 
//PARAM NOTES:
//PURPOSE:  Renders a race track once contsructed. More info..
NATIVE PROC SET_RACE_TRACK_RENDER(BOOL bOn) = "0x8662c9ec55537876"

//INFO: 
//PARAM NOTES:
//PURPOSE:  Removes a trace track gps route
NATIVE PROC CLEAR_GPS_RACE_TRACK() = "0xdf41a4edb14c7aac"


//~>                          Gps custom route commands                       <~

//INFO: This command will start a custom GPS route, clearing any previous custom route or race track.
//		Note that useage of custom route & race-track are mutually exclusive - you cannot use both at same time.
//PARAM NOTES: colour is the same as specified for the race-track commands
//PURPOSE:
NATIVE PROC START_GPS_CUSTOM_ROUTE(HUD_COLOURS Colour, BOOL bOnFoot, BOOL bInVehicle) = "0xedd2d3a6ead9a565"

//INFO: Add a route point to the custom GPS route
//PARAM NOTES:
//PURPOSE: Adds a point to a gps cutsom route at the given vector
NATIVE PROC ADD_POINT_TO_GPS_CUSTOM_ROUTE(VECTOR VecCoors) = "0xb48d56626cb36cf6"

//INFO: Clears existing route, and adds points from the specified Waypoint Recording route (which must be already loaded)
//PARAM NOTES: set iNumPoints to -1 to use the whole route; bOnFoot & bInVehicle define what movement modes the GPS route works in.
//PURPOSE:
NATIVE PROC START_GPS_CUSTOM_ROUTE_FROM_WAYPOINT_ROUTE(STRING routeName, INT iStartIndex, INT iNumPoints, HUD_COLOURS colour, BOOL bOnFoot, BOOL bInVehicle) = "0xd1d241c430d0fb81"

//INFO: Clears existing route, and adds points from the specified Assisted Movement route (which must be already loaded)
//PARAM NOTES: set iNumPoints to -1 to use the whole route; iDirection must be +1 or -1, to define which way along the assisted route to move.
//             (for example setting iStartIndex to 10, and iDirection to -1, will allow GPS to be plotted in reverse)
//             bOnFoot & bInVehicle define what movement modes the GPS route works in.
//PURPOSE:
NATIVE PROC START_GPS_CUSTOM_ROUTE_FROM_ASSISTED_ROUTE(STRING routeName, INT iStartIndex, INT iNumPoints, INT iDirection, HUD_COLOURS colour, BOOL bOnFoot, BOOL bInVehicle) = "0x3f35d6792b3b3928"

//INFO: Once custom GPS route is defined (by whatever means) this sets it to render, or turns it off
//PARAM NOTES: iRouteWidthMiniMap & iRouteWidthPauseMap define the size of the route on the maps (specifying -1 for either will use the in-game defaults)
//PURPOSE: Adds a point to a gps cutsom route at the given vector
NATIVE PROC SET_GPS_CUSTOM_ROUTE_RENDER(BOOL bOn, INT iRouteWidthMiniMap, INT iRouteWidthPauseMap) = "0x3d8b09bcf3ba1641"

//INFO: 
//PARAM NOTES:
//PURPOSE:  Removes the custom GPS route
NATIVE PROC CLEAR_GPS_CUSTOM_ROUTE() = "0xf73e7c096acc54d1"


//~>                          Gps multi-route commands                       <~

// INFO: Initialises the GPS to calculate a route using the road nodes & passing through multiple waypoints, one after the other
// The route between each given waypoint will be the shortest available using roads
// PARAM NOTES:
// PURPOSE:
NATIVE PROC START_GPS_MULTI_ROUTE(HUD_COLOURS Colour, BOOL bTrackPlayer=TRUE, BOOL bOnFoot=FALSE) = "0x31df7483722ba3a1"

// INFO: Adds a point to a multi-route
// PARAM NOTES:
// PURPOSE:
NATIVE PROC ADD_POINT_TO_GPS_MULTI_ROUTE(VECTOR VecCoors) = "0x899cd4eca1259e41"

// INFO: Starts display of the multi-route
// PARAM NOTES:
// PURPOSE:
NATIVE PROC SET_GPS_MULTI_ROUTE_RENDER(BOOL bOn) = "0xc5239b40cad5176c"

// INFO: Removes the multi-route
// PARAM NOTES:
// PURPOSE:
NATIVE PROC CLEAR_GPS_MULTI_ROUTE() = "0xb2c30aead64a860f"

//~>                    Screen commands

//INFO: 
//PARAM NOTES:
//PURPOSE:  sets the script widescreen format
NATIVE PROC SET_WIDESCREEN_FORMAT(eWIDESCREEN_FORMAT WidescreenSetting) = "0x890999e6a3060606"

//INFO: 
//PARAM NOTES:
//PURPOSE:  gets the script widescreen format
NATIVE FUNC eWIDESCREEN_FORMAT GET_WIDESCREEN_FORMAT() = "0xfbf2e183925e140d"


//INFO: 
//PARAM NOTES:
//PURPOSE: starts overriding the time these components appear for
NATIVE PROC OVERRIDE_AREA_VEHICLE_STREET_NAME_TIME_ON(INT iTimeInMs) = "0x22582a1f2a9de331"

//INFO: 
//PARAM NOTES:
//PURPOSE: stops overriding the time these components appear for
NATIVE PROC OVERRIDE_AREA_VEHICLE_STREET_NAME_TIME_OFF() = "0x21c7760c41becfd5"

//INFO: 
//PARAM NOTES:
//PURPOSE: Displays the area name.
NATIVE PROC DISPLAY_AREA_NAME(BOOL bValue) = "0xece811c504ef8d48"

//INFO: 
//PARAM NOTES:
//PURPOSE: Dipslays the playes cash.
NATIVE PROC DISPLAY_CASH(BOOL bValue) = "0x6611550cbd3a321b"

//INFO: 
//PARAM NOTES:
//PURPOSE: Dipslays the playes cash.
NATIVE PROC USE_FAKE_MP_CASH(BOOL bUseFakeMPCash) = "0xe0ef2aa080296002"

//INFO: 
//PARAM NOTES:
//PURPOSE: Dipslays the playes cash.
NATIVE PROC CHANGE_FAKE_MP_CASH(INT iFakeWalletDifference, INT iFakeBankDifference) = "0x32663800f0617d17"

//INFO: 
//PARAM NOTES:
//PURPOSE: Do a fake cash change for some amount for single player.
NATIVE PROC FAKE_SP_CASH_CHANGED(INT iAmountChanged) = "0x9943868983b70bc5"

//INFO: Must be called every frame
//PARAM NOTES:
//PURPOSE:  Forces the display of ammo this frame if passed TRUE, forces OFF if passed FALSE
NATIVE PROC DISPLAY_AMMO_THIS_FRAME(BOOL bValue) = "0x3f5b55c881fe2e15"

//~>                Sniper commands


//INFO: Must be called every frame
//PARAM NOTES:
//PURPOSE:  Displays the sniper scope this frame
NATIVE PROC DISPLAY_SNIPER_SCOPE_THIS_FRAME() = "0x4da42d6554c5f1d5"

//~>                Network/Multiplayer commands

//INFO: 
//PARAM NOTES:
NATIVE PROC ALLOW_DISPLAY_OF_MULTIPLAYER_CASH_TEXT(BOOL bAllow) = "0xd032b1c1c61f216c"

//INFO: 
//PARAM NOTES:
NATIVE PROC SET_MULTIPLAYER_WALLET_CASH() = "0xa8958773478e3a2f"

//INFO: 
//PARAM NOTES:
NATIVE PROC REMOVE_MULTIPLAYER_WALLET_CASH() = "0xb011dbfd44946d95"

//INFO: 
//PARAM NOTES:
NATIVE PROC SET_MULTIPLAYER_BANK_CASH() = "0xb24c6b8e89ffe5d3"

//INFO: 
//PARAM NOTES:
NATIVE PROC REMOVE_MULTIPLAYER_BANK_CASH() = "0x3e095d3a28ad69bb"

NATIVE PROC SET_MULTIPLAYER_HUD_CASH(INT iCash, BOOL bForever = FALSE) = "0xc98480c5886269ba"

//INFO: 
//PARAM NOTES:  // removes both bank and wallet cash
NATIVE PROC REMOVE_MULTIPLAYER_HUD_CASH() = "0x086a4a67765b653b"

//INFO: 
//PARAM NOTES:
//PURPOSE:  sets a cop star on the cash instead of a dollar sign
NATIVE PROC SET_HUD_CASH_AS_COP_STAR(BOOL bActive) = "0x8be0ac94dcc00325"

//INFO: 
//PARAM NOTES:
//PURPOSE: Turn On and Off Lobby RadioHud. If the player is not in the Lobby does not do anything.
NATIVE PROC NETWORK_SET_RADIOHUD_IN_LOBBY_OFF( ) = "0x553d2d41bce5d774"

//INFO: 
//PARAM NOTES:
//PURPOSE: Gets the frontend design placement values for use in the multiplayer frontend 
NATIVE PROC GET_FRONTEND_DESIGN_VALUE(eWIDGET_NAME id, FLOAT& x, FLOAT& y) = "0xe4aee5bd670291d5"

//~>                        Pickup commands 

//INFO: 
//PARAM NOTES: Default is 1.0
//PURPOSE: Sets the pickups blip scale
NATIVE PROC SET_PICKUP_BLIP_SCALE(FLOAT scale) = "0x28259352f5ebd281"

//INFO: Sets the order of the blip rendering, the blip with a higher priority will get rendered over other blips 
//PARAM NOTES:
//PURPOSE: Sets the pickup blip priority
NATIVE PROC SET_PICKUP_BLIP_PRIORITY(BLIP_PRIORITY priority) = "0x3558a1a866345c11"

//INFO: 
//PARAM NOTES:
//PURPOSE: Sets how the pickup blips get rendered to teh radar. 
NATIVE PROC SET_PICKUP_BLIP_DISPLAY(BLIP_DISPLAY display) = "0x3a8bac5b6386a97e"

//INFO: 
//PARAM NOTES:
//PURPOSE: Sets the colur of the pickup blips.
NATIVE PROC SET_PICKUP_BLIP_COLOUR(INT colour) = "0xe57d0e6de6caca13"

//INFO: 
//PARAM NOTES:
//PURPOSE: Set the blip sprite to be rendered to the radar.
NATIVE PROC SET_PICKUP_BLIP_SPRITE(BLIP_DISPLAY display) = "0xcd934209d949e777"

//INFO: 
//PARAM NOTES:
//PURPOSE: command for streaming in text and waiting
FUNC BOOL ANY_TEXT_IS_STREAMING()
    INT i
    FOR i = 0 TO (ENUM_TO_INT(NUM_ADDITIONAL_TEXT_SLOTS)-1)
        IF IS_STREAMING_ADDITIONAL_TEXT(INT_TO_ENUM(TEXT_BLOCK_SLOTS, i))
            RETURN TRUE
        ENDIF
    ENDFOR
    RETURN FALSE
ENDFUNC

//INFO: This switches between the original GTA4 simple blips for chars
//      and perception cone rendering for chars.
//PARAM NOTES:
//PURPOSE: Toggles the stealth radar on or off
NATIVE PROC TOGGLE_STEALTH_RADAR(BOOL bOn) = "0xb803aee78bc2dd02"

//INFO: flashes the minimap display white
//PARAM NOTES:
//PURPOSE: for 1397187 + 1402724
NATIVE PROC FLASH_MINIMAP_DISPLAY() = "0xc70e97154cc5b243"

//INFO: flashes the minimap display using the color specified
//PARAM NOTES:
NATIVE PROC FLASH_MINIMAP_DISPLAY_WITH_COLOR(HUD_COLOURS eFlashColour) = "0x1abde97f42182259"

//INFO: 
//PARAM NOTES:
//PURPOSE:  Turn on the stealth radar perception cone rendering for this ped
NATIVE PROC DRAW_PED_VISUAL_FIELD(PED_INDEX ped, BOOL bDraw) = "0xb54cb9d6f2a5a405"

//INFO: 
//PARAM NOTES:
//PURPOSE:  sets the minimap into spector mode, passing in a ped index (or off)
NATIVE PROC SET_MINIMAP_IN_SPECTATOR_MODE(BOOL bOnOff, PED_INDEX entity = NULL) = "0x6caf65c4f61a4bbd"

//INFO: 
//PARAM NOTES:
//PURPOSE:  sets the current mission name to display on the HUD
NATIVE PROC SET_MISSION_NAME(BOOL bActive, STRING pTextLabel = NULL) = "0xefe837b21d5cf02c"

//PURPOSE: sets the current mission name to display on the HUD as the name entered for a UGC mission
NATIVE PROC SET_MISSION_NAME_FOR_UGC_MISSION(BOOL bActive, STRING pMissionName = NULL) = "0x02f3bf0b2f6fd7ee"

//PURPOSE: sets the current mission description to display in the Jobs section of the pause menu
NATIVE PROC SET_DESCRIPTION_FOR_UGC_MISSION(BOOL bActive, STRING pString1 = NULL, STRING pString2 = NULL, STRING pString3 = NULL, STRING pString4 = NULL) = "0x210b3e5d2bf734dc"

//PURPOSE: sets the current mission description to display in the Jobs section of the pause menu - takes up to 8 strings
NATIVE PROC SET_DESCRIPTION_FOR_UGC_MISSION_EIGHT_STRINGS(BOOL bActive, STRING pString1 = NULL, STRING pString2 = NULL, STRING pString3 = NULL, STRING pString4 = NULL, STRING pString5 = NULL, STRING pString6 = NULL, STRING pString7 = NULL, STRING pString8 = NULL) = "0x5865e793fd7d704f"

//INFO: 
//PARAM NOTES:
//PURPOSE:  sets the background map of the minimap hidden/visible
NATIVE PROC SET_MINIMAP_BACKGROUND_HIDDEN(BOOL bActive) = "0x64caf105d50753cf"

//INFO: 
//PARAM NOTES:
//PURPOSE:  Blocks the input for adding waypoints
NATIVE PROC SET_MINIMAP_BLOCK_WAYPOINT(BOOL bBlock) = "0x0704376d0ea246e8"

//INFO: 
//PARAM NOTES:
//PURPOSE:  sets the map to show the prologue map
NATIVE PROC SET_MINIMAP_IN_PROLOGUE(BOOL bActive) = "0x45125ae10bf524d3"

//INFO: 
//PARAM NOTES:
//PURPOSE:  sets the minimap to dim - false sets it back to normal
NATIVE PROC SET_MINIMAP_DIMMED(BOOL bDimmed) = "0x8ee4ed78e579ffcd"

//INFO: 
//PARAM NOTES:
//PURPOSE:  sets the minimap to hide the FoW (i.e. visuallly reveal the entire map, doesn't affect discovery status)
NATIVE PROC SET_MINIMAP_HIDE_FOW(BOOL bHideFow) = "0x9d58f1f38990e4fe"

//INFO: 
//PARAM NOTES:
//PURPOSE:  Returns the ratio of uncovered fog of war (0.0f : hidden, 1.0f : entirely revelaed)
NATIVE FUNC FLOAT GET_MINIMAP_FOW_DISCOVERY_RATIO() = "0x0ba77a703b108691"

//INFO: 
//PARAM NOTES:
//PURPOSE:  Returns true if the passed coordinates have been revealed in the fog of war.
NATIVE FUNC BOOL GET_MINIMAP_FOW_COORDINATE_IS_REVEALED(VECTOR worldPos) = "0x9dccb0e0a6fba49f"

//INFO: 
//PARAM NOTES:
//PURPOSE:  Pass TRUE to be able to move the player arround without updating the fog of war map, Reset to FALSE once DONE. DO NOT FORGET TO RESET AFTER USE.
NATIVE PROC SET_MINIMAP_FOW_DO_NOT_UPDATE(BOOL bDoNotUpdate) = "0x6c65593af9494db5"

//INFO: 
//PARAM NOTES:
//PURPOSE:  Reveal the passed coordinates in the FoW map, up to 8 coordinates per frame.
NATIVE PROC SET_MINIMAP_FOW_REVEAL_COORDINATE(VECTOR worldPOS) = "0xfd58f8cb1eb5622d"

//INFO: 
//PARAM NOTES:
//PURPOSE:  Allows (TRUE) or blocks (FALSE) FoW use in multiplayer
NATIVE PROC SET_MINIMAP_ALLOW_FOW_IN_MP(BOOL enable) = "0xb6cb984991549930"

//INFO: 
//PARAM NOTES:
//PURPOSE:  Returns active status of "AllowFoWInMP" flag
NATIVE FUNC BOOL GET_MINIMAP_ALLOW_FOW_IN_MP() = "0xed108a94f2decd16"

//INFO: 
//PARAM NOTES:
//PURPOSE:  Sends request for FoW clear (TRUE)
NATIVE PROC SET_MINIMAP_REQUEST_CLEAR_FOW(BOOL enable) = "0xadc2f1a8d311be2c"

//INFO: 
//PARAM NOTES:
//PURPOSE:  Sends request for FoW reveal (TRUE)
NATIVE PROC SET_MINIMAP_REQUEST_REVEAL_FOW(BOOL enable) = "0xa36b744fd072342f"

//INFO: 
//PARAM NOTES:
//PURPOSE:  Enables (TRUE) or disables (FALSE) custom override for FoW's world position & size
NATIVE PROC ENABLE_MINIMAP_FOW_CUSTOM_WORLD_EXTENTS(BOOL enable) = "0x6b86f81fc54a6954"

//INFO: 
//PARAM NOTES:
//PURPOSE:  Returns internal status of above override
NATIVE FUNC BOOL ARE_MINIMAP_FOW_CUSTOM_WORLD_EXTENTS_ENABLED() = "0x5101958df4a0622e"

//INFO: 
//PARAM NOTES:
//PURPOSE:  Sets custom overrides for FoW's world position (x, y) and size (width, height)
NATIVE PROC SET_MINIMAP_FOW_CUSTOM_WORLD_POS_AND_SIZE(FLOAT x, FLOAT y, FLOAT width, FLOAT height) = "0x388b4d51a7710bb8"

//PARAM NOTES: bEnableSave - set to TRUE if you want the Fog of War data to be saved
//				minX, minY, maxX, maxY - define a rectangle within the full 128*128 Fog of War array. Each number should be >=0 and <128
//				fillValueForRestOfMap - use this to specify a fill value for the rest of the 128*128 array (outside your rectangle).
//											You'll probably want either 0 or 255 for this.
//PURPOSE:  Defines a rectangle within the full 128*128 Fog of War data. The Fog of War values within this rectangle will be saved in the MP Save data
//				for the current MP Character
NATIVE PROC SET_MINIMAP_FOW_MP_SAVE_DETAILS(BOOL bEnableSave, INT minX, INT minY, INT maxX, INT maxY, INT fillValueForRestOfMap) = "0x72e17e2bf5d1a314"

//RETURNS: TRUE if saving of the Fog of War rectangle has been enabled (either by a previous SET_MINIMAP_FOW_MP_SAVE_DETAILS call or by loading an MP save that contained FoW data)
//PURPOSE:  Returns the values that have been set by an earlier SET_MINIMAP_FOW_MP_SAVE_DETAILS call, or by loading an MP save which contained Fog of War data.
NATIVE FUNC BOOL GET_MINIMAP_FOW_MP_SAVE_DETAILS(INT &minX, INT &minY, INT &maxX, INT &maxY, INT &fillValueForRestOfMap) = "0x2903602213426462"

//INFO: 
//PARAM NOTES:
//PURPOSE:  sets the minimap to show the golf course and be in "golf course mode"
NATIVE PROC SET_MINIMAP_GOLF_COURSE(eMINIMAP_GOLF_COURSE_HOLE iGolfCourseHole) = "0x62460755296d69f6"

//INFO: 
//PARAM NOTES:
//PURPOSE:  turns off the golf club mode and returns the minimap to normal
NATIVE PROC SET_MINIMAP_GOLF_COURSE_OFF() = "0xac73a443d41d4898"

//INFO: 
//PARAM NOTES:
//PURPOSE:  locks the minimap rotation to a desired angle
NATIVE PROC LOCK_MINIMAP_ANGLE(INT iAngle) = "0xf3f07aaf13926729"

//INFO: 
//PARAM NOTES:
//PURPOSE:  unlocks the minimap so it rotates with the camera angle again as normal
NATIVE PROC UNLOCK_MINIMAP_ANGLE() = "0x1c35fdd57f36fbea"

//INFO: 
//PARAM NOTES:
//PURPOSE:  locks the minimap position to a world coord
NATIVE PROC LOCK_MINIMAP_POSITION(FLOAT fPosX, FLOAT fPosY) = "0x262d43ebe3ca4397"

//INFO: 
//PARAM NOTES:
//PURPOSE:  unlocks the minimap so it moves with the player position as normal
NATIVE PROC UNLOCK_MINIMAP_POSITION() = "0xbd18a1ef31f0166b"

//INFO: 
//PARAM NOTES:
//	bColourAltimeterArea - set this to TRUE to fill the altimeter background with a semi-opaque colour
//PURPOSE:  sets a fake max height for the minimap altimeter
NATIVE PROC SET_FAKE_MINIMAP_MAX_ALTIMETER_HEIGHT(FLOAT fMaxHeight, BOOL bColourAltimeterArea = FALSE, HUD_COLOURS hudColor = HUD_COLOUR_PURPLE) = "0xdaa3c9fef77614c4"

/// PURPOSE:
///    Sets the hud's health display values directly
///    TURNS OFF REAL-TIME QUERYING. So you'll need to turn this off when you're done
///    by passing in iHealth = -1
/// PARAMS:
///    iHealth - health value to display (assumes it's got a deadpoint of 100 HP)
///    			 passing in -1 turns this override off
///    iArmour - armour to display
NATIVE PROC SET_HEALTH_HUD_DISPLAY_VALUES(INT iHealth, INT iArmour, BOOL bShowDmg = TRUE) = "0x1cbea88a9d0641c9"

//INFO: 
//PARAM NOTES:
//PURPOSE:  sets the max of the display of the health on the HUD
NATIVE PROC SET_MAX_HEALTH_HUD_DISPLAY(INT iMaxDisplay) = "0xc6a49d61f9d6c54e"

//INFO: 
//PARAM NOTES:
//PURPOSE:  sets the max of the display of the armour on the HUD
NATIVE PROC SET_MAX_ARMOUR_HUD_DISPLAY(INT iMaxDisplay) = "0x6ca9d991fdb47a79"

//INFO: 
//PARAM NOTES:
//PURPOSE:  sets the big map active/inactive
NATIVE PROC SET_BIGMAP_ACTIVE(BOOL bActive, BOOL bFullMap = TRUE) = "0x111b8c39ee6c95e7"

//INFO: 
//PARAM NOTES:
//PURPOSE:  sets the big map fullscreen or standard
NATIVE PROC SET_BIGMAP_FULLSCREEN(BOOL bFullscreen) = "0xf2f503577676c986"

//INFO: 
//PARAM NOTES: hud component value
//PURPOSE:  returns whether the hud component is active/loaded
NATIVE FUNC BOOL IS_HUD_COMPONENT_ACTIVE(eHUD_COMPONENT hudComponent) = "0x1ec008858f146889"

//INFO: 
//PARAM NOTES: scripted hud component value
//PURPOSE:  returns whether a scripted hud component is active/loaded
NATIVE FUNC BOOL IS_SCRIPTED_HUD_COMPONENT_ACTIVE(eSCRIPT_HUD_COMPONENT hudComponent) = "0xd8e7fbba43b54355"

//INFO: 
//PARAM NOTES: hud component value
//PURPOSE:  hides the hud component for 1 frame
NATIVE PROC HIDE_HUD_COMPONENT_THIS_FRAME(eHUD_COMPONENT hudComponent) = "0xac765ef46e85a446"

//INFO: 
//PARAM NOTES: scripted hud component value
//PURPOSE:  is the hud component hidden this frame?
NATIVE FUNC BOOL IS_HUD_COMPONENT_HIDDEN_THIS_FRAME(eHUD_COMPONENT hudComponent) = "0xe03a785866b92062"

//INFO: 
//PARAM NOTES: hud component value
//PURPOSE:  hides the hud component for 1 frame
NATIVE PROC HIDE_SCRIPTED_HUD_COMPONENT_THIS_FRAME(eSCRIPT_HUD_COMPONENT hudComponent) = "0x6ec26fc7c9ec0d16"

//INFO: 
//PARAM NOTES: hud component value
//PURPOSE:  shows the hud component for 1 frame
NATIVE PROC SHOW_SCRIPTED_HUD_COMPONENT_THIS_FRAME(eSCRIPT_HUD_COMPONENT hudComponent) = "0x5de9a897c16d7b8b"

//INFO: 
//PARAM NOTES: scripted hud component value
//PURPOSE:  is the scripted hud component hidden this frame?
NATIVE FUNC BOOL IS_SCRIPTED_HUD_COMPONENT_HIDDEN_THIS_FRAME(eSCRIPT_HUD_COMPONENT hudComponent) = "0x83bb81f26b7fb1ad"

//INFO: 
//PARAM NOTES: hud component value
//PURPOSE:  shows the hud component for 1 frame
NATIVE PROC SHOW_HUD_COMPONENT_THIS_FRAME(eHUD_COMPONENT hudComponent) = "0x128ebde26c467532"

//INFO: 
//PURPOSE:  disables the street, car, area, district names from appearing on the screen for this frame.
NATIVE PROC HIDE_STREET_AND_CAR_NAMES_THIS_FRAME() = "0x0e0732d108a5bfa0"

//INFO: 
//PURPOSE:  Makes sure that the reticule values are fully reset (expected to be used on mission failure/retry, should fix issues when the player is forced into sniper view)
NATIVE PROC RESET_RETICULE_VALUES() = "0xe8d409e227acd71d"

//INFO: 
//PARAM NOTES:
//PURPOSE:  gets the position of the lowest hud component at the top right of the screen, regardless of what is onscreen at the time
NATIVE FUNC FLOAT GET_LOWEST_TOP_RIGHT_Y_POS() = "0x663bf9727e93790e"

//INFO: 
//PARAM NOTES: hud component value
//PURPOSE:  resets the values of the hud component back to the original values from the xml
NATIVE PROC RESET_HUD_COMPONENT_VALUES(eHUD_COMPONENT hudComponent) = "0x4fef096d3ab4aa8c"

//INFO: 
//PARAM NOTES: hud component value
//PURPOSE:  sets the position of this hud component
NATIVE PROC SET_HUD_COMPONENT_POSITION(eHUD_COMPONENT hudComponent, FLOAT PosX, FLOAT PosY) = "0xe73f8cb95153f5b1"

//INFO: 
//PARAM NOTES: hud component value
//PURPOSE:  gets the position of this hud component value
NATIVE FUNC VECTOR GET_HUD_COMPONENT_POSITION(eHUD_COMPONENT hudComponent) = "0x71e36dd92e2a1642"

//INFO: 
//PARAM NOTES: hud component value
//PURPOSE:  gets the size of this hud component value
NATIVE FUNC VECTOR GET_HUD_COMPONENT_SIZE(eHUD_COMPONENT hudComponent) = "0x64eb3223597aa5d7"

//INFO: 
//PARAM NOTES: hud component value
//PURPOSE:  sets the colour of the hud component
NATIVE PROC SET_HUD_COMPONENT_COLOUR(eHUD_COMPONENT hudComponent, HUD_COLOURS hudColour, INT iAlpha = -1) = "0x69061d765a5ba3c4"

//INFO: 
//PARAM NOTES: hud component value
//PURPOSE:  sets the alpha this hud component value
NATIVE PROC SET_HUD_COMPONENT_ALPHA(eHUD_COMPONENT hudComponent, INT iAlpha) = "0xd9af2ccd0f55094e"

//INFO: 
//PARAM NOTES: The has of the weapon's reticule that should be shown.
//PURPOSE:  Forces the reticule to be what you want.
NATIVE PROC SET_RETICULE_OVERRIDE_THIS_FRAME(INT overrideHash) = "0xaa76c6965cd73e6b"

//
// FLOATING HELP TEXT:
//


//INFO: 
//PARAM NOTES:
//PURPOSE: returns whether the floating text is on screen
NATIVE FUNC BOOL IS_FLOATING_HELP_TEXT_ON_SCREEN(eHELP_TEXT_FLOATING_ID id) = "0x42a08f69ad1ff739"

//INFO: 
//PARAM NOTES:
//PURPOSE: sets the floating help text position on screen
NATIVE PROC SET_FLOATING_HELP_TEXT_SCREEN_POSITION(eHELP_TEXT_FLOATING_ID id, FLOAT fPosX, FLOAT fPosY) = "0x103e53b30af92ca0"

//INFO: 
//PARAM NOTES:
//PURPOSE: sets the floating help text based on a world position
NATIVE PROC SET_FLOATING_HELP_TEXT_WORLD_POSITION(eHELP_TEXT_FLOATING_ID id, VECTOR vWorldPos) = "0x9c0f9e5181b36182"

//INFO: 
//PARAM NOTES:
//PURPOSE: sets the floating help text based on an entity position and a screen offset
NATIVE PROC SET_FLOATING_HELP_TEXT_TO_ENTITY(eHELP_TEXT_FLOATING_ID id, ENTITY_INDEX entityIndex, FLOAT fOffsetX, FLOAT fOffsetY) = "0x4ae51be152ccc94c"

//INFO: 
//PARAM NOTES:
//PURPOSE: sets the style of the floating help text
NATIVE PROC SET_FLOATING_HELP_TEXT_STYLE(eHELP_TEXT_FLOATING_ID id, HELP_MESSAGE_STYLE style, HUD_COLOURS colour, INT iAlpha = -1, eARROW_DIRECTION iArrowPosition = 0, INT iFloatingTextOffset = 0) = "0xc3cb73ea7347d9bd"

//INFO: 
//PARAM NOTES:
//PURPOSE: clears floating help text
NATIVE PROC CLEAR_FLOATING_HELP(eHELP_TEXT_FLOATING_ID id, bool bClearNow = TRUE) = "0xd4df0f443b8fd284"

//PURPOSE: Rowan needs this for a line of text in multiplayer "Return to <streetname>"
NATIVE FUNC STRING GET_STREET_NAME_FROM_HASH_KEY(INT HashKeyOfStreetName) = "0xfa3d01be2a9bfe4f"


//~>                        Literal string commands

//INFO: 
//PARAM NOTES:
//PURPOSE: Returns the number of characters in this string. 
NATIVE FUNC INT GET_LENGTH_OF_LITERAL_STRING(STRING pLiteralString) = "0xee91150b7f06c500"

//INFO: 
//PARAM NOTES:
//PURPOSE: Returns the number of bytes in this string
NATIVE FUNC INT GET_LENGTH_OF_LITERAL_STRING_IN_BYTES(STRING pLiteralString) = "0x4b83ffc4b00987d9"

//INFO: If the label doesn't exist in either of these two blocks then the command returns FALSE. 
//PARAM NOTES:
//PURPOSE: Checks if ithe text label exists either in the main text block or in the currently loaded mission text block. More info..
NATIVE FUNC STRING GET_FIRST_N_CHARACTERS_OF_LITERAL_STRING(STRING pLiteralString, INT NumberOfCharacters) = "0x9c0b44284bae32ce"

#IF IS_DEBUG_BUILD
//INFO: 
//PARAM NOTES:
//PURPOSE: 
NATIVE FUNC STRING GET_STRING_FROM_TEXT_FILE(STRING pTextLabel) = "0xab9b3315100b5cc6"

//INFO: 
//PARAM NOTES:
//PURPOSE: Returns a string from part of another string 
NATIVE FUNC STRING GET_STRING_FROM_STRING(STRING pText, INT startPoint, INT endPoint) = "0x8ca1cb8c4be69967"

//INFO: This is needed by Neil to display street names in the taxi script. The TextLabelHashKey will have been returned by FIND_STREET_NAME_AT_POSITION. 
//PARAM NOTES:
//PURPOSE: returns the string contained in the .gxt file for the given text label hash key. More info..
NATIVE FUNC STRING GET_STRING_FROM_HASH_KEY(INT TextLabelHashKey) = "0xeca456d3ea4c26c7"

//INFO: Check GET_LENGTH_OF_STRING_WITH_THIS_TEXT_LABEL first
//PARAM NOTES:
//PURPOSE: needed by the email script to simulate the player typing a message. More info.. 
NATIVE FUNC STRING GET_FIRST_N_CHARACTERS_OF_STRING(STRING pTextLabel, INT NumberOfCharacters) = "0x0887602ddb4965a0"

//INFO: This character should be an integer between 0 and 9. This number will be returned. If anything goes wrong then the command will return -1. 
//PARAM NOTES:
//PURPOSE: finds the string for the given text label. It then finds character number CharacterIndex (counting from 0). More info.
NATIVE FUNC INT GET_NTH_INTEGER_IN_STRING(STRING pTextLabel, INT CharacterIndex) = "0x9486d801f2787584"

//INFO: 
//PARAM NOTES:
//PURPOSE:  Gets the name assigned to the blip
NATIVE FUNC string GET_BLIP_NAME(BLIP_INDEX blip) = "0x5701b290ef2286a2"

//INFO: 
//PARAM NOTES:
//PURPOSE:  Change Radar blip name with straight ascii text
NATIVE PROC SET_BLIP_NAME_FROM_ASCII(BLIP_INDEX blip, STRING pText) = "0xd8a05a427401160f"

//INFO: 
//PARAM NOTES:
//PURPOSE:  Sets a debug number on a blip
NATIVE PROC SET_BLIP_DEBUG_NUMBER(BLIP_INDEX BlipIndex, INT number) = "0x587091ad2555a49d"

//INFO: 
//PARAM NOTES:
//PURPOSE:  turns off the debug number on a blip
NATIVE PROC SET_BLIP_DEBUG_NUMBER_OFF(BLIP_INDEX BlipIndex) = "0x46f49532877e9ee2"

#ENDIF	//	IS_DEBUG_BUILD

//INFO: 
//PARAM NOTES:
//PURPOSE: creates the tag for a player above their heads with default values
NATIVE PROC CREATE_MP_GAMER_TAG(INT iPlayerNum, STRING PlayerName, BOOL bCrewTypeIsPrivate, BOOL bCrewTagContainsRockstar, STRING CrewTag, INT iCrewRank) = "0xb8f47fca9cb5ff4c"
NATIVE PROC CREATE_MP_GAMER_TAG_WITH_CREW_COLOR(INT iPlayerNum, STRING PlayerName, BOOL bCrewTypeIsPrivate, BOOL bCrewTagContainsRockstar, STRING CrewTag, INT iCrewRank, INT crewR, INT crewG, INT crewB) = "0x9a7db029f0aa4c6f"

// Returns true when the MP Gamer Tag class is ready to be used.
NATIVE FUNC BOOL IS_MP_GAMER_TAG_MOVIE_ACTIVE() = "0x80efb1e2e2560ad6"

//INFO: 
//PARAM NOTES:
//PURPOSE: creates the tag for a fake player above their heads with default values (max 20 peds allowed)
NATIVE FUNC INT CREATE_FAKE_MP_GAMER_TAG(PED_INDEX ped, STRING PlayerName, BOOL bCrewTypeIsPrivate, BOOL bCrewTagContainsRockstar, STRING CrewTag, INT iCrewRank) = "0x03fc61b7f2a5b2d2"
NATIVE FUNC INT CREATE_FAKE_MP_GAMER_TAG_WITH_CREW_COLOR(PED_INDEX ped, STRING PlayerName, BOOL bCrewTypeIsPrivate, BOOL bCrewTagContainsRockstar, STRING CrewTag, INT iCrewRank, INT crewR, INT crewG, INT crewB) = "0x111db92ebdcf1648"

NATIVE FUNC INT CREATE_MP_GAMER_TAG_FOR_VEHICLE(VEHICLE_INDEX vehicle, STRING PlayerName) = "0xf06f7a38d13e297f"

//INFO: 
//PARAM NOTES:
//PURPOSE: removes a gamer tag
NATIVE PROC REMOVE_MP_GAMER_TAG(INT iPlayerNum) = "0xa826a32e54aa4c15"

//INFO: 
//PARAM NOTES:
//PURPOSE: returns whether the gamer tag is now active or not, and therefore can have the commands below called on it
NATIVE FUNC BOOL IS_MP_GAMER_TAG_ACTIVE(INT iPlayerNum) = "0xac5dda397cada2c6"

//INFO: 
//PARAM NOTES:
//PURPOSE: returns whether the gamer tag is free to use (not active and not being deleted).
NATIVE FUNC BOOL IS_MP_GAMER_TAG_FREE(INT iPlayerNum) = "0x6237b54b11850790"

//INFO: 
//PARAM NOTES:
//PURPOSE: switches on/off parts of a players head tag
NATIVE PROC SET_MP_GAMER_TAG_VISIBILITY(INT iPlayerNum, eMP_TAG iTag, BOOL bVisible, BOOL bEvenInCars = false) = "0x465d668cf4119c04"

//INFO: 
//PARAM NOTES:
//PURPOSE: switches on/off all parts of a players head tag
NATIVE PROC SET_ALL_MP_GAMER_TAGS_VISIBILITY(INT iPlayerNum, BOOL bVisible) = "0x3961e00a7ab016e7"

//INFO: 
//PARAM NOTES:
//PURPOSE: Allows the gamer tag to render when the game is paused.
NATIVE PROC SET_MP_GAMER_TAGS_CAN_RENDER_WHEN_PAUSED(INT iPlayerNum, BOOL bCanRenderWhenPaused) = "0x914886cd24de155b"

//INFO: 
//PARAM NOTES:
//PURPOSE: If true, and the player is in a vehicle, the health displayed in the health bar will come from the vehicle.
NATIVE PROC SET_MP_GAMER_TAGS_SHOULD_USE_VEHICLE_HEALTH(INT iPlayerNum, BOOL bUseVehicleHealth) = "0xef07efe231052d7f"

//INFO: 
//PARAM NOTES:
//PURPOSE: If true the gamer tags will use settable points instead of ped or vehcile health.
NATIVE PROC SET_MP_GAMER_TAGS_SHOULD_USE_POINTS_HEALTH(INT iPlayerNum, BOOL bUsePointsHealth) = "0xd791b361a95ef923"

//INFO: 
//PARAM NOTES:
//PURPOSE: If using points based health set the current and max values.
NATIVE PROC SET_MP_GAMER_TAGS_POINT_HEALTH(INT iPlayerNum, INT iPoints, INT iMaxPoints) = "0x4e142c761b569fcb"

//INFO: 
//PARAM NOTES:
//PURPOSE: colourises parts of a players head tag
NATIVE PROC SET_MP_GAMER_TAG_COLOUR(INT iPlayerNum, eMP_TAG iTag, HUD_COLOURS hudColour) = "0xd68a138d534769e8"

//INFO: 
//PARAM NOTES:
//PURPOSE: colourises the health bar over the player's head.
NATIVE PROC SET_MP_GAMER_TAG_HEALTH_BAR_COLOUR(INT iPlayerNum, HUD_COLOURS hudColour) = "0x34ce544f73db9118"

//INFO: 
//PARAM NOTES:
//PURPOSE: sets the alpha of a gamer tag component
NATIVE PROC SET_MP_GAMER_TAG_ALPHA(INT iPlayerNum, eMP_TAG iTag, INT iAlpha) = "0xcc3c77459d6604f8"

//INFO: 
//PARAM NOTES:
//PURPOSE: sets the wanted level on the player head tag
NATIVE PROC SET_MP_GAMER_TAG_WANTED_LEVEL(INT iPlayerNum, INT iWantedLevel) = "0x7ada62f58586bf28"

//INFO: 
//PARAM NOTES:
//PURPOSE: sets the number of packages player has on the player head tag
NATIVE PROC SET_MP_GAMER_TAG_NUM_PACKAGES(INT iPlayerNum, INT iNumPackages) = "0x61a2f420e5936c0b"

//INFO: 
//PARAM NOTES:
//PURPOSE: sets the wanted level on the player head tag
NATIVE PROC SET_MP_GAMER_TAG_RANK(INT iPlayerNum, INT iRank) = "0xc4f08c7219c1e691"

//INFO: 
//PARAM NOTES:
//PURPOSE: Used for reseting the crew details (in case the player joins or leaves a clan).
NATIVE PROC SET_MP_GAMER_TAG_CREW_DETAILS(INT iPlayerNum, BOOL bCrewTypeIsPrivate, BOOL bCrewTagContainsRockstar, STRING CrewTag, INT iCrewRank, INT crewR, INT crewG, INT crewB) = "0x014c2dfdc698b6d1"

//INFO: 
//PARAM NOTES:
//PURPOSE: Used for reseting the player's name.
NATIVE PROC SET_MP_GAMER_TAG_NAME(INT iPlayerNum, STRING PlayerName) = "0x3a32e5636851aa85"

//INFO: 
//PARAM NOTES:
//PURPOSE: When this function returns true, the following functions shouldn't be called, SET_MP_GAMER_TAG_NAME and SET_MP_GAMER_TAG_CREW_DETAILS
NATIVE FUNC BOOL IS_UPDATING_MP_GAMER_TAG_NAME_AND_CREW_DETAILS(INT iPlayerNum) = "0x9b3b33e47dab4bdc"

//INFO: 
//PARAM NOTES:
//PURPOSE: Sets the big text in the gamer tag.
NATIVE PROC SET_MP_GAMER_TAG_BIG_TEXT(INT iPlayerNum, STRING BigText) = "0xed4f77976d49cbd2"

//INFO: 
//PARAM NOTES:
//PURPOSE: Sets the vertical screen offset for all gamertags
NATIVE PROC SET_MP_GAMER_TAG_VERTICAL_OFFSET(FLOAT fVerticalOffset) = "0x7a8bb1e36e1c430b"

//INFO: 
//PARAM NOTES:
//PURPOSE: gets the value of a global flag
NATIVE FUNC INT GET_GLOBAL_ACTIONSCRIPT_FLAG(INT iIndex) = "0x974b1c69fc991e56"

//INFO: 
//PARAM NOTES:
//PURPOSE: resets the value of a global flag
NATIVE PROC RESET_GLOBAL_ACTIONSCRIPT_FLAG(INT iIndex) = "0x28ee7e032936a666"

//INFO: 
//PARAM NOTES:
//PURPOSE: gets the current webpage id (web page rather than site)
NATIVE FUNC INT GET_CURRENT_WEBPAGE_ID() = "0x521b7005b6f45a1e"

//INFO: 
//PARAM NOTES:
//PURPOSE: gets the current website id (web site rather than page)
NATIVE FUNC INT GET_CURRENT_WEBSITE_ID() = "0x377a5b907f1da56d"

//INFO: 
//PARAM NOTES: sets the warning message active by script this frame - call this every frame.  Movie will get removed when it stops getting called
//PURPOSE: sets it ready, available to call IS_WARNING_MESSAGE_READY_FOR_CONTROL and BEGIN_SCALEFORM_MOVIE_METHOD_ON_WARNING_MESSAGE
NATIVE PROC SET_WARNING_MESSAGE_IN_USE_THIS_FRAME() = "0x20b8419054192c7a"

//INFO: 
//PARAM NOTES:
//PURPOSE: this should be checked before script try to call BEGIN_SCALEFORM_MOVIE_METHOD_ON_WARNING_MESSAGE
NATIVE FUNC BOOL IS_WARNING_MESSAGE_READY_FOR_CONTROL() = "0x0b24c5748895a04d"

//INFO: start of an actionscript method called on the warning message movie
//PARAM NOTES: actionscript method name.  Will return true if successful and false if not
//PURPOSE: 
NATIVE FUNC BOOL BEGIN_SCALEFORM_MOVIE_METHOD_ON_WARNING_MESSAGE(STRING cMethodName) = "0x5499272ac38beb55"

//INFO: 
//PARAM NOTES: iButtonFlagBitfield should be made up of the constants that begin with FE_WARNING_ (declared in frontend_enums.sch / frontend.xml). You can combine several of these using the | operator
//PURPOSE: sets a warning message with buttons.   No header.  Must be called every frame
NATIVE PROC SET_WARNING_MESSAGE(STRING pTextLabel,
								FE_WARNING_FLAGS iButtonFlagBitfield,
								STRING pBodySubTextLabel = NULL,
								BOOL bInsertNumber = FALSE,
								INT NumberToInsert = -1,
								STRING pFirstSubStringTextLabel = NULL, 
								STRING pSecondSubStringTextLabel = NULL,
								BOOL bBackground = TRUE,
								INT errorNumber = 0) = "0x7b1776b3b53f8d74"

//INFO: 
//PARAM NOTES: iButtonFlagBitfield should be made up of the constants that begin with FE_WARNING_ (declared in frontend_enums.sch / frontend.xml). You can combine several of these using the | operator
//PURPOSE: sets a warning message with buttons.   No header.  Must be called every frame
NATIVE PROC SET_WARNING_MESSAGE_EXTENDED(STRING pTextLabel,
								FE_WARNING_FLAGS iButtonFlagBitfieldLower,
								FE_WARNING_FLAGS_EXTENDED iButtonFlagBitfieldUpper,
								STRING pBodySubTextLabel = NULL,
								BOOL bInsertNumber = FALSE,
								INT NumberToInsert = -1,
								STRING pFirstSubStringTextLabel = NULL, 
								STRING pSecondSubStringTextLabel = NULL,
								BOOL bBackground = TRUE,
								INT errorNumber = 0) = "0xf3621bb3182cbdae"

//INFO: 
//PARAM NOTES: iButtonFlagBitfield should be made up of the constants that begin with FE_WARNING_ (declared in frontend_enums.sch / frontend.xml). You can combine several of these using the | operator
//PURPOSE: sets a warning message with buttons.   No header.  Must be called every frame
NATIVE PROC SET_WARNING_MESSAGE_WITH_HEADER(STRING pHeaderTextLabel,
											STRING pBodyTextLabel,
											FE_WARNING_FLAGS iButtonFlagBitfield,
											STRING pBodySubTextLabel = NULL,
											BOOL bInsertNumber = FALSE,
											INT NumberToInsert = -1,
											STRING pFirstSubStringTextLabel = NULL, 
											STRING pSecondSubStringTextLabel = NULL,
											BOOL bBackground = TRUE,
											INT errorNumber = 0) = "0xdc38cc1e35b6a5d7"

//INFO: 
//PARAM NOTES: iButtonFlagBitfield should be made up of the constants that begin with FE_WARNING_ (declared in frontend_enums.sch / frontend.xml). You can combine several of these using the | operator
//PURPOSE: sets a warning message with buttons.   No header.  Must be called every frame
NATIVE PROC SET_WARNING_MESSAGE_WITH_HEADER_EXTENDED(STRING pHeaderTextLabel,
											STRING pBodyTextLabel,
											FE_WARNING_FLAGS iButtonFlagBitfieldLower,
											FE_WARNING_FLAGS_EXTENDED iButtonFlagBitfieldUpper,
											STRING pBodySubTextLabel = NULL,
											BOOL bInsertNumber = FALSE,
											INT NumberToInsert = -1,
											STRING pFirstSubStringTextLabel = NULL, 
											STRING pSecondSubStringTextLabel = NULL,
											BOOL bBackground = TRUE,
											INT errorNumber = 0) = "0x38b55259c2e078ed"


//INFO: 
//PURPOSE: Returns the hash of the current message string being used by an active warning screen. Returns 0 if the warning screne isn't active.
NATIVE FUNC INT GET_WARNING_SCREEN_MESSAGE_HASH() = "0x99c5758d126de2c4"


ENUM WARNING_MESSAGE_FLAGS
	WARNING_MESSAGE_DEFAULT = 0,
	WARNING_MESSAGE_FIRST_SUBSTRING_IS_LITERAL = 1,
	WARNING_MESSAGE_SECOND_SUBSTRING_IS_LITERAL = 2
ENDENUM

//INFO: 
//PARAM NOTES: iButtonFlagBitfield should be made up of the constants that begin with FE_WARNING_ (declared in frontend_enums.sch / frontend.xml). You can combine several of these using the | operator
//	SubStringFlags allows one or both of the substrings to be literal strings so that the names of UGC missions can be displayed.
//PURPOSE: sets a warning message with buttons. Must be called every frame
NATIVE PROC SET_WARNING_MESSAGE_WITH_HEADER_AND_SUBSTRING_FLAGS(STRING pHeaderTextLabel,
											STRING pBodyTextLabel,
											FE_WARNING_FLAGS iButtonFlagBitfield,
											STRING pBodySubTextLabel = NULL,
											BOOL bInsertNumber = FALSE,
											INT NumberToInsert = -1,
											WARNING_MESSAGE_FLAGS SubStringFlags = WARNING_MESSAGE_DEFAULT,
											STRING pFirstSubStringTextLabel = NULL, 
											STRING pSecondSubStringTextLabel = NULL,
											BOOL bBackground = TRUE,
											INT errorNumber = 0) = "0x701919482c74b5ab"

//INFO: 
//PARAM NOTES: iButtonFlagBitfield should be made up of the constants that begin with FE_WARNING_ (declared in frontend_enums.sch / frontend.xml). You can combine several of these using the | operator
//	SubStringFlags allows one or both of the substrings to be literal strings so that the names of UGC missions can be displayed.
//PURPOSE: sets a warning message with buttons. Must be called every frame
NATIVE PROC SET_WARNING_MESSAGE_WITH_HEADER_AND_SUBSTRING_FLAGS_EXTENDED(STRING pHeaderTextLabel,
											STRING pBodyTextLabel,
											FE_WARNING_FLAGS iButtonFlagBitfieldLower,
											FE_WARNING_FLAGS_EXTENDED iButtonFlagBitfieldUpper,
											STRING pBodySubTextLabel = NULL,
											BOOL bInsertNumber = FALSE,
											INT NumberToInsert = -1,
											WARNING_MESSAGE_FLAGS SubStringFlags = WARNING_MESSAGE_DEFAULT,
											STRING pFirstSubStringTextLabel = NULL, 
											STRING pSecondSubStringTextLabel = NULL,
											BOOL bBackground = TRUE,
											INT errorNumber = 0) = "0x15803fec3b9a872b"

//INFO: 
//PARAM NOTES: warning message setup must always be called 1st - returns true if it was a success (ie warning message recieved it)
//PURPOSE: sets options on a warning message. Must be called every frame
NATIVE FUNC BOOL SET_WARNING_MESSAGE_OPTION_ITEMS(int iHighlightIndex,
													STRING pNameString,
													int iCash,
													int iRp,
													int iLvl,
													int iCol) = "0x0c5a80a9e096d529"

//INFO: 
//PARAM NOTES: warning message setup and options setup  must always be called 1st - returns true if it was a success (ie warning message recieved it).   If false is recieved then it will not highlight
//PURPOSE: sets options on a warning message. Must be called every frame
NATIVE FUNC BOOL SET_WARNING_MESSAGE_OPTION_HIGHLIGHT(int iHighlightIndex) = "0xa2ed59c9836377b1"

NATIVE PROC REMOVE_WARNING_MESSAGE_OPTION_ITEMS() = "0x681caca8eac238f8"

//PURPOSE: Returns TRUE if a warning message such as "Do you want to sign in?" is being displayed
NATIVE FUNC BOOL IS_WARNING_MESSAGE_ACTIVE() = "0x3e6c9dad84cefed1"

//INFO: 
//PARAM NOTES:
//PURPOSE: this should be checked before script try to do anything with the frontend
NATIVE FUNC BOOL IS_FRONTEND_READY_FOR_CONTROL() = "0xf9bdbaa4fc5b46fe"

//INFO: 
//PARAM NOTES:
//PURPOSE: allows script to take control of the frontend menus
NATIVE PROC TAKE_CONTROL_OF_FRONTEND() = "0x373ae80d2ddb5c46"

//INFO: 
//PARAM NOTES:
//PURPOSE: releases control of the frontend menus back to code
NATIVE PROC RELEASE_CONTROL_OF_FRONTEND() = "0x918a52708638ea9b"

//INFO: 
//PARAM NOTES:
//PURPOSE: This should be checked every frame and when it returns true, check CommandGetScreenCodeWantsScriptToTakeControl
NATIVE FUNC BOOL CODE_WANTS_SCRIPT_TO_TAKE_CONTROL() = "0xae1c7c8cfcc275f9"

//INFO: 
//PARAM NOTES:
//PURPOSE: This should only be called once CommandCodeWantsScriptToTakeControl returns true and will give the id of the screen code wants script to populate
NATIVE FUNC FRONTEND_MENU_SCREEN GET_SCREEN_CODE_WANTS_SCRIPT_TO_CONTROL() = "0x113cc89632e2c20d"

//INFO: 
//PARAM NOTES: DEPRECATED
//PURPOSE: call every frame to draw the standard frontend background
NATIVE PROC DRAW_FRONTEND_BACKGROUND_THIS_FRAME() = "0x2b8143efb6dc045a"

//INFO: 
//PARAM NOTES: 
//PURPOSE: call every frame to draw the hud over the top of screen fades
NATIVE PROC DRAW_HUD_OVER_FADE_THIS_FRAME() = "0xb33d86ef66b25071"

//INFO: 
//PARAM NOTES:
//PURPOSE: opens frontend menu
NATIVE PROC ACTIVATE_FRONTEND_MENU(FRONTEND_MENU_VERSION iMenuVersion, BOOL bPauseGame = TRUE, FRONTEND_MENU_SCREEN HighlightTab = MENU_UNIQUE_ID_INVALID) = "0xe395f22b346cef9d"

//INFO: 
//PARAM NOTES:
//PURPOSE: restarts the frontend menu if its already active with new header details
NATIVE PROC RESTART_FRONTEND_MENU(FRONTEND_MENU_VERSION iMenuVersion, FRONTEND_MENU_SCREEN HighlightTab = MENU_UNIQUE_ID_INVALID) = "0x0d45994817d78358"

//INFO: 
//PARAM NOTES:
//PURPOSE: returns the current frontend version
NATIVE FUNC FRONTEND_MENU_VERSION GET_CURRENT_FRONTEND_MENU_VERSION() = "0x09afb3c8f99a613f"

//INFO: 
//PARAM NOTES:
//PURPOSE: returns true whether you are navigating content or not in the frontend menus
NATIVE FUNC BOOL IS_NAVIGATING_MENU_CONTENT() = "0x1d1604fa184430f7"

//INFO: 
//PARAM NOTES:
//PURPOSE: This should be checked every frame and when it returns true, check GET_MENU_TRIGGER_EVENT_DETAILS
NATIVE FUNC BOOL HAS_MENU_TRIGGER_EVENT_OCCURRED() = "0x40deeffceb637529"

//INFO: 
//PARAM NOTES:
//PURPOSE: This should be checked every frame and when it returns true, check GET_MENU_LAYOUT_CHANGED_EVENT_DETAILS
NATIVE FUNC BOOL HAS_MENU_LAYOUT_CHANGED_EVENT_OCCURRED() = "0x09327ba0c008a581"

//INFO:
//PARAM NOTES: Unique id provided through LayoutChanged
//PURPOSE: Use to notify savegame frontend which save game is highlighted while in the load game menu
NATIVE PROC SET_SAVEGAME_LIST_UNIQUE_ID(INT iUniqueId) = "0x46978fca0f1ea6ce"

//INFO: 
//PARAM NOTES:
//PURPOSE: passes the details of the trigger event - must only be called once, and only when HAS_MENU_TRIGGER_EVENT_OCCURRED returns true
NATIVE PROC GET_MENU_TRIGGER_EVENT_DETAILS(FRONTEND_MENU_SCREEN &iTriggerId, INT &iMenuIndex) = "0x75088fad0b49b1a8"

//INFO: 
//PARAM NOTES:
//PURPOSE: Removes a cop blip from the ped.
NATIVE PROC REMOVE_COP_BLIP_FROM_PED(PED_INDEX iPedIndex) = "0xe38ee0041b752011"

//INFO: 
//PARAM NOTES:
//PURPOSE: passes the details of the layout changed event - must only be called once, and only when HAS_MENU_LAYOUT_CHANGED_EVENT_OCCURRED returns true
NATIVE PROC GET_MENU_LAYOUT_CHANGED_EVENT_DETAILS(FRONTEND_MENU_SCREEN &iPreviousId, FRONTEND_MENU_SCREEN &iNextId, INT &iMenuIndex) = "0xa981c26f706d5ecf"

//INFO: 
//PARAM NOTES: bLeftArrow - true to set left arrow, false to set right arrow
//PURPOSE: Displays or hides content arrows
NATIVE PROC SET_CONTENT_ARROW_VISIBLE(BOOL bLeftArrow, BOOL bVisible) = "0x98080636c10f2d62"

//INFO: 
//PARAM NOTES: bLeftArrow - true to set left arrow, false to set right arrow
//             fPositionX & fPositionY - set to a negative number for default position. Position is in 0.0 to 1.0 space.
//PURPOSE: Sets the position of content arrows
NATIVE PROC SET_CONTENT_ARROW_POSITION(BOOL bLeftArrow, FLOAT fPositionX = -1.0, FLOAT fPositionY = -1.0) = "0x7e1fe2bcbb891233"

/// PURPOSE:  Returns true if the data ready, sets the rgb as -1,-1,-1 if there is no crew data for the currently selected player.
NATIVE FUNC BOOL GET_PM_PLAYER_CREW_COLOR(INT& r, INT& g, INT& b) = "0xd4c335ee280ddb77"

/// PURPOSE:  Get the value of an Int, UInt8, UInt16, UInt32 and UInt64 stat.
NATIVE FUNC BOOL GET_MENU_PED_INT_STAT(STATSENUM keyHash, INT& data) = "0x08c246faea34e413"

/// PURPOSE:  Get the value of an Int, UInt8, UInt16, UInt32 and UInt64 stat for a specific character slot
NATIVE FUNC BOOL GET_CHARACTER_MENU_PED_INT_STAT(STATSENUM keyHash, INT& data, INT characterSlot = -1) = "0x12fa79d99f6d66db"

/// PURPOSE:  Get the value of an masked Int, UInt8, UInt16, UInt32 and UInt64 stat.
NATIVE FUNC BOOL GET_MENU_PED_MASKED_INT_STAT(STATSENUM keyHash, INT& data, INT offSet, INT numberOfBits) = "0x344ecddc16c7def1"

/// PURPOSE:  Get the value of an masked Int, UInt8, UInt16, UInt32 and UInt64 stat.
/// NOTE:  This allows scripters to specify a character slot.
NATIVE FUNC BOOL GET_CHARACTER_MENU_PED_MASKED_INT_STAT(STATSENUM keyHash, INT& data, INT offSet, INT numberOfBits, INT characterSlot) = "0x4f46ae5cc69707ce"

/// PURPOSE:  Get the value of an Float stat.
NATIVE FUNC BOOL GET_MENU_PED_FLOAT_STAT(STATSENUM keyHash, FLOAT& data) = "0x33a710bcac7ab802"

/// PURPOSE:  Get the value of an Float stat for a character slot.
NATIVE FUNC BOOL GET_CHARACTER_MENU_PED_FLOAT_STAT(STATSENUM keyHash, FLOAT& data, INT characterSlot = -1) = "0x86b9025b867d9380"

/// PURPOSE:  Get the value of an boolean stat.
NATIVE FUNC BOOL GET_MENU_PED_BOOL_STAT(STATSENUM keyHash, BOOL& data) = "0x7470d10647b74302"

/// PURPOSE:  Get the value of an boolean stat for a character slot.
NATIVE FUNC BOOL GET_CHARACTER_MENU_PED_BOOL_STAT(STATSENUM keyHash, BOOL& data, INT characterSlot = -1) = "0x22be07335de545a4"

//PURPOSE: Removed the ped from the pause menu.
NATIVE PROC CLEAR_PED_IN_PAUSE_MENU() = "0x86cf46c25b8d6473"

//PURPOSE: Hands off a script created ped to code.
// param: column: 0=LEFT, 1=MIDDLE, 2=RIGHT
NATIVE PROC GIVE_PED_TO_PAUSE_MENU(PED_INDEX ped, INT column = 1) = "0xd125b0ecda9c1a27"

//PURPOSE: Sets the BG On or Off
NATIVE PROC SET_PM_PED_BG_VISIBILITY(BOOL isVisible) = "0x04ab3f0c93e59c35"

//PURPOSE: Tells the Pause Menu Hands off a script created ped to code.
// param: column: 0=LEFT, 1=MIDDLE, 2=RIGHT
NATIVE PROC SHOW_PLAYER_PED_IN_PAUSE_MENU(PLAYER_INDEX ped, INT column = 1) = "0x25c0f74a3afb1c29"

//PURPOSE: Tells the Pause Menu to turn the lights on or off for the menu ped.
NATIVE PROC SET_PAUSE_MENU_PED_LIGHTING(BOOL enableLighting) = "0x552750077ba51925"

//PURPOSE: Tells the Pause Menu to make the menu ped awake or aspleep.
NATIVE PROC SET_PAUSE_MENU_PED_SLEEP_STATE(BOOL isAwake) = "0x6811e51206bb9d1a"


//PURPOSE: Opens the Online Policies Menu
NATIVE PROC OPEN_ONLINE_POLICIES_MENU() = "0xbb1a9a32ddfce6d7"

//PURPOSE: Returns if the online policies are up to date.
NATIVE FUNC BOOL ARE_ONLINE_POLICIES_UP_TO_DATE() = "0x8844efa0218dc31d"

//PURPOSE: Returns if the online policies menu is open.
NATIVE FUNC BOOL IS_ONLINE_POLICIES_MENU_ACTIVE() = "0x88c6ff5a86356e32"


//PURPOSE: If the player is currently in a pause menu, then this will open up the social club menu.
NATIVE PROC OPEN_SOCIAL_CLUB_MENU() = "0x7bff54dbead33da7"

//PURPOSE: closes the social club menu
NATIVE PROC CLOSE_SOCIAL_CLUB_MENU() = "0xe62cffb4b4aa12e6"

//PURPOSE: Sets the tour to start out in the SC welcome page.
NATIVE PROC SET_SOCIAL_CLUB_TOUR(STRING tour) = "0x6e6999b535c86055"

//PURPOSE: Returns if the social club menu is open.
NATIVE FUNC BOOL IS_SOCIAL_CLUB_ACTIVE() = "0x483cf2539a512e5e"

//PURPOSE: Enabled/Disable the PC Text Input Box (i.e. Cheat Entry Box)
NATIVE PROC SET_TEXT_INPUT_BOX_ENABLED(BOOL bEnabled) = "0x87068d181565c4b7"

//PURPOSE: Force the text input box to close if it is open
NATIVE PROC FORCE_CLOSE_TEXT_INPUT_BOX() = "0x087fa48489dcbcee"

// PURPOSE: Allow commans to be used in conjuntion with the file name keyboard type.
// NOTE: Must be set before opening the text input box. Will automatically return to false once the text input box closes.
NATIVE PROC SET_ALLOW_COMMA_ON_TEXT_INPUT(BOOL bAllowComma) = "0x8de1b9b6e92dfeb8"

// PURPOSE: Allow commans to be used in conjuntion with the file name keyboard type.
// NOTE: Must be set before opening the text input box. Will automatically return to false once the text input box closes.
NATIVE PROC OVERRIDE_MP_TEXT_CHAT_TEAM_STRING(INT iOverrideHash) = "0xa6a63ef67b2895af"

//PURPOSE: To tell script if a player is typing in MP text chat.
NATIVE FUNC BOOL IS_MP_TEXT_CHAT_TYPING() = "0xf9e7fedd44686ba3"

//PURPOSE: Force the MP Text Chat (behaves similar to pressing ESC button)
NATIVE PROC CLOSE_MP_TEXT_CHAT() = "0x5ff5a6b4eaed8565"

//PURPOSE: Force the MP Text Chat (behaves similar to pressing ESC button)
NATIVE PROC MP_TEXT_CHAT_IS_TEAM_JOB(BOOL bIsTeamJob) = "0xe61c968f64f118d6"

//PURPOSE: Overrides the MP Text Chat color - pass in TRUE and the hudcolor, or just pass in FALSE to turn off
NATIVE PROC OVERRIDE_MP_TEXT_CHAT_COLOR(BOOL bOnOff, HUD_COLOURS hudColor = HUD_COLOUR_WHITE) = "0xc8119e9ea63506a3"

//PURPOSE: Lets script disable the text chat box.
//         Please remember to call MP_TEXT_CHAT_DISABLE(FALSE) when you're done.
NATIVE PROC MP_TEXT_CHAT_DISABLE(BOOL bIsTeamJob) = "0x81b302aaeec2f2b6"

// PURPOSE: Sets the flag for the "InTournament" context
NATIVE PROC FLAG_PLAYER_CONTEXT_IN_TOURNAMENT(BOOL bInTournament) = "0xeefc54f43c5eba92"

//INFO: 
//PARAM NOTES:
//PURPOSE: locks a menu tab, meaning it cannot be highlighted and a padlock symbol is shown
NATIVE PROC SET_FRONTEND_TAB_LOCKED(INT iTabNumber, BOOL bLock) = "0x52af440b981cb6c8"

//INFO: 
//PARAM NOTES:
//PURPOSE: Opens the report menu for UGC player missions
NATIVE PROC OPEN_REPORTUGC_MENU() = "0xfe02f8243877a5c2"

//INFO: 
//PARAM NOTES:
//PURPOSE: Returns true/false if UGC Report Menu is open
NATIVE FUNC BOOL IS_REPORTUGC_MENU_OPEN() = "0x11391c9c9581b53d"

//INFO: 
//PARAM NOTES:
//PURPOSE: Returns current UGC report page
NATIVE FUNC PAGE_STATE_ENUM GET_CURRENT_UGC_PAGE() = "0x0703babda39038c8"

//INFO: 
//PARAM NOTES:
//PURPOSE: Closes the report menu for UGC player missions
NATIVE PROC FORCE_CLOSE_REPORTUGC_MENU() = "0x811996236e7644b0"


//INFO: 
//PARAM NOTES:
//PURPOSE: starts rendering of custom minimap for UI screens
NATIVE PROC CUSTOM_MINIMAP_SET_ACTIVE( BOOL bLock) = "0xa252a30b2bfab672"

//INFO: 
//PARAM NOTES:
//PURPOSE: starts rendering of custom minimap for UI screens
NATIVE FUNC BOOL CUSTOM_MINIMAP_IS_ACTIVE() = "0x60ab184d423f538e"

//INFO: 
//PARAM NOTES:
//PURPOSE: starts rendering of custom minimap for UI screens
NATIVE  FUNC BOOL CUSTOM_MINIMAP_SNAP_TO_BLIP_WITH_INDEX( INT INDEX) = "0x0c8e521862509939"

//INFO: 
//PARAM NOTES:
//PURPOSE: Set a waypoint/remove waypoint on the last SnapToBlipp'ed blip
NATIVE  FUNC BOOL CUSTOM_MINIMAP_SNAP_TO_BLIP_WITH_UNIQUEID( INT INDEX) = "0x0b18d6d50a40bbe8"

//INFO: 
//PARAM NOTES:
//PURPOSE: starts rendering of custom minimap for UI screens
NATIVE PROC CUSTOM_MINIMAP_SET_WAYPOINT_WITH_INDEX() = "0xe573f8bd122a4db1"

//INFO: 
//PARAM NOTES:
//PURPOSE: Set the blip icon
NATIVE PROC CUSTOM_MINIMAP_SET_BLIP_OBJECT( INT INDEX) = "0x3205db2634bd3142"

//INFO: 
//PARAM NOTES:
//PURPOSE: Get the type of blip object we're using
NATIVE  FUNC INT CUSTOM_MINIMAP_GET_BLIP_OBJECT() = "0xb5d1397de561de1b"

//INFO: 
//PARAM NOTES:
//PURPOSE: starts rendering of custom minimap for UI screens
NATIVE PROC CUSTOM_MINIMAP_CLEAR_BLIPS() = "0xa407e52c82d0e3fd"

//INFO: 
//PARAM NOTES:
//PURPOSE: Get the number of blips on the custom minimap
NATIVE FUNC INT CUSTOM_MINIMAP_GET_NUMBER_OF_BLIPS() = "0x606e00f238f61016"

//INFO: 
//PARAM NOTES:
//PURPOSE: Create a blip for 
NATIVE FUNC INT CUSTOM_MINIMAP_CREATE_BLIP(VECTOR POSITION) = "0x76e0b18c5fdf0430"

//INFO: 
//PARAM NOTES:
//PURPOSE: Remove a blip from the custom minimap
NATIVE FUNC BOOL CUSTOM_MINIMAP_REMOVE_BLIP(INT UNIQUEID) = "0xa6f8f845101bf88d"

//INFO: 
//PARAM NOTES:
//PURPOSE: Force sonar blips to draw this frame
NATIVE FUNC BOOL FORCE_SONAR_BLIPS_THIS_FRAME() = "0xca69a1cc253d2d00"

//INFO: 
//PARAM NOTES:
//PURPOSE: Returns the north blip index.
NATIVE FUNC BLIP_INDEX GET_NORTH_BLID_INDEX() = "0x95f54f350e397d05"

//INFO: 
//PARAM NOTES:
//PURPOSE: display names on the player blips on the "big map"
NATIVE PROC DISPLAY_PLAYER_NAME_TAGS_ON_BLIPS(BOOL bDisplayTags) = "0xa12ae3835d111ddb"

//INFO: 
//PARAM NOTES:
//PURPOSE:	Registers a passed ped with the CScriptPedAIBlips
NATIVE PROC SET_PED_HAS_AI_BLIP(PED_INDEX ped, BOOL bOnOff) = "0x0b69dcf6fe80e8eb"

//INFO: 
//PARAM NOTES:
//PURPOSE:	Registers a passed ped with the CScriptPedAIBlips with a colour override
NATIVE PROC SET_PED_HAS_AI_BLIP_WITH_COLOUR(PED_INDEX ped, BOOL bOnOff, INT iColour) = "0xbfd785b1d608bc11"

//INFO: 
//PARAM NOTES:
//PURPOSE:
NATIVE FUNC BOOL DOES_PED_HAVE_AI_BLIP(PED_INDEX ped) = "0x227d9dce160dda9d"

//INFO: 
//PARAM NOTES:
//PURPOSE:
NATIVE PROC SET_PED_AI_BLIP_GANG_ID(PED_INDEX ped, INT gangID) = "0xeec8a34ff9213fe4"

//INFO: 
//PARAM NOTES:
//PURPOSE:
NATIVE PROC SET_PED_AI_BLIP_HAS_CONE(PED_INDEX ped, BOOL bHasCone) = "0x922263c0fea956c8"

//INFO: 
//PARAM NOTES:
//PURPOSE:
NATIVE PROC SET_PED_AI_BLIP_FORCED_ON(PED_INDEX ped, BOOL bOnOff) = "0x0fb9b56364b11bc9"

//INFO: 
//PARAM NOTES:
//PURPOSE:
NATIVE PROC SET_PED_AI_BLIP_NOTICE_RANGE(PED_INDEX ped, FLOAT range) = "0x7c87f71c68a9af0b"

//INFO: 
//PARAM NOTES:
//PURPOSE:
NATIVE PROC SET_PED_AI_BLIP_CHANGE_COLOUR(PED_INDEX ped) = "0xe1cfb21f0ae3ad76"

//INFO: 
//PARAM NOTES:
//PURPOSE:
NATIVE PROC SET_PED_AI_BLIP_SPRITE(PED_INDEX ped, INT spriteID) = "0x21d1ace7ce56627c"

//INFO: 
//PARAM NOTES:
//PURPOSE:
NATIVE FUNC BLIP_INDEX GET_AI_PED_PED_BLIP_INDEX(PED_INDEX PedID) = "0xc6cefb49e88bdd9b"

//INFO: 
//PARAM NOTES:
//PURPOSE:
NATIVE FUNC BLIP_INDEX GET_AI_PED_VEHICLE_BLIP_INDEX(PED_INDEX PedID) = "0xfeb99716362809a3"

//PURPOSE: Checks whether the instructional buttons are active
NATIVE FUNC BOOL ARE_INSTRUCTIONAL_BUTTONS_ACTIVE() = "0xe3dc5fd3cfbc54f4"

//PURPOSE: Checks whether the instructional buttons are active
NATIVE PROC SET_PM_WARNINGSCREEN_ACTIVE(BOOL bActive) = "0x892af48f0da9a598"

//PURPOSE: returns true once the Director Mode menu option is selected in the Rockstar Editor
NATIVE FUNC BOOL HAS_DIRECTOR_MODE_BEEN_LAUNCHED_BY_CODE() = "0x2940f2270f5f4f7c"

//PURPOSE: Must be called by script to inform code that the directorMode script has been launched
NATIVE PROC SET_DIRECTOR_MODE_LAUNCHED_BY_SCRIPT() = "0xe823a8ca7abbb847"

//PURPOSE: Very similar to SET_DIRECTOR_MODE_LAUNCHED_BY_SCRIPT, but also allows script to tell code that 
NATIVE PROC SET_PLAYER_IS_IN_DIRECTOR_MODE(BOOL bIsInDirectorMode) = "0xeec83eb4b5afd94c"

//PURPOSE: enables/disables the director mode option in the Rockstar Editor
NATIVE PROC SET_DIRECTOR_MODE_AVAILABLE(BOOL active) = "0x49f2ab96167a1aef"

//=======================================================================================================
//HUD MARKERS

//PURPOSE: Hides all Hud Markers this frame
NATIVE PROC HIDE_HUDMARKERS_THIS_FRAME() = "0x66f2f60e8589a96d"

//PURPOSE: Returns true if the ID is valid and there is an active marker for it
//RETURNS: ID handle to the marker
NATIVE FUNC BOOL IS_HUDMARKER_VALID(HUDMARKER_ID ID) = "0xf5e12865c75047c5"

//PURPOSE: Add a hud marker at the given world position
//RETURNS: ID handle to the marker
NATIVE FUNC HUDMARKER_ID ADD_HUDMARKER(VECTOR vWorldPos, HUD_COLOURS eHudColor) = "0xecb732f50d878f6d"

//PURPOSE: Add a hud marker bound to a blip. The marker will inherit the Blip's location, icon, colour, etc. And will be automatically removed if the blip is.
//RETURNS: ID handle to the marker
NATIVE FUNC HUDMARKER_ID ADD_HUDMARKER_FOR_BLIP(BLIP_INDEX BlipIndex) = "0x440a33ec66764381"

//PURPOSE: Remove a Hud Marker by ID. Will invalidate ID passed in if successful
//RETURNS: True if the marker was valid and successfully removed
NATIVE FUNC BOOL REMOVE_HUDMARKER(HUDMARKER_ID& ID) = "0xed8c89a34ba06487"

//PURPOSE: Set a Hud Marker's group. Groups are useful for controlling markers of similar types.
NATIVE PROC SET_HUDMARKER_GROUP(HUDMARKER_ID ID, INT iGroupId) = "0xe37ec263bc38fff4"

//PURPOSE: Set a Hud Marker's world position
NATIVE PROC SET_HUDMARKER_POSITION(HUDMARKER_ID ID, VECTOR vWorldPos) = "0x80798640dbe1f798"

//PURPOSE: Set a Hud Marker's world height offset. THis is useful to raise markers above objects such as peds and vehicles
NATIVE PROC SET_HUDMARKER_HEIGHT_OFFSET(HUDMARKER_ID ID, FLOAT fHeightOffset) = "0x965f9ffad59c35ec"

//PURPOSE: Set a Hud Marker's colour
NATIVE PROC SET_HUDMARKER_COLOUR(HUDMARKER_ID ID, HUD_COLOURS eHudColor) = "0x4fc4f815de2fe321"

//PURPOSE: Set a Hud Marker's icon
//NATIVE PROC SET_HUDMARKER_ICON(HUDMARKER_ID ID, eHUDMARKER_ICON eIcon)

//PURPOSE: Set whether a Hud Marker should clamp, false by default
NATIVE PROC SET_HUDMARKER_CLAMP_ENABLED(HUDMARKER_ID ID, BOOL bClampEnabled) = "0xb5b784f3acd0d4b4"

//PURPOSE: Limit the number of markers that are allowed to clamp for a given group
NATIVE PROC SET_HUDMARKER_GROUP_MAX_CLAMP_NUM(INT iGroup, INT iMaxClampNum) = "0x589a8e0e473389ef"

//PURPOSE: Ignore max distance culling checks and force X markers to be visible in a given group
NATIVE PROC SET_HUDMARKER_GROUP_FORCE_VISIBLE_NUM(INT iGroup, INT iForceVisibleNum) = "0xa187218b08fc7769"

//PURPOSE: Set the maximum number of markers that can be visible for a given group
NATIVE PROC SET_HUDMARKER_GROUP_MAX_VISIBLE(INT iGroup, INT iMaxVisible) = "0x5b26f46c9b42c167"

//PURPOSE: Set the minimum distance a marker should be from the player to be visible in a given group
NATIVE PROC SET_HUDMARKER_GROUP_MIN_DISTANCE(INT iGroup, FLOAT fMinDistance) = "0xaca091ec77fd993f"

//PURPOSE: Set the maximum distance a marker can be from the player to be visible in a given group
NATIVE PROC SET_HUDMARKER_GROUP_MAX_DISTANCE(INT iGroup, FLOAT fMaxDistance) = "0xc1cd9ad0799b22e5"

//PURPOSE: Set the minimum distance a marker's distance text should be made visible
NATIVE PROC SET_HUDMARKER_GROUP_MIN_TEXT_DISTANCE(INT iGroup, FLOAT fMinDistance) = "0x9ce4d6f2d3144248"

//PURPOSE: Hide all other groups (multiple groups with solo enabled will be visible)
NATIVE PROC SET_HUDMARKER_GROUP_IS_SOLO(INT iGroup, BOOL bIsSolo) = "0xccd3e8ba4c026c9d"

//PURPOSE: Hide this group
NATIVE PROC SET_HUDMARKER_GROUP_IS_MUTED(INT iGroup, FLOAT bIsMuted) = "0x7781537104c7acb3"

//PURPOSE: Set Always Show Distance Text For Closest
NATIVE PROC SET_HUDMARKER_GROUP_ALWAYS_SHOW_DISTANCE_TEXT_FOR_CLOSEST(INT iGroup, BOOL bAlwaysShowDistanceTextForClosest) = "0x4f744d6bf85593b7"
